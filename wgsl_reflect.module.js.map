{"version":3,"file":"wgsl_reflect.module.js","sources":["src/reflect/info.ts","src/utils/float.ts","src/utils/texture_sample.ts","src/utils/texture_format_info.ts","src/wgsl_ast.ts","src/wgsl_scanner.ts","src/utils/cast.ts","src/reflect/reflect.ts","src/exec/exec_context.ts","src/exec/exec_interface.ts","src/exec/builtin_functions.ts","src/utils/matrix.ts","src/wgsl_exec.ts","src/ast/parse_context.ts","src/wgsl_parser.ts","src/wgsl_reflect.ts","src/exec/command.ts","src/exec/stack_frame.ts","src/exec/exec_stack.ts","src/wgsl_debug.ts"],"sourcesContent":["import { Attribute } from \"../wgsl_ast.js\";\r\n\r\nexport class TypeInfo {\r\n  name: string;\r\n  attributes: Attribute[] | null;\r\n  size: number;\r\n\r\n  constructor(name: string, attributes: Attribute[] | null) {\r\n    this.name = name;\r\n    this.attributes = attributes;\r\n    this.size = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isPointer(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\nexport class MemberInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n  attributes: Attribute[] | null;\r\n  offset: number;\r\n  size: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    attributes: Attribute[] | null\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n    this.offset = 0;\r\n    this.size = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return this.type.isArray;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return this.type.isStruct;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return this.type.isTemplate;\r\n  }\r\n\r\n  get align(): number {\r\n    return this.type.isStruct ? (this.type as StructInfo).align : 0;\r\n  }\r\n\r\n  get members(): MemberInfo[] | null {\r\n    return this.type.isStruct ? (this.type as StructInfo).members : null;\r\n  }\r\n\r\n  get format(): TypeInfo | null {\r\n    return this.type.isArray\r\n      ? (this.type as ArrayInfo).format\r\n      : this.type.isTemplate\r\n      ? (this.type as TemplateInfo).format\r\n      : null;\r\n  }\r\n\r\n  get count(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).count : 0;\r\n  }\r\n\r\n  get stride(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).stride : this.size;\r\n  }\r\n}\r\n\r\nexport class StructInfo extends TypeInfo {\r\n  members: MemberInfo[] = [];\r\n  align: number = 0;\r\n  startLine: number = -1;\r\n  endLine: number = -1;\r\n  inUse: boolean = false;\r\n\r\n  constructor(name: string, attributes: Attribute[] | null) {\r\n    super(name, attributes);\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class ArrayInfo extends TypeInfo {\r\n  format: TypeInfo;\r\n  count: number;\r\n  stride: number;\r\n\r\n  constructor(name: string, attributes: Attribute[] | null) {\r\n    super(name, attributes);\r\n    this.count = 0;\r\n    this.stride = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return `array<${this.format.getTypeName()}, ${this.count}>`;\r\n  }\r\n}\r\n\r\nexport class PointerInfo extends TypeInfo {\r\n  format: TypeInfo;\r\n  constructor(name: string, format: TypeInfo, attributes: Attribute[] | null) {\r\n    super(name, attributes);\r\n    this.format = format;\r\n  }\r\n\r\n  get isPointer(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return `&${this.format.getTypeName()}`;\r\n  }\r\n}\r\n\r\nexport class TemplateInfo extends TypeInfo {\r\n  format: TypeInfo | null;\r\n  access: string;\r\n  constructor(\r\n    name: string,\r\n    format: TypeInfo | null,\r\n    attributes: Attribute[] | null,\r\n    access: string\r\n  ) {\r\n    super(name, attributes);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    let name = this.name;\r\n    if (this.format !== null) {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\" ||\r\n          name === \"mat2x2\" || name === \"mat2x3\" || name === \"mat2x4\" ||\r\n          name === \"mat3x2\" || name === \"mat3x3\" || name === \"mat3x4\" ||\r\n          name === \"mat4x2\" || name === \"mat4x3\" || name === \"mat4x4\") {\r\n        if (this.format.name === \"f32\") {\r\n          name += \"f\";\r\n          return name;\r\n        } else if (this.format.name === \"i32\") {\r\n          name += \"i\";\r\n          return name;\r\n        } else if (this.format.name === \"u32\") {\r\n          name += \"u\";\r\n          return name;\r\n        } else if (this.format.name === \"bool\") {\r\n          name += \"b\";\r\n          return name;\r\n        } else if (this.format.name === \"f16\") {\r\n          name += \"h\";\r\n          return name;\r\n        }\r\n      }\r\n      name += `<${this.format.name}>`;\r\n    } else {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\") {\r\n        return name;\r\n      }\r\n      //console.error(\"Template format is null.\");\r\n    }\r\n    return name;\r\n  }\r\n}\r\n\r\nexport enum ResourceType {\r\n  Uniform,\r\n  Storage,\r\n  Texture,\r\n  Sampler,\r\n  StorageTexture,\r\n}\r\n\r\nexport class VariableInfo {\r\n  attributes: Attribute[] | null;\r\n  name: string;\r\n  type: TypeInfo;\r\n  group: number;\r\n  binding: number;\r\n  resourceType: ResourceType;\r\n  access: string;\r\n  relations: Array<VariableInfo> | null = null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    group: number,\r\n    binding: number,\r\n    attributes: Attribute[] | null,\r\n    resourceType: ResourceType,\r\n    access: string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.group = group;\r\n    this.binding = binding;\r\n    this.attributes = attributes;\r\n    this.resourceType = resourceType;\r\n    this.access = access;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return this.type.isArray;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return this.type.isStruct;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return this.type.isTemplate;\r\n  }\r\n\r\n  get size(): number {\r\n    return this.type.size;\r\n  }\r\n\r\n  get align(): number {\r\n    return this.type.isStruct ? (this.type as StructInfo).align : 0;\r\n  }\r\n\r\n  get members(): MemberInfo[] | null {\r\n    return this.type.isStruct ? (this.type as StructInfo).members : null;\r\n  }\r\n\r\n  get format(): TypeInfo | null {\r\n    return this.type.isArray\r\n      ? (this.type as ArrayInfo).format\r\n      : this.type.isTemplate\r\n      ? (this.type as TemplateInfo).format\r\n      : null;\r\n  }\r\n\r\n  get count(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).count : 0;\r\n  }\r\n\r\n  get stride(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).stride : this.size;\r\n  }\r\n}\r\n\r\nexport class AliasInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n\r\n  constructor(name: string, type: TypeInfo) {\r\n    this.name = name;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\nexport class InputInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  locationType: string;\r\n  location: number | string;\r\n  interpolation: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    locationType: string,\r\n    location: number | string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.locationType = locationType;\r\n    this.location = location;\r\n    this.interpolation = null;\r\n  }\r\n}\r\n\r\nexport class OutputInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  locationType: string;\r\n  location: number | string;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    locationType: string,\r\n    location: number | string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.locationType = locationType;\r\n    this.location = location;\r\n  }\r\n}\r\n\r\nexport class OverrideInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  attributes: Attribute[] | null;\r\n  id: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    attributes: Attribute[] | null,\r\n    id: number\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n    this.id = id;\r\n  }\r\n}\r\n\r\nexport class ArgumentInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n  attributes: Attribute[] | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    attributes: Attribute[] | null\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n}\r\n\r\nexport class FunctionInfo {\r\n  name: string;\r\n  stage: string | null = null;\r\n  inputs: InputInfo[] = [];\r\n  outputs: OutputInfo[] = [];\r\n  arguments: ArgumentInfo[] = [];\r\n  returnType: TypeInfo | null = null;\r\n  resources: VariableInfo[] = [];\r\n  overrides: OverrideInfo[] = [];\r\n  attributes: Attribute[] | null;\r\n  startLine: number = -1;\r\n  endLine: number = -1;\r\n  inUse: boolean = false;\r\n  calls: Set<FunctionInfo> = new Set();\r\n\r\n  constructor(name: string, stage: string | null = null, attributes: Attribute[] | null) {\r\n    this.name = name;\r\n    this.stage = stage;\r\n    this.attributes = attributes;\r\n  }\r\n}\r\n\r\nexport class EntryFunctions {\r\n  vertex: FunctionInfo[] = [];\r\n  fragment: FunctionInfo[] = [];\r\n  compute: FunctionInfo[] = [];\r\n}\r\n","// From https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\r\nexport function float16ToFloat32(float16: number): number {\r\n    var s = (float16 & 0x8000) >> 15;\r\n    var e = (float16 & 0x7C00) >> 10;\r\n    var f = float16 & 0x03FF;\r\n\r\n    if (e == 0) {\r\n      return (s ? -1:1) * Math.pow(2, -14) * (f / Math.pow(2, 10));\r\n    } else if (e == 0x1F) {\r\n      return f ? NaN : ((s ? -1 : 1) * Infinity);\r\n    }\r\n\r\n    return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + (f / Math.pow(2, 10)));\r\n}\r\n\r\nconst float32View = new Float32Array(1);\r\nconst int32View = new Int32Array(float32View.buffer);\r\nconst float16View = new Uint16Array(1);\r\n\r\nexport function float32ToFloat16(float32: number): number {\r\n  float32View[0] = float32;\r\n\r\n  const f32 = int32View[0];\r\n  const sign = (f32 >> 31) & 1;\r\n  let exponent = (f32 >> 23) & 0xff;\r\n  let fraction = f32 & 0x7fffff;\r\n\r\n  if (exponent === 0xff) { // Infinity or NaN\r\n    float16View[0] = (sign << 15) | 0x7c00 | (fraction !== 0 ? 0x0200 : 0);\r\n    return float16View[0];\r\n  }\r\n\r\n  if (exponent === 0) { // Zero or subnormal\r\n    if (fraction === 0) { // Zero\r\n      float16View[0] = sign << 15;\r\n      return float16View[0];\r\n    }\r\n    // Subnormal\r\n    fraction |= 0x800000;\r\n    let shift = 113;\r\n    while ((fraction & 0x800000) === 0) {\r\n      fraction <<= 1;\r\n      shift--;\r\n    }\r\n    exponent = 127 - shift;\r\n    fraction &= 0x7fffff;\r\n    if (exponent > 0) {\r\n      fraction = (fraction >> (126 - exponent)) + ((fraction >> (127 - exponent)) & 1);\r\n      float16View[0] = (sign << 15) | (exponent << 10) | (fraction >> 13);\r\n      return float16View[0];\r\n    } else {\r\n      float16View[0] = sign << 15;\r\n      return float16View[0];\r\n    }\r\n  }\r\n\r\n  // Normalized\r\n  exponent = exponent - 127 + 15;\r\n  if (exponent >= 31) { // Overflow\r\n    float16View[0] = (sign << 15) | 0x7c00;\r\n    return float16View[0];\r\n  }\r\n  if (exponent <= 0) { // Underflow\r\n    if (exponent < -10) {\r\n      float16View[0] = sign << 15;\r\n      return float16View[0];\r\n    }\r\n    fraction = (fraction | 0x800000) >> (1 - exponent);\r\n    float16View[0] = (sign << 15) | (fraction >> 13);\r\n    return float16View[0];\r\n  }\r\n\r\n  fraction = fraction >> 13;\r\n  float16View[0] = (sign << 15) | (exponent << 10) | fraction;\r\n  return float16View[0];\r\n}\r\n\r\nconst uint32 = new Uint32Array(1);\r\nconst uint32ToFloat32 = new Float32Array(uint32.buffer, 0, 1);\r\n\r\nexport function float11ToFloat32(f11: number): number {\r\n  const u32 = (((((f11) >> 6) & 0x1F) + (127 - 15)) << 23) | (((f11) & 0x3F) << 17);\r\n  uint32[0] = u32;\r\n  return uint32ToFloat32[0];\r\n}\r\n\r\nexport function float10ToFloat32(f10: number): number {\r\n  const u32 = (((((f10) >> 5) & 0x1F) + (127 - 15)) << 23) | (((f10) & 0x1F) << 18);\r\n  uint32[0] = u32;\r\n  return uint32ToFloat32[0];\r\n}\r\n","import { float16ToFloat32, float32ToFloat16, float10ToFloat32, float11ToFloat32 } from \"./float.js\";\r\n\r\nexport function setTexturePixel(imageData: Uint8Array, x: number, y: number, z: number, mipLevel: number,\r\n        height: number, bytesPerRow: number, texelByteSize: number, format: string, value: number[]): void {\r\n    bytesPerRow = bytesPerRow >> mipLevel;\r\n    height = height >> mipLevel;\r\n\r\n    const offset = (z * bytesPerRow * height) + y * bytesPerRow + x * texelByteSize;\r\n\r\n    switch (format) {\r\n        case \"r8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 1, value);\r\n            return;\r\n        }\r\n        case \"r8snorm\": {\r\n            setPixelValue(imageData, offset, \"8snorm\", 1, value);\r\n            return;\r\n        }\r\n        case \"r8uint\": {\r\n            setPixelValue(imageData, offset, \"8uint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r8sint\": {\r\n            setPixelValue(imageData, offset, \"8sint\", 1, value);\r\n            return;\r\n        }\r\n\r\n        case \"rg8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg8snorm\": {\r\n            setPixelValue(imageData, offset, \"8snorm\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg8uint\": {\r\n            setPixelValue(imageData, offset, \"8uint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg8sint\": {\r\n            setPixelValue(imageData, offset, \"8sint\", 2, value);\r\n            return;\r\n        }\r\n\r\n        case \"rgba8unorm-srgb\":\r\n        case \"rgba8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba8snorm\": {\r\n            setPixelValue(imageData, offset, \"8snorm\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba8uint\": {\r\n            setPixelValue(imageData, offset, \"8uint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba8sint\": {\r\n            setPixelValue(imageData, offset, \"8sint\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"bgra8unorm-srgb\":\r\n        case \"bgra8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"r16uint\": {\r\n            setPixelValue(imageData, offset, \"16uint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r16sint\": {\r\n            setPixelValue(imageData, offset, \"16sint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r16float\": {\r\n            setPixelValue(imageData, offset, \"16float\", 1, value);\r\n            return;\r\n        }\r\n\r\n        case \"rg16uint\": {\r\n            setPixelValue(imageData, offset, \"16uint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg16sint\": {\r\n            setPixelValue(imageData, offset, \"16sint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg16float\": {\r\n            setPixelValue(imageData, offset, \"16float\", 2, value);\r\n            return;\r\n        }\r\n\r\n        case \"rgba16uint\": {\r\n            setPixelValue(imageData, offset, \"16uint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba16sint\": {\r\n            setPixelValue(imageData, offset, \"16sint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba16float\": {\r\n            setPixelValue(imageData, offset, \"16float\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"r32uint\": {\r\n            setPixelValue(imageData, offset, \"32uint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r32sint\": {\r\n            setPixelValue(imageData, offset, \"32sint\", 1, value);\r\n            return;\r\n        }\r\n        case \"depth16unorm\": // depth formats get conerted to r32float\r\n        case \"depth24plus\":\r\n        case \"depth24plus-stencil8\":\r\n        case \"depth32float\":\r\n        case \"depth32float-stencil8\":\r\n        case \"r32float\": {\r\n            setPixelValue(imageData, offset, \"32float\", 1, value);\r\n            return;\r\n        }\r\n        case \"rg32uint\": {\r\n            setPixelValue(imageData, offset, \"32uint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg32sint\": {\r\n            setPixelValue(imageData, offset, \"32sint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg32float\": {\r\n            setPixelValue(imageData, offset, \"32float\", 2, value);\r\n            return;\r\n        }\r\n        case \"rgba32uint\": {\r\n            setPixelValue(imageData, offset, \"32uint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba32sint\": {\r\n            setPixelValue(imageData, offset, \"32sint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba32float\": {\r\n            setPixelValue(imageData, offset, \"32float\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"rg11b10ufloat\": {\r\n            console.error(\"TODO: rg11b10ufloat not supported for writing\");\r\n            /*const uintValue = new Uint32Array(imageData.buffer, offset, 1)[0];\r\n            const ri = uintValue & 0x7FF;\r\n            const gi = (uintValue & 0x3FF800) >> 11;\r\n            const bi = (uintValue & 0xFFC00000) >> 22;\r\n            const rf = float11ToFloat32(ri);\r\n            const gf = float11ToFloat32(gi);\r\n            const bf = float10ToFloat32(bi);\r\n            return [rf, gf, bf, 1.0];*/\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTexturePixel(imageData: Uint8Array, x: number, y: number, z: number, mipLevel: number,\r\n        height: number, bytesPerRow: number, texelByteSize: number, format: string): number[] | null {\r\n    bytesPerRow = bytesPerRow >> mipLevel;\r\n    height = height >> mipLevel;\r\n\r\n    const offset = (z * bytesPerRow * height) + y * bytesPerRow + x * texelByteSize;\r\n\r\n    switch (format) {\r\n        case \"r8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r8snorm\": {\r\n            const value = pixelValue(imageData, offset, \"8snorm\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r8uint\": {\r\n            const value = pixelValue(imageData, offset, \"8uint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r8sint\": {\r\n            const value = pixelValue(imageData, offset, \"8sint\", 1);\r\n            return [value[0]];\r\n        }\r\n\r\n        case \"rg8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg8snorm\": {\r\n            const value = pixelValue(imageData, offset, \"8snorm\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg8uint\": {\r\n            const value = pixelValue(imageData, offset, \"8uint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg8sint\": {\r\n            const value = pixelValue(imageData, offset, \"8sint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n\r\n        case \"rgba8unorm-srgb\":\r\n        case \"rgba8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba8snorm\": {\r\n            const value = pixelValue(imageData, offset, \"8snorm\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba8uint\": {\r\n            const value = pixelValue(imageData, offset, \"8uint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba8sint\": {\r\n            const value = pixelValue(imageData, offset, \"8sint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n\r\n        case \"bgra8unorm-srgb\":\r\n        case \"bgra8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 4);\r\n            return [value[2], value[1], value[0], value[3]];\r\n        }\r\n\r\n        case \"r16uint\": {\r\n            const value = pixelValue(imageData, offset, \"16uint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r16sint\": {\r\n            const value = pixelValue(imageData, offset, \"16sint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r16float\": {\r\n            const value = pixelValue(imageData, offset, \"16float\", 1);\r\n            return [value[0]];\r\n        }\r\n\r\n        case \"rg16uint\": {\r\n            const value = pixelValue(imageData, offset, \"16uint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg16sint\": {\r\n            const value = pixelValue(imageData, offset, \"16sint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg16float\": {\r\n            const value = pixelValue(imageData, offset, \"16float\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n\r\n        case \"rgba16uint\": {\r\n            const value = pixelValue(imageData, offset, \"16uint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba16sint\": {\r\n            const value = pixelValue(imageData, offset, \"16sint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba16float\": {\r\n            const value = pixelValue(imageData, offset, \"16float\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n\r\n        case \"r32uint\": {\r\n            const value = pixelValue(imageData, offset, \"32uint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r32sint\": {\r\n            const value = pixelValue(imageData, offset, \"32sint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"depth16unorm\": // depth formats get conerted to r32float\r\n        case \"depth24plus\":\r\n        case \"depth24plus-stencil8\":\r\n        case \"depth32float\":\r\n        case \"depth32float-stencil8\":\r\n        case \"r32float\": {\r\n            const value = pixelValue(imageData, offset, \"32float\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"rg32uint\": {\r\n            const value = pixelValue(imageData, offset, \"32uint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg32sint\": {\r\n            const value = pixelValue(imageData, offset, \"32sint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg32float\": {\r\n            const value = pixelValue(imageData, offset, \"32float\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rgba32uint\": {\r\n            const value = pixelValue(imageData, offset, \"32uint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba32sint\": {\r\n            const value = pixelValue(imageData, offset, \"32sint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba32float\": {\r\n            const value = pixelValue(imageData, offset, \"32float\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n\r\n        case \"rg11b10ufloat\": {\r\n            const uintValue = new Uint32Array(imageData.buffer, offset, 1)[0];\r\n            const ri = uintValue & 0x7FF;\r\n            const gi = (uintValue & 0x3FF800) >> 11;\r\n            const bi = (uintValue & 0xFFC00000) >> 22;\r\n            const rf = float11ToFloat32(ri);\r\n            const gf = float11ToFloat32(gi);\r\n            const bf = float10ToFloat32(bi);\r\n            return [rf, gf, bf, 1.0];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction pixelValue(imageData: Uint8Array, offset: number, format: string, numChannels: number) {\r\n    const value = [0, 0, 0, 0];\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      switch (format) {\r\n        case \"8unorm\":\r\n          value[i] = imageData[offset] / 255;\r\n          offset++;\r\n          break;\r\n        case \"8snorm\":\r\n          value[i] = (imageData[offset] / 255) * 2 - 1;\r\n          offset++;\r\n          break;\r\n        case \"8uint\":\r\n          value[i] = imageData[offset];\r\n          offset++;\r\n          break;\r\n        case \"8sint\":\r\n          value[i] = imageData[offset] - 127;\r\n          offset++;\r\n          break;\r\n        case \"16uint\":\r\n          value[i] = imageData[offset] | (imageData[offset + 1] << 8);\r\n          offset += 2;\r\n          break;\r\n        case \"16sint\":\r\n          value[i] = (imageData[offset] | (imageData[offset + 1] << 8)) - 32768;\r\n          offset += 2;\r\n          break;\r\n        case \"16float\":\r\n          value[i] = float16ToFloat32(imageData[offset] | (imageData[offset + 1] << 8));\r\n          offset += 2;\r\n          break;\r\n        case \"32uint\":\r\n          value[i] = imageData[offset] | (imageData[offset + 1] << 8) | (imageData[offset + 2] << 16) | (imageData[offset + 3] << 24);\r\n          offset += 4;\r\n          break;\r\n        case \"32sint\":\r\n          value[i] = (imageData[offset] | (imageData[offset + 1] << 8) | (imageData[offset + 2] << 16) | (imageData[offset + 3] << 24)) | 0;\r\n          offset += 4;\r\n          break;\r\n        case \"32float\":\r\n          value[i] = new Float32Array(imageData.buffer, offset, 1)[0];\r\n          offset += 4;\r\n          break;\r\n      }\r\n    }\r\n    return value;\r\n}\r\n\r\nfunction setPixelValue(imageData: Uint8Array, offset: number, format: string, numChannels: number, value: number[]) {\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      switch (format) {\r\n        case \"8unorm\":\r\n          imageData[offset] = value[i] * 255;\r\n          offset++;\r\n          break;\r\n        case \"8snorm\":\r\n          imageData[offset] = ((value[i] + 1.0) * 0.5) * 255;\r\n          offset++;\r\n          break;\r\n        case \"8uint\":\r\n          imageData[offset] = value[i];\r\n          offset++;\r\n          break;\r\n        case \"8sint\":\r\n          imageData[offset] = value[i] + 127;\r\n          offset++;\r\n          break;\r\n        case \"16uint\":\r\n          new Uint16Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 2;\r\n          break;\r\n        case \"16sint\":\r\n          new Int16Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 2;\r\n          break;\r\n        case \"16float\": {\r\n          const f16 = float32ToFloat16(value[i]);\r\n          new Uint16Array(imageData.buffer, offset, 1)[0] = f16;\r\n          offset += 2;\r\n          break;\r\n        }\r\n        case \"32uint\":\r\n          new Uint32Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 4;\r\n          break;\r\n        case \"32sint\":\r\n          new Int32Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 4;\r\n          break;\r\n        case \"32float\":\r\n          new Float32Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 4;\r\n          break;\r\n      }\r\n    }\r\n    return value;\r\n}\r\n","\r\nexport const TextureFormatInfo = {\r\n    \"r8unorm\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r8snorm\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r8uint\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r8sint\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"rg8unorm\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg8snorm\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg8uint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg8sint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n\r\n    \"rgba8unorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8unorm-srgb\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8snorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8sint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"bgra8unorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"bgra8unorm-srgb\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    \"r16uint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r16sint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r16float\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n\r\n    \"rg16uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg16sint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg16float\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n\r\n    \"rgba16uint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba16sint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba16float\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    \"r32uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r32sint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r32float\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n\r\n    \"rg32uint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg32sint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg32float\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n\r\n    \"rgba32uint\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba32sint\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba32float\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgb10a2uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgb10a2unorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rg11b10ufloat\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    // Depth Stencil Formats\r\n    \"stencil8\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": false, \"hasStencil\": true, \"channels\": 1 }, // bytesPerBlock is actually 1-4\r\n    \"depth16unorm\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": false, \"channels\": 1 },\r\n    \"depth24plus\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": false, \"depthOnlyFormat\": \"depth32float\", \"channels\": 1 },\r\n    \"depth24plus-stencil8\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": true, \"depthOnlyFormat\": \"depth32float\", \"channels\": 1 }, // bytesPerBlock is actually 4-8\r\n    \"depth32float\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": false, \"channels\": 1 },\r\n    \"depth32float-stencil8\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": true, \"stencilOnlyFormat\": \"depth32float\", \"channels\": 1 }, // bytesPerBlock is actually 5-8\r\n\r\n    // Packed Formats\r\n    \"rgb9e5ufloat\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    // Compressed Formats\r\n    \"bc1-rgba-unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc1-rgba-unorm-srgb\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc2-rgba-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc2-rgba-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc3-rgba-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc3-rgba-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n\r\n    \"bc4-r-unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 1 },\r\n    \"bc4-r-snorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 1 },\r\n\r\n    \"bc5-rg-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 2 },\r\n    \"bc5-rg-snorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 2 },\r\n\r\n    \"bc6h-rgb-ufloat\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc6h-rgb-float\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc7-rgba-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc7-rgba-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \r\n    \"etc2-rgb8unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgb8unorm-srgb\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgb8a1unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgb8a1unorm-srgb\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgba8unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgba8unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \r\n    \"eac-r11unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 1 },\r\n    \"eac-r11snorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 1 },\r\n\r\n    \"eac-rg11unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 2 },\r\n    \"eac-rg11snorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 2 },\r\n\r\n    \"astc-4x4-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-4x4-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x4-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x4-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x6-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x6-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x6-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x6-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x8-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x8-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x6-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x6-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x8-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x8-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x10-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x10-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x10-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x10-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x12-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 12, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x12-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 12, \"isCompressed\": true, \"channels\": 4 },\r\n};\r\n","import { WgslExec } from \"./wgsl_exec.js\";\r\nimport { TypeInfo, PointerInfo, TemplateInfo, ArrayInfo, StructInfo } from \"./reflect/info.js\";\r\nimport { ExecContext } from \"./exec/exec_context.js\";\r\nimport { ExecInterface } from \"./exec/exec_interface.js\";\r\nimport { setTexturePixel, getTexturePixel } from \"./utils/texture_sample.js\";\r\nimport { TextureFormatInfo } from \"./utils/texture_format_info.js\";\r\n\r\n/**\r\n * @class Node\r\n * @category AST\r\n * Base class for AST nodes parsed from a WGSL shader.\r\n */\r\nexport class Node {\r\n  static _id = 0;\r\n\r\n  id: number;\r\n  line: number;\r\n  start: number;\r\n  length: number;\r\n\r\n  constructor() {\r\n    this.id = Node._id++;\r\n    this.line = 0;\r\n    this.start = -1;\r\n    this.length = 0;\r\n  }\r\n\r\n  get isAstNode(): boolean {\r\n    return true;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n  }\r\n\r\n  searchBlock(block: Node[] | null, callback: (node: Node) => void): void {\r\n    if (block) {\r\n      callback(_BlockStart.instance);\r\n      for (const node of block) {\r\n        if (node instanceof Array) {\r\n          this.searchBlock(node as Node[], callback);\r\n        } else {\r\n          node.search(callback);\r\n        }\r\n      }\r\n      callback(_BlockEnd.instance);\r\n    }\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    throw new Error(\"Cannot evaluate node\");\r\n  }\r\n\r\n  constEvaluateString(context: WgslExec): string {\r\n    return this.constEvaluate(context).toString();\r\n  } \r\n}\r\n\r\n// For internal use only\r\nexport class _BlockStart extends Node {\r\n  static instance = new _BlockStart();\r\n}\r\n\r\n // For internal use only\r\nexport class _BlockEnd extends Node {\r\n  static instance = new _BlockEnd();\r\n}\r\n\r\nconst BuiltinFunctionNames = new Set([\r\n  \"all\",\r\n  \"all\",\r\n  \"any\",\r\n  \"select\",\r\n  \"arrayLength\",\r\n  \"abs\",\r\n  \"acos\",\r\n  \"acosh\",\r\n  \"asin\",\r\n  \"asinh\",\r\n  \"atan\",\r\n  \"atanh\",\r\n  \"atan2\",\r\n  \"ceil\",\r\n  \"clamp\",\r\n  \"cos\",\r\n  \"cosh\",\r\n  \"countLeadingZeros\",\r\n  \"countOneBits\",\r\n  \"countTrailingZeros\",\r\n  \"cross\",\r\n  \"degrees\",\r\n  \"determinant\",\r\n  \"distance\",\r\n  \"dot\",\r\n  \"dot4U8Packed\",\r\n  \"dot4I8Packed\",\r\n  \"exp\",\r\n  \"exp2\",\r\n  \"extractBits\",\r\n  \"faceForward\",\r\n  \"firstLeadingBit\",\r\n  \"firstTrailingBit\",\r\n  \"floor\",\r\n  \"fma\",\r\n  \"fract\",\r\n  \"frexp\",\r\n  \"insertBits\",\r\n  \"inverseSqrt\",\r\n  \"ldexp\",\r\n  \"length\",\r\n  \"log\",\r\n  \"log2\",\r\n  \"max\",\r\n  \"min\",\r\n  \"mix\",\r\n  \"modf\",\r\n  \"normalize\",\r\n  \"pow\",\r\n  \"quantizeToF16\",\r\n  \"radians\",\r\n  \"reflect\",\r\n  \"refract\",\r\n  \"reverseBits\",\r\n  \"round\",\r\n  \"saturate\",\r\n  \"sign\",\r\n  \"sin\",\r\n  \"sinh\",\r\n  \"smoothStep\",\r\n  \"sqrt\",\r\n  \"step\",\r\n  \"tan\",\r\n  \"tanh\",\r\n  \"transpose\",\r\n  \"trunc\",\r\n  \"dpdx\",\r\n  \"dpdxCoarse\",\r\n  \"dpdxFine\",\r\n  \"dpdy\",\r\n  \"dpdyCoarse\",\r\n  \"dpdyFine\",\r\n  \"fwidth\",\r\n  \"fwidthCoarse\",\r\n  \"fwidthFine\",\r\n  \"textureDimensions\",\r\n  \"textureGather\",\r\n  \"textureGatherCompare\",\r\n  \"textureLoad\",\r\n  \"textureNumLayers\",\r\n  \"textureNumLevels\",\r\n  \"textureNumSamples\",\r\n  \"textureSample\",\r\n  \"textureSampleBias\",\r\n  \"textureSampleCompare\",\r\n  \"textureSampleCompareLevel\",\r\n  \"textureSampleGrad\",\r\n  \"textureSampleLevel\",\r\n  \"textureSampleBaseClampToEdge\",\r\n  \"textureStore\",\r\n  \"atomicLoad\",\r\n  \"atomicStore\",\r\n  \"atomicAdd\",\r\n  \"atomicSub\",\r\n  \"atomicMax\",\r\n  \"atomicMin\",\r\n  \"atomicAnd\",\r\n  \"atomicOr\",\r\n  \"atomicXor\",\r\n  \"atomicExchange\",\r\n  \"atomicCompareExchangeWeak\",\r\n  \"pack4x8snorm\",\r\n  \"pack4x8unorm\",\r\n  \"pack4xI8\",\r\n  \"pack4xU8\",\r\n  \"pack4x8Clamp\",\r\n  \"pack4xU8Clamp\",\r\n  \"pack2x16snorm\",\r\n  \"pack2x16unorm\",\r\n  \"pack2x16float\",\r\n  \"unpack4x8snorm\",\r\n  \"unpack4x8unorm\",\r\n  \"unpack4xI8\",\r\n  \"unpack4xU8\",\r\n  \"unpack2x16snorm\",\r\n  \"unpack2x16unorm\",\r\n  \"unpack2x16float\",\r\n  \"storageBarrier\",\r\n  \"textureBarrier\",\r\n  \"workgroupBarrier\",\r\n  \"workgroupUniformLoad\",\r\n  \"subgroupAdd\",\r\n  \"subgroupExclusiveAdd\",\r\n  \"subgroupInclusiveAdd\",\r\n  \"subgroupAll\",\r\n  \"subgroupAnd\",\r\n  \"subgroupAny\",\r\n  \"subgroupBallot\",\r\n  \"subgroupBroadcast\",\r\n  \"subgroupBroadcastFirst\",\r\n  \"subgroupElect\",\r\n  \"subgroupMax\",\r\n  \"subgroupMin\",\r\n  \"subgroupMul\",\r\n  \"subgroupExclusiveMul\",\r\n  \"subgroupInclusiveMul\",\r\n  \"subgroupOr\",\r\n  \"subgroupShuffle\",\r\n  \"subgroupShuffleDown\",\r\n  \"subgroupShuffleUp\",\r\n  \"subgroupShuffleXor\",\r\n  \"subgroupXor\",\r\n  \"quadBroadcast\",\r\n  \"quadSwapDiagonal\",\r\n  \"quadSwapX\",\r\n  \"quadSwapY\",\r\n]);\r\n\r\n/**\r\n * @class Statement\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Statement extends Node {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class Function\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Function extends Statement {\r\n  name: string;\r\n  args: Argument[];\r\n  returnType: Type | null;\r\n  body: Statement[];\r\n  attributes: Attribute[] | null;\r\n  startLine: number;\r\n  endLine: number;\r\n  calls: Set<Function> = new Set();\r\n\r\n  constructor(\r\n    name: string,\r\n    args: Argument[],\r\n    returnType: Type | null,\r\n    body: Statement[],\r\n    startLine: number,\r\n    endLine: number\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n    this.returnType = returnType;\r\n    this.body = body;\r\n    this.startLine = startLine;\r\n    this.endLine = endLine;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"function\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    if (this.attributes) {\r\n      for (const attr of this.attributes) {\r\n        callback(attr);\r\n      }\r\n    }\r\n    callback(this);\r\n    for (const arg of this.args) {\r\n      callback(arg);\r\n    }\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class StaticAssert\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class StaticAssert extends Statement {\r\n  expression: Expression;\r\n\r\n  constructor(expression: Expression) {\r\n    super();\r\n    this.expression = expression;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"staticAssert\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.expression.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class While\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class While extends Statement {\r\n  condition: Expression;\r\n  body: Statement[];\r\n\r\n  constructor(condition: Expression, body: Statement[]) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"while\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Continuing\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Continuing extends Statement {\r\n  body: Statement[];\r\n  loopId: number;\r\n\r\n  constructor(body: Statement[], loopId: number) {\r\n    super();\r\n    this.body = body;\r\n    this.loopId = loopId;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"continuing\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class For\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class For extends Statement {\r\n  init: Statement | null;\r\n  condition: Expression | null;\r\n  increment: Statement | null;\r\n  body: Statement[];\r\n\r\n  constructor(\r\n    init: Statement | null,\r\n    condition: Expression | null,\r\n    increment: Statement | null,\r\n    body: Statement[]\r\n  ) {\r\n    super();\r\n    this.init = init;\r\n    this.condition = condition;\r\n    this.increment = increment;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"for\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.init?.search(callback);\r\n    this.condition?.search(callback);\r\n    this.increment?.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Var\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Var extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression | null;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"var\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Override\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Override extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  value: Expression | null;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(name: string, type: Type | null, value: Expression | null) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"override\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Let\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Let extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression | null;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"let\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Const\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Const extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"const\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return this.value.constEvaluate(context, type);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\nexport enum IncrementOperator {\r\n  increment = \"++\",\r\n  decrement = \"--\",\r\n}\r\n\r\nexport namespace IncrementOperator {\r\n  export function parse(val: string): IncrementOperator {\r\n    const key = val as keyof typeof IncrementOperator;\r\n    if (key == \"parse\") throw new Error(\"Invalid value for IncrementOperator\");\r\n    return IncrementOperator[key];\r\n  }\r\n}\r\n\r\n/**\r\n * @class Increment\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Increment extends Statement {\r\n  operator: IncrementOperator;\r\n  variable: Expression;\r\n\r\n  constructor(operator: IncrementOperator, variable: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.variable = variable;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"increment\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.variable.search(callback);\r\n  }\r\n}\r\n\r\nexport enum AssignOperator {\r\n  assign = \"=\",\r\n  addAssign = \"+=\",\r\n  subtractAssin = \"-=\",\r\n  multiplyAssign = \"*=\",\r\n  divideAssign = \"/=\",\r\n  moduloAssign = \"%=\",\r\n  andAssign = \"&=\",\r\n  orAssign = \"|=\",\r\n  xorAssign = \"^=\",\r\n  shiftLeftAssign = \"<<=\",\r\n  shiftRightAssign = \">>=\",\r\n}\r\n\r\nexport namespace AssignOperator {\r\n  export function parse(val: string): AssignOperator {\r\n    const key = val as keyof typeof AssignOperator;\r\n    if (key == \"parse\") {\r\n      throw new Error(\"Invalid value for AssignOperator\");\r\n    }\r\n    //return AssignOperator[key];\r\n    return key as AssignOperator;\r\n  }\r\n}\r\n\r\n/**\r\n * @class Assign\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Assign extends Statement {\r\n  operator: AssignOperator;\r\n  variable: Expression;\r\n  value: Expression;\r\n\r\n  constructor(\r\n    operator: AssignOperator,\r\n    variable: Expression,\r\n    value: Expression\r\n  ) {\r\n    super();\r\n    this.operator = operator;\r\n    this.variable = variable;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"assign\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.variable.search(callback);\r\n    this.value.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Call\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Call extends Statement {\r\n  name: string;\r\n  args: Expression[];\r\n\r\n  constructor(name: string, args: Expression[]) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"call\";\r\n  }\r\n\r\n  isBuiltin(): boolean {\r\n    return BuiltinFunctionNames.has(this.name);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    for (const node of this.args) {\r\n      node.search(callback);\r\n    }\r\n    callback(this);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Loop\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Loop extends Statement {\r\n  body: Statement[];\r\n  continuing: Continuing | null;\r\n\r\n  constructor(body: Statement[], continuing: Continuing | null) {\r\n    super();\r\n    this.body = body;\r\n    this.continuing = continuing;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"loop\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n    this.continuing?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Switch\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Switch extends Statement {\r\n  condition: Expression;\r\n  cases: SwitchCase[];\r\n\r\n  constructor(condition: Expression, cases: SwitchCase[]) {\r\n    super();\r\n    this.condition = condition;\r\n    this.cases = cases;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"switch\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    for (const node of this.cases) {\r\n      node.search(callback);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @class If\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class If extends Statement {\r\n  condition: Expression;\r\n  body: Statement[];\r\n  elseif: ElseIf[] | null;\r\n  else: Statement[] | null;\r\n\r\n  constructor(\r\n    condition: Expression,\r\n    body: Statement[],\r\n    elseif: ElseIf[] | null,\r\n    _else: Statement[] | null\r\n  ) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.elseif = elseif;\r\n    this.else = _else;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"if\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n    this.searchBlock(this.elseif, callback);\r\n    this.searchBlock(this.else, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Return\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Return extends Statement {\r\n  value: Expression;\r\n\r\n  constructor(value: Expression) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"return\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Enable\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Enable extends Statement {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"enable\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Requires\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Requires extends Statement {\r\n  extensions: string[];\r\n\r\n  constructor(extensions: string[]) {\r\n    super();\r\n    this.extensions = extensions;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"requires\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Diagnostic\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Diagnostic extends Statement {\r\n  severity: string;\r\n  rule: string;\r\n\r\n  constructor(severity: string, rule: string) {\r\n    super();\r\n    this.severity = severity;\r\n    this.rule = rule;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"diagnostic\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Alias\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Alias extends Statement {\r\n  name: string;\r\n  type: Type;\r\n\r\n  constructor(name: string, type: Type) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"alias\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Discard\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Discard extends Statement {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"discard\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Break\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Break extends Statement {\r\n  condition: Expression | null = null;\r\n  loopId: number = -1;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"break\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Continue\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Continue extends Statement {\r\n  loopId: number = -1;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"continue\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Type\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Type extends Statement {\r\n  name: string;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"type\";\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return false;\r\n  }\r\n\r\n  static x32 = new Type(\"x32\");\r\n  static f32 = new Type(\"f32\");\r\n  static i32 = new Type(\"i32\");\r\n  static u32 = new Type(\"u32\");\r\n  static f16 = new Type(\"f16\");\r\n  static bool = new Type(\"bool\");\r\n  static void = new Type(\"void\");\r\n\r\n  static _priority = new Map<string, number>([[\"f32\", 0], [\"f16\", 1], [\"u32\", 2], [\"i32\", 3], [\"x32\", 3]]);\r\n\r\n  static maxFormatType(x: Type[]): Type {\r\n    let t = x[0];\r\n    if (t.name === \"f32\") {\r\n      return t;\r\n    }\r\n    for (let i = 1; i < x.length; ++i) {\r\n      const tv = Type._priority.get(t.name);\r\n      const xv = Type._priority.get(x[i].name);\r\n      if (xv < tv) {\r\n        t = x[i];\r\n      }\r\n    }\r\n\r\n    if (t.name === \"x32\") {\r\n      return Type.i32;\r\n    }\r\n\r\n    return t;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\n/**\r\n * @class ForwardType\r\n * @extends Type\r\n * @category AST\r\n * Internal type used as a placeholder for a type being used before it has been defined.\r\n */\r\nexport class ForwardType extends Type {\r\n  constructor(name: string) {\r\n    super(name);\r\n  }\r\n}\r\n\r\n/**\r\n * @class StructType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class Struct extends Type {\r\n  members: Member[];\r\n  startLine: number;\r\n  endLine: number;\r\n\r\n  constructor(name: string, members: Member[], startLine: number, endLine: number) {\r\n    super(name);\r\n    this.members = members;\r\n    this.startLine = startLine;\r\n    this.endLine = endLine;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"struct\";\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /// Return the index of the member with the given name, or -1 if not found.\r\n  getMemberIndex(name: string): number {\r\n    for (let i = 0; i < this.members.length; i++) {\r\n      if (this.members[i].name == name) return i;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    for (const member of this.members) {\r\n      callback(member);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @class TemplateType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class TemplateType extends Type {\r\n  format: Type | null;\r\n  access: string | null;\r\n\r\n  constructor(name: string, format: Type | null, access: string | null) {\r\n    super(name);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"template\";\r\n  }\r\n\r\n  getTypeName(): string {\r\n    let name = this.name;\r\n    if (this.format !== null) {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\" ||\r\n          name === \"mat2x2\" || name === \"mat2x3\" || name === \"mat2x4\" ||\r\n          name === \"mat3x2\" || name === \"mat3x3\" || name === \"mat3x4\" ||\r\n          name === \"mat4x2\" || name === \"mat4x3\" || name === \"mat4x4\") {\r\n        if (this.format.name === \"f32\") {\r\n          name += \"f\";\r\n          return name;\r\n        } else if (this.format.name === \"i32\") {\r\n          name += \"i\";\r\n          return name;\r\n        } else if (this.format.name === \"u32\") {\r\n          name += \"u\";\r\n          return name;\r\n        } else if (this.format.name === \"bool\") {\r\n          name += \"b\";\r\n          return name;\r\n        } else if (this.format.name === \"f16\") {\r\n          name += \"h\";\r\n          return name;\r\n        }\r\n      }\r\n      name += `<${this.format.name}>`;\r\n    } else {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\") {\r\n        return name;\r\n      }\r\n      //console.error(\"Template format is null.\");\r\n    }\r\n    return name;\r\n  }\r\n\r\n  static vec2f = new TemplateType(\"vec2\", Type.f32, null);\r\n  static vec3f = new TemplateType(\"vec3\", Type.f32, null);\r\n  static vec4f = new TemplateType(\"vec4\", Type.f32, null);\r\n  static vec2i = new TemplateType(\"vec2\", Type.i32, null);\r\n  static vec3i = new TemplateType(\"vec3\", Type.i32, null);\r\n  static vec4i = new TemplateType(\"vec4\", Type.i32, null);\r\n  static vec2u = new TemplateType(\"vec2\", Type.u32, null);\r\n  static vec3u = new TemplateType(\"vec3\", Type.u32, null);\r\n  static vec4u = new TemplateType(\"vec4\", Type.u32, null);\r\n  static vec2h = new TemplateType(\"vec2\", Type.f16, null);\r\n  static vec3h = new TemplateType(\"vec3\", Type.f16, null);\r\n  static vec4h = new TemplateType(\"vec4\", Type.f16, null);\r\n  static vec2b = new TemplateType(\"vec2\", Type.bool, null);\r\n  static vec3b = new TemplateType(\"vec3\", Type.bool, null);\r\n  static vec4b = new TemplateType(\"vec4\", Type.bool, null);\r\n\r\n  static mat2x2f = new TemplateType(\"mat2x2\", Type.f32, null);\r\n  static mat2x3f = new TemplateType(\"mat2x3\", Type.f32, null);\r\n  static mat2x4f = new TemplateType(\"mat2x4\", Type.f32, null);\r\n  static mat3x2f = new TemplateType(\"mat3x2\", Type.f32, null);\r\n  static mat3x3f = new TemplateType(\"mat3x3\", Type.f32, null);\r\n  static mat3x4f = new TemplateType(\"mat3x4\", Type.f32, null);\r\n  static mat4x2f = new TemplateType(\"mat4x2\", Type.f32, null);\r\n  static mat4x3f = new TemplateType(\"mat4x3\", Type.f32, null);\r\n  static mat4x4f = new TemplateType(\"mat4x4\", Type.f32, null);\r\n\r\n  static mat2x2h = new TemplateType(\"mat2x2\", Type.f16, null);\r\n  static mat2x3h = new TemplateType(\"mat2x3\", Type.f16, null);\r\n  static mat2x4h = new TemplateType(\"mat2x4\", Type.f16, null);\r\n  static mat3x2h = new TemplateType(\"mat3x2\", Type.f16, null);\r\n  static mat3x3h = new TemplateType(\"mat3x3\", Type.f16, null);\r\n  static mat3x4h = new TemplateType(\"mat3x4\", Type.f16, null);\r\n  static mat4x2h = new TemplateType(\"mat4x2\", Type.f16, null);\r\n  static mat4x3h = new TemplateType(\"mat4x3\", Type.f16, null);\r\n  static mat4x4h = new TemplateType(\"mat4x4\", Type.f16, null);\r\n\r\n  static mat2x2i = new TemplateType(\"mat2x2\", Type.i32, null);\r\n  static mat2x3i = new TemplateType(\"mat2x3\", Type.i32, null);\r\n  static mat2x4i = new TemplateType(\"mat2x4\", Type.i32, null);\r\n  static mat3x2i = new TemplateType(\"mat3x2\", Type.i32, null);\r\n  static mat3x3i = new TemplateType(\"mat3x3\", Type.i32, null);\r\n  static mat3x4i = new TemplateType(\"mat3x4\", Type.i32, null);\r\n  static mat4x2i = new TemplateType(\"mat4x2\", Type.i32, null);\r\n  static mat4x3i = new TemplateType(\"mat4x3\", Type.i32, null);\r\n  static mat4x4i = new TemplateType(\"mat4x4\", Type.i32, null);\r\n\r\n  static mat2x2u = new TemplateType(\"mat2x2\", Type.u32, null);\r\n  static mat2x3u = new TemplateType(\"mat2x3\", Type.u32, null);\r\n  static mat2x4u = new TemplateType(\"mat2x4\", Type.u32, null);\r\n  static mat3x2u = new TemplateType(\"mat3x2\", Type.u32, null);\r\n  static mat3x3u = new TemplateType(\"mat3x3\", Type.u32, null);\r\n  static mat3x4u = new TemplateType(\"mat3x4\", Type.u32, null);\r\n  static mat4x2u = new TemplateType(\"mat4x2\", Type.u32, null);\r\n  static mat4x3u = new TemplateType(\"mat4x3\", Type.u32, null);\r\n  static mat4x4u = new TemplateType(\"mat4x4\", Type.u32, null);\r\n}\r\n\r\n/**\r\n * @class PointerType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class PointerType extends Type {\r\n  storage: string;\r\n  type: Type | null;\r\n  access: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    storage: string,\r\n    type: Type | null,\r\n    access: string | null\r\n  ) {\r\n    super(name);\r\n    this.storage = storage;\r\n    this.type = type;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"pointer\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class ArrayType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class ArrayType extends Type {\r\n  attributes: Attribute[] | null;\r\n  format: Type | null;\r\n  count: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    attributes: Attribute[] | null,\r\n    format: Type | null,\r\n    count: number\r\n  ) {\r\n    super(name);\r\n    this.attributes = attributes;\r\n    this.format = format;\r\n    this.count = count;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"array\";\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @class SamplerType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class SamplerType extends Type {\r\n  format: Type | string | null;\r\n  access: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    format: Type | string | null,\r\n    access: string | null\r\n  ) {\r\n    super(name);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"sampler\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Expression\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Expression extends Node {\r\n  postfix: Expression | null = null;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class StringExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class StringExpr extends Expression {\r\n  value: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"stringExpr\";\r\n  }\r\n\r\n  toString(): string {\r\n    return this.value;\r\n  }\r\n\r\n  constEvaluateString(): string {\r\n    return this.value;\r\n  }\r\n}\r\n\r\n/**\r\n * @class CreateExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class CreateExpr extends Expression {\r\n  type: Type | null;\r\n  args: Expression[] | null;\r\n\r\n  constructor(type: Type | null, args: Expression[] | null) {\r\n    super();\r\n    this.type = type;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"createExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    if (this.args) {\r\n      for (const node of this.args) {\r\n        node.search(callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    if (type) {\r\n      type[0] = this.type;\r\n    }\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n}\r\n\r\n/**\r\n * @class CallExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class CallExpr extends Expression {\r\n  name: string;\r\n  args: Expression[] | null;\r\n  cachedReturnValue: any = null;\r\n\r\n  constructor(name: string, args: Expression[] | null) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"callExpr\";\r\n  }\r\n\r\n  setCachedReturnValue(value: any): void {\r\n    this.cachedReturnValue = value;\r\n  }\r\n\r\n  get isBuiltin(): boolean {\r\n    return BuiltinFunctionNames.has(this.name);\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    for (const node of this.args) {\r\n      node.search(callback);\r\n    }\r\n    callback(this);\r\n  }\r\n}\r\n\r\n/**\r\n * @class VariableExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class VariableExpr extends Expression {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"varExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    callback(this);\r\n    if (this.postfix) {\r\n      this.postfix.search(callback);\r\n    }\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n}\r\n\r\n/**\r\n * @class ConstExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class ConstExpr extends Expression {\r\n  name: string;\r\n  initializer: Expression;\r\n\r\n  constructor(name: string, initializer: Expression) {\r\n    super();\r\n    this.name = name;\r\n    this.initializer = initializer;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"constExpr\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    if (this.initializer) {\r\n      const data = context.evalExpression(this.initializer, context.context);\r\n      if (data !== null && this.postfix) {\r\n        return data.getSubData(context, this.postfix, context.context);\r\n      }\r\n      return data;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.initializer.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class LiteralExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class LiteralExpr extends Expression {\r\n  value: Data\r\n  type: Type;\r\n\r\n  constructor(value: Data, type: Type) {\r\n    super();\r\n    this.value = value;\r\n    this.type = type;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"literalExpr\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    if (type !== undefined) {\r\n      type[0] = this.type;\r\n    }\r\n    return this.value;\r\n  }\r\n\r\n  get isScalar(): boolean {\r\n    return this.value instanceof ScalarData;\r\n  }\r\n\r\n  get isVector(): boolean {\r\n    return this.value instanceof VectorData || this.value instanceof MatrixData;\r\n  }\r\n\r\n  get scalarValue(): number {\r\n    if (this.value instanceof ScalarData) {\r\n      return this.value.value;\r\n    }\r\n    console.error(\"Value is not scalar.\");\r\n    return 0.0;\r\n  }\r\n\r\n  get vectorValue(): Float32Array | Int32Array | Uint32Array {\r\n    if (this.value instanceof VectorData) {\r\n      return this.value.data;\r\n    }\r\n    if (this.value instanceof MatrixData) {\r\n      return this.value.data;\r\n    }\r\n    console.error(\"Value is not a vector or matrix.\");\r\n    return new Float32Array(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @class BitcastExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class BitcastExpr extends Expression {\r\n  type: Type | null;\r\n  value: Expression;\r\n\r\n  constructor(type: Type | null, value: Expression) {\r\n    super();\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"bitcastExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.value.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class TypecastExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class TypecastExpr extends Expression {\r\n  type: Type | null;\r\n  args: Expression[] | null;\r\n\r\n  constructor(type: Type | null, args: Expression[] | null) {\r\n    super();\r\n    this.type = type;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"typecastExpr\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.args, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class ArrayIndex\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class ArrayIndex extends Expression {\r\n  index: Expression;\r\n  constructor(index: Expression) {\r\n    super();\r\n    this.index = index;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.index.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Operator\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class Operator extends Expression {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class UnaryOperator\r\n * @extends Operator\r\n * @category AST\r\n * @property {string} operator +, -, !, ~\r\n */\r\nexport class UnaryOperator extends Operator {\r\n  operator: string;\r\n  right: Expression;\r\n\r\n  constructor(operator: string, right: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.right = right;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"unaryOp\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.right.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class BinaryOperator\r\n * @extends Operator\r\n * @category AST\r\n * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||\r\n */\r\nexport class BinaryOperator extends Operator {\r\n  operator: string;\r\n  left: Expression;\r\n  right: Expression;\r\n\r\n  constructor(operator: string, left: Expression, right: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.left = left;\r\n    this.right = right;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"binaryOp\";\r\n  }\r\n\r\n  _getPromotedType(t1: Type, t2: Type): Type {\r\n    if (t1.name === t2.name) {\r\n      return t1;\r\n    }\r\n    if (t1.name === \"f32\" || t2.name === \"f32\") {\r\n      return Type.f32;\r\n    }\r\n    if (t1.name === \"u32\" || t2.name === \"u32\") {\r\n      return Type.u32;\r\n    }\r\n    return Type.i32;\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.left.search(callback);\r\n    this.right.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class SwitchCase\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class SwitchCase extends Node {\r\n  body: Statement[];\r\n\r\n  constructor(body: Statement[]) {\r\n    super();\r\n    this.body = body;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\nexport class DefaultSelector extends Expression {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"default\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Case\r\n * @extends SwitchCase\r\n * @category AST\r\n */\r\nexport class Case extends SwitchCase {\r\n  selectors: Expression[];\r\n\r\n  constructor(selectors: Expression[], body: Statement[]) {\r\n    super(body);\r\n    this.selectors = selectors;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"case\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Default\r\n * @extends SwitchCase\r\n * @category AST\r\n */\r\nexport class Default extends SwitchCase {\r\n  constructor(body: Statement[]) {\r\n    super(body);\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"default\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Argument\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Argument extends Node {\r\n  name: string;\r\n  type: Type;\r\n  attributes: Attribute[] | null;\r\n\r\n  constructor(name: string, type: Type, attributes: Attribute[] | null) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"argument\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class ElseIf\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class ElseIf extends Node {\r\n  condition: Expression;\r\n  body: Statement[];\r\n\r\n  constructor(condition: Expression, body: Statement[]) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"elseif\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Member\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Member extends Node {\r\n  name: string;\r\n  type: Type | null;\r\n  attributes: Attribute[] | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    attributes: Attribute[] | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"member\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Attribute\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Attribute extends Node {\r\n  name: string;\r\n  value: string | string[] | null;\r\n\r\n  constructor(name: string, value: string | string[] | null) {\r\n    super();\r\n    this.name = name;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"attribute\";\r\n  }\r\n}\r\n\r\n\r\n\r\nexport class Data {\r\n  static _id = 0;\r\n\r\n  typeInfo: TypeInfo;\r\n  parent: Data | null = null;\r\n  id: number;\r\n\r\n  constructor(typeInfo: TypeInfo, parent: Data | null) {\r\n      this.typeInfo = typeInfo;\r\n      this.parent = parent;\r\n      this.id = Data._id++;\r\n  }\r\n\r\n  clone(): Data {\r\n    throw `Clone: Not implemented for ${this.constructor.name}`;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n      console.error(`SetDataValue: Not implemented for ${this.constructor.name}`);\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n      console.error(`GetDataValue: Not implemented for ${this.constructor.name}`);\r\n      return null;\r\n  }\r\n\r\n  toString(): string {\r\n      return `<${this.typeInfo.getTypeName()}>`;\r\n  }\r\n}\r\n\r\nexport class VoidData extends Data {\r\n  constructor() {\r\n      super(new TypeInfo(\"void\", null), null);\r\n  }\r\n\r\n  static void = new VoidData();\r\n\r\n  toString(): string {\r\n      return \"void\";\r\n  }\r\n}\r\n\r\nexport class PointerData extends Data {\r\n  reference: Data;\r\n\r\n  constructor(reference: Data) {\r\n    super(new PointerInfo(\"pointer\", reference.typeInfo, null), null);\r\n    this.reference = reference;\r\n  }\r\n\r\n  clone(): Data {\r\n    return this;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    this.reference.setDataValue(exec, value, postfix, context);\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix) {\r\n      return this.reference.getSubData(exec, postfix, context);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    return `&${this.reference.toString()}`;\r\n  }\r\n}\r\n\r\nexport class ScalarData extends Data {\r\n  data: Int32Array | Uint32Array | Float32Array;\r\n\r\n  constructor(value: number | Int32Array | Uint32Array | Float32Array, typeInfo: TypeInfo, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    if (value instanceof Int32Array || value instanceof Uint32Array || value instanceof Float32Array) {\r\n        this.data = value;\r\n    } else {\r\n      if (this.typeInfo.name === \"x32\") {\r\n        if (value - Math.floor(value) !== 0) {\r\n          this.data = new Float32Array([value]);\r\n        } else if (value >= 0) {\r\n            this.data = new Uint32Array([value]);\r\n        } else {\r\n            this.data = new Int32Array([value]);\r\n        } \r\n      } else if (this.typeInfo.name === \"i32\" || this.typeInfo.name === \"bool\") {\r\n          this.data = new Int32Array([value]);\r\n      } else if (this.typeInfo.name === \"u32\") {\r\n          this.data = new Uint32Array([value]);\r\n      } else if (this.typeInfo.name === \"f32\" || this.typeInfo.name === \"f16\") {\r\n          this.data = new Float32Array([value]);\r\n      } else {\r\n          console.error(`ScalarData2: Invalid type`, typeInfo);\r\n      }\r\n    }\r\n  }\r\n\r\n  clone(): Data {\r\n    if (this.data instanceof Float32Array) {\r\n        return new ScalarData(new Float32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Int32Array) {\r\n        return new ScalarData(new Int32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Uint32Array) {\r\n        return new ScalarData(new Uint32Array(this.data), this.typeInfo, null);\r\n    }\r\n    throw `ScalarData: Invalid data type`;\r\n  }\r\n\r\n  get value(): number {\r\n    return this.data[0];\r\n  }\r\n\r\n  set value(v: number) {\r\n    this.data[0] = v;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (postfix) {\r\n      console.error(`SetDataValue: Scalar data does not support postfix`, postfix);\r\n      return;\r\n    }\r\n\r\n    if (!(value instanceof ScalarData)) {\r\n      console.error(`SetDataValue: Invalid value`, value);\r\n      return;\r\n    }\r\n\r\n    let v = value.data[0];\r\n\r\n    if (this.typeInfo.name === \"i32\" || this.typeInfo.name === \"u32\") {\r\n      v = Math.floor(v);\r\n    } else if (this.typeInfo.name === \"bool\") {\r\n      v = v ? 1 : 0;\r\n    }\r\n\r\n    this.data[0] = v;\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix) {\r\n      console.error(`getSubData: Scalar data does not support postfix`, postfix);\r\n      return null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toString(): string {\r\n    return `${this.value}`;\r\n  }\r\n}\r\n\r\nfunction _getVectorData(exec: ExecInterface, values: number[], formatName: string): VectorData | null {\r\n  const size = values.length;\r\n  if (size === 2) {\r\n      if (formatName === \"f32\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec2f\")!);\r\n      } else if (formatName === \"i32\" || formatName === \"bool\") {\r\n          return new VectorData(new Int32Array(values), exec.getTypeInfo(\"vec2i\")!);\r\n      } else if (formatName === \"u32\") {\r\n          return new VectorData(new Uint32Array(values), exec.getTypeInfo(\"vec2u\")!);\r\n      } else if (formatName === \"f16\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec2h\")!);\r\n      } else {\r\n          console.error(`getSubData: Unknown format ${formatName}`);\r\n      }\r\n      return null;\r\n  }\r\n\r\n  if (size === 3) {\r\n      if (formatName === \"f32\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec3f\")!);\r\n      } else if (formatName === \"i32\" || formatName === \"bool\") {\r\n          return new VectorData(new Int32Array(values), exec.getTypeInfo(\"vec3i\")!);\r\n      } else if (formatName === \"u32\") {\r\n          return new VectorData(new Uint32Array(values), exec.getTypeInfo(\"vec3u\")!);\r\n      } else if (formatName === \"f16\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec3h\")!);\r\n      } else {\r\n          console.error(`getSubData: Unknown format ${formatName}`);\r\n      }\r\n      return null;\r\n  }\r\n\r\n  if (size === 4) {\r\n      if (formatName === \"f32\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec4f\")!);\r\n      } else if (formatName === \"i32\" || formatName === \"bool\") {\r\n          return new VectorData(new Int32Array(values), exec.getTypeInfo(\"vec4i\")!);\r\n      } else if (formatName === \"u32\") {\r\n          return new VectorData(new Uint32Array(values), exec.getTypeInfo(\"vec4u\")!);\r\n      } else if (formatName === \"f16\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec4h\")!);\r\n      }\r\n      console.error(`getSubData: Unknown format ${formatName}`);\r\n      return null;\r\n  }\r\n\r\n  console.error(`getSubData: Invalid vector size ${values.length}`);\r\n  return null;\r\n}\r\n\r\nexport class VectorData extends Data {\r\n  data: Int32Array | Uint32Array | Float32Array;\r\n\r\n  constructor(value: number[] | Float32Array | Uint32Array | Int32Array, typeInfo: TypeInfo, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    if (value instanceof Float32Array || value instanceof Uint32Array || value instanceof Int32Array) {\r\n      this.data = value;\r\n    } else {\r\n      const typename = this.typeInfo.name;\r\n      if (typename === \"vec2f\" || typename === \"vec3f\" || typename === \"vec4f\") {\r\n        this.data = new Float32Array(value);\r\n      } else if (typename === \"vec2i\" || typename === \"vec3i\" || typename === \"vec4i\") {\r\n        this.data = new Int32Array(value);\r\n      } else if (typename === \"vec2u\" || typename === \"vec3u\" || typename === \"vec4u\") {\r\n        this.data = new Uint32Array(value);\r\n      } else if (typename === \"vec2h\" || typename === \"vec3h\" || typename === \"vec4h\") {\r\n        this.data = new Float32Array(value);\r\n      } else if (typename === \"vec2b\" || typename === \"vec3b\" || typename === \"vec4b\") {\r\n        this.data = new Int32Array(value);\r\n      } else if (typename === \"vec2\" || typename === \"vec3\" || typename === \"vec4\") {\r\n        this.data = new Float32Array(value);\r\n      } else {\r\n        console.error(`VectorData: Invalid type ${typename}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  clone(): Data {\r\n    if (this.data instanceof Float32Array) {\r\n      return new VectorData(new Float32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Int32Array) {\r\n      return new VectorData(new Int32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Uint32Array) {\r\n      return new VectorData(new Uint32Array(this.data), this.typeInfo, null);\r\n    }\r\n    throw `VectorData: Invalid data type`;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (postfix instanceof StringExpr) {\r\n      console.error(\"TODO: Set vector postfix\");\r\n      return;\r\n    }\r\n\r\n    if (!(value instanceof VectorData)) {\r\n      console.error(`SetDataValue: Invalid value`, value);\r\n      return\r\n    }\r\n\r\n    this.data = value.data;\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix === null) {\r\n      return this;\r\n    }\r\n\r\n    let format = exec.getTypeInfo(\"f32\");\r\n    if (this.typeInfo instanceof TemplateInfo) {\r\n        format = this.typeInfo.format || format;\r\n    } else {\r\n        const typeName = this.typeInfo.name;\r\n        if (typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\") {\r\n          format = exec.getTypeInfo(\"f32\");\r\n        } else if (typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\") {\r\n          format = exec.getTypeInfo(\"i32\");\r\n        } else if (typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\") {\r\n          format = exec.getTypeInfo(\"bool\");\r\n        } else if (typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\") {\r\n          format = exec.getTypeInfo(\"u32\");\r\n        } else if ( typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\") {\r\n          format = exec.getTypeInfo(\"f16\");\r\n        } else {\r\n          console.error(`GetSubData: Unknown type ${typeName}`);\r\n        }\r\n    }\r\n\r\n    let self: VectorData | null = this;\r\n    while (postfix !== null && self !== null) {\r\n      if (postfix instanceof ArrayIndex) {\r\n        const idx = postfix.index;\r\n        let i = -1;\r\n        if (idx instanceof LiteralExpr) {\r\n          if (idx.value instanceof ScalarData) {\r\n            i = idx.value.value;\r\n          } else {\r\n            console.error(`GetSubData: Invalid array index ${idx.value}`);\r\n            return null;\r\n          }\r\n        } else {\r\n          const d = exec.evalExpression(idx, context);\r\n          if (d instanceof ScalarData) {\r\n            i = d.value;\r\n          } else {\r\n            console.error(`GetSubData: Unknown index type`, idx);\r\n            return null;\r\n          }\r\n        }\r\n        if (i < 0 || i >= self.data.length) {\r\n          console.error(`GetSubData: Index out of range`, i);\r\n          return null;\r\n        }\r\n\r\n        if (self.data instanceof Float32Array) {\r\n          const d = new Float32Array(self.data.buffer, self.data.byteOffset + i * 4, 1);\r\n          return new ScalarData(d, format!);\r\n        } else if (self.data instanceof Int32Array) {\r\n          const d = new Int32Array(self.data.buffer, self.data.byteOffset + i * 4, 1);\r\n          return new ScalarData(d, format!);\r\n        } else if (self.data instanceof Uint32Array) {\r\n          const d = new Uint32Array(self.data.buffer, self.data.byteOffset + i * 4, 1);\r\n          return new ScalarData(d, format!);\r\n        }\r\n\r\n        throw `GetSubData: Invalid data type`;\r\n      } else if (postfix instanceof StringExpr) {\r\n        const member = postfix.value.toLowerCase();\r\n        if (member.length === 1) {\r\n          let i = 0;\r\n          if (member === \"x\" || member === \"r\") {\r\n            i = 0;\r\n          } else if (member === \"y\" || member === \"g\") {\r\n            i = 1;\r\n          } else if (member === \"z\" || member === \"b\") {\r\n            i = 2;\r\n          } else if (member === \"w\" || member === \"a\") {\r\n            i = 3;\r\n          } else {\r\n            console.error(`GetSubData: Unknown member ${member}`);\r\n            return null;\r\n          }\r\n\r\n          if (this.data instanceof Float32Array) {\r\n            let d = new Float32Array(this.data.buffer, this.data.byteOffset + i * 4, 1);\r\n            return new ScalarData(d, format!, this);\r\n          } else if (this.data instanceof Int32Array) {\r\n            let d = new Int32Array(this.data.buffer, this.data.byteOffset + i * 4, 1);\r\n            return new ScalarData(d, format!, this);\r\n          } else if (this.data instanceof Uint32Array) {\r\n            let d = new Uint32Array(this.data.buffer, this.data.byteOffset + i * 4, 1);\r\n            return new ScalarData(d, format!, this);\r\n          }\r\n        }\r\n\r\n        const values: number[] = [];\r\n        for (const m of member) {\r\n          if (m === \"x\" || m === \"r\") {\r\n            values.push(this.data[0]);\r\n          } else if (m === \"y\" || m === \"g\") {\r\n            values.push(this.data[1]);\r\n          } else if (m === \"z\" || m === \"b\") {\r\n            values.push(this.data[2]);\r\n          } else if (m === \"w\" || m === \"a\") {\r\n            values.push(this.data[3]);\r\n          } else {\r\n            console.error(`GetDataValue: Unknown member ${m}`);\r\n          }\r\n        }\r\n\r\n        self = _getVectorData(exec, values, format.name);\r\n      } else {\r\n        console.error(`GetSubData: Unknown postfix`, postfix);\r\n        return null;\r\n      }\r\n\r\n      postfix = postfix.postfix;\r\n    }\r\n\r\n    return self;\r\n  }\r\n\r\n  toString(): string {\r\n    let s = `${this.data[0]}`;\r\n    for (let i = 1; i < this.data.length; ++i) {\r\n      s += `, ${this.data[i]}`;\r\n    }\r\n    return s;\r\n  }\r\n}\r\n\r\nexport class MatrixData extends Data {\r\n  data: Float32Array;\r\n\r\n  constructor(value: number[] | Float32Array, typeInfo: TypeInfo, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    if (value instanceof Float32Array) {\r\n      this.data = value;\r\n    } else {\r\n      this.data = new Float32Array(value);\r\n    }\r\n  }\r\n\r\n  clone(): Data {\r\n    return new MatrixData(new Float32Array(this.data), this.typeInfo, null);\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (postfix instanceof StringExpr) {\r\n      console.error(\"TODO: Set matrix postfix\");\r\n      return;\r\n    }\r\n\r\n    if (!(value instanceof MatrixData)) {\r\n      console.error(`SetDataValue: Invalid value`, value);\r\n      return\r\n    }\r\n\r\n    this.data = value.data;\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix === null) {\r\n      return this;\r\n    }\r\n\r\n    const typeName = this.typeInfo.name;\r\n    let format = exec.getTypeInfo(\"f32\");\r\n    if (this.typeInfo instanceof TemplateInfo) {\r\n      format = this.typeInfo.format;\r\n    } else {\r\n      if (typeName.endsWith(\"f\")) {\r\n        format = exec.getTypeInfo(\"f32\");\r\n      } else if (typeName.endsWith(\"i\")) {\r\n        format = exec.getTypeInfo(\"i32\");\r\n      } else if (typeName.endsWith(\"u\")) {\r\n        format = exec.getTypeInfo(\"u32\");\r\n      } else if ( typeName.endsWith(\"h\")) {\r\n        format = exec.getTypeInfo(\"f16\");\r\n      } else {\r\n        console.error(`GetDataValue: Unknown type ${typeName}`);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (postfix instanceof ArrayIndex) {\r\n      const idx = postfix.index;\r\n      let i = -1;\r\n      if (idx instanceof LiteralExpr) {\r\n        if (idx.value instanceof ScalarData) {\r\n          i = idx.value.value;\r\n        } else {\r\n          console.error(`GetDataValue: Invalid array index ${idx.value}`);\r\n          return null;\r\n        }\r\n      } else {\r\n        const d = exec.evalExpression(idx, context);\r\n        if (d instanceof ScalarData) {\r\n          i = d.value;\r\n        } else {\r\n          console.error(`GetDataValue: Unknown index type`, idx);\r\n          return null;\r\n        }\r\n      }\r\n      if (i < 0 || i >= this.data.length) {\r\n        console.error(`GetDataValue: Index out of range`, i);\r\n        return null;\r\n      }\r\n\r\n      const formatSuffix = typeName.endsWith(\"h\") ? \"h\" : \"f\";\r\n\r\n      let vectorData: VectorData;\r\n      if (typeName === \"mat2x2\" || typeName === \"mat2x2f\" || typeName === \"mat2x2h\" ||\r\n          typeName === \"mat3x2\" || typeName === \"mat3x2f\" || typeName === \"mat3x2h\" ||\r\n          typeName === \"mat4x2\" || typeName === \"mat4x2f\" || typeName === \"mat4x2h\") {\r\n        vectorData = new VectorData(new Float32Array(this.data.buffer, this.data.byteOffset + i * 2 * 4, 2), exec.getTypeInfo(`vec2${formatSuffix}`)!);\r\n      } else if (typeName === \"mat2x3\" || typeName === \"mat2x3f\" || typeName === \"mat2x3h\" ||\r\n                typeName === \"mat3x3\" || typeName === \"mat3x3f\" || typeName === \"mat3x3h\" ||\r\n                typeName === \"mat4x3\" || typeName === \"mat4x3f\" || typeName === \"mat4x3h\") {\r\n        vectorData = new VectorData(new Float32Array(this.data.buffer, this.data.byteOffset + i * 3 * 4, 3), exec.getTypeInfo(`vec3${formatSuffix}`)!);\r\n      } else if (typeName === \"mat2x4\" || typeName === \"mat2x4f\" || typeName === \"mat2x4h\" ||\r\n                typeName === \"mat3x4\" || typeName === \"mat3x4f\" || typeName === \"mat3x4h\" ||\r\n                typeName === \"mat4x4\" || typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n        vectorData = new VectorData(new Float32Array(this.data.buffer, this.data.byteOffset + i * 4 * 4, 4), exec.getTypeInfo(`vec4${formatSuffix}`)!);\r\n      } else {\r\n        console.error(`GetDataValue: Unknown type ${typeName}`);\r\n        return null;\r\n      }\r\n\r\n      if (postfix.postfix) {\r\n        return vectorData.getSubData(exec, postfix.postfix, context);\r\n      }\r\n\r\n      return vectorData;\r\n    } else {\r\n      console.error(`GetDataValue: Invalid postfix`, postfix);\r\n      return null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toString(): string {\r\n    let s = `${this.data[0]}`;\r\n    for (let i = 1; i < this.data.length; ++i) {\r\n      s += `, ${this.data[i]}`;\r\n    }\r\n    return s;\r\n  }\r\n}\r\n\r\n// Used to store array and struct data\r\nexport class TypedData extends Data {\r\n  buffer: ArrayBuffer;\r\n  offset: number;\r\n\r\n  constructor(data: ArrayBuffer | Float32Array | Uint32Array | Int32Array | Uint8Array | Int8Array,\r\n      typeInfo: TypeInfo, offset: number = 0, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    this.buffer = data instanceof ArrayBuffer ? data : data.buffer;\r\n    this.offset = offset;\r\n  }\r\n\r\n  clone(): Data {\r\n    const cloned = new Uint8Array(new Uint8Array(this.buffer, this.offset, this.typeInfo.size));\r\n    return new TypedData(cloned.buffer, this.typeInfo, 0, null);\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (value === null) {\r\n      console.log(`setDataValue: NULL data.`);\r\n      return;\r\n    }\r\n\r\n    let offset = this.offset;\r\n    let typeInfo = this.typeInfo;\r\n    while (postfix) {\r\n      if (postfix instanceof ArrayIndex) {\r\n        if (typeInfo instanceof ArrayInfo) {\r\n          const idx = postfix.index;\r\n          if (idx instanceof LiteralExpr) {\r\n            if (idx.value instanceof ScalarData) {\r\n              offset += idx.value.value * typeInfo.stride;\r\n            } else {\r\n              console.error(`SetDataValue: Invalid index type ${idx.value}`);\r\n              return;\r\n            }\r\n          } else {\r\n            const i = exec.evalExpression(idx, context);\r\n            if (i instanceof ScalarData) {\r\n              offset += i.value * typeInfo.stride;\r\n            } else {\r\n              console.error(`SetDataValue: Unknown index type`, idx);\r\n              return;\r\n            }\r\n          }\r\n          typeInfo = typeInfo.format;\r\n        } else {\r\n          console.error(`SetDataValue: Type ${typeInfo.getTypeName()} is not an array`);\r\n        }\r\n      } else if (postfix instanceof StringExpr) {\r\n        const member = postfix.value;\r\n        if (typeInfo instanceof StructInfo) {\r\n          let found = false;\r\n          for (const m of typeInfo.members) {\r\n            if (m.name === member) {\r\n              offset += m.offset;\r\n              typeInfo = m.type;\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!found) {\r\n            console.error(`SetDataValue: Member ${member} not found`);\r\n            return;\r\n          }\r\n        } else if (typeInfo instanceof TypeInfo) {\r\n          const typeName = typeInfo.getTypeName();\r\n          let element = 0;\r\n          if (member === \"x\" || member === \"r\") {\r\n            element = 0;\r\n          } else if (member === \"y\" || member === \"g\") {\r\n            element = 1;\r\n          } else if (member === \"z\" || member === \"b\") {\r\n            element = 2;\r\n          } else if (member === \"w\" || member === \"a\") {\r\n            element = 3;\r\n          } else {\r\n            console.error(`SetDataValue: Unknown member ${member}`);\r\n            return;\r\n          }\r\n          if (!(value instanceof ScalarData)) {\r\n            console.error(`SetDataValue: Invalid value`, value);\r\n            return;\r\n          }\r\n          const v = value.value;\r\n          if (typeName === \"vec2f\") {\r\n            new Float32Array(this.buffer, offset, 2)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec3f\") {\r\n            new Float32Array(this.buffer, offset, 3)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec4f\") {\r\n            new Float32Array(this.buffer, offset, 4)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec2i\") {\r\n            new Int32Array(this.buffer, offset, 2)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec3i\") {\r\n            new Int32Array(this.buffer, offset, 3)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec4i\") {\r\n            new Int32Array(this.buffer, offset, 4)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec2u\") {\r\n            new Uint32Array(this.buffer, offset, 2)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec3u\") {\r\n            new Uint32Array(this.buffer, offset, 3)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec4u\") {\r\n            new Uint32Array(this.buffer, offset, 4)[element] = v;\r\n            return;\r\n          }\r\n          console.error(`SetDataValue: Type ${typeName} is not a struct`);\r\n          return;\r\n        }\r\n      } else {\r\n        console.error(`SetDataValue: Unknown postfix type`, postfix);\r\n        return;\r\n      }\r\n      postfix = postfix.postfix;\r\n    }\r\n\r\n    this.setData(exec, value, typeInfo, offset, context);\r\n  }\r\n\r\n  setData(exec: ExecInterface, value: Data, typeInfo: TypeInfo, offset: number, context: ExecContext): void {\r\n    const typeName = typeInfo.getTypeName();\r\n\r\n    if (typeName === \"f32\" || typeName === \"f16\") {\r\n      if (value instanceof ScalarData) {\r\n        new Float32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"i32\" || typeName === \"atomic<i32>\" || typeName === \"x32\") {\r\n      if (value instanceof ScalarData) {\r\n        new Int32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"u32\" || typeName === \"atomic<u32>\") {\r\n      if (value instanceof ScalarData) {\r\n        new Uint32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"bool\") {\r\n      if (value instanceof ScalarData) {\r\n        new Int32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2f\" || typeName === \"vec2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3f\" || typeName === \"vec3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4f\" || typeName === \"vec4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2i\") {\r\n      const x = new Int32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3i\") {\r\n      const x = new Int32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4i\") {\r\n      const x = new Int32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2u\") {\r\n      const x = new Uint32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3u\") {\r\n      const x = new Uint32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4u\") {\r\n      const x = new Uint32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2b\") {\r\n      const x = new Uint32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3b\") {\r\n      const x = new Uint32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4b\") {\r\n      const x = new Uint32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat2x2f\" || typeName === \"mat2x2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 4);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat2x3f\" || typeName === \"mat2x3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 6);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat2x4f\" || typeName === \"mat2x4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 8);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat3x2f\" || typeName === \"mat3x2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 6);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat3x3f\" || typeName === \"mat3x3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 9);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat3x4f\" || typeName === \"mat3x4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 12);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n        x[9] = value.data[9];\r\n        x[10] = value.data[10];\r\n        x[11] = value.data[11];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n        x[9] = value[9];\r\n        x[10] = value[10];\r\n        x[11] = value[11];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat4x2f\" || typeName === \"mat4x2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 8);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat4x3f\" || typeName === \"mat4x3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 12);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n        x[9] = value.data[9];\r\n        x[10] = value.data[10];\r\n        x[11] = value.data[11];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n        x[9] = value[9];\r\n        x[10] = value[10];\r\n        x[11] = value[11];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 16);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n        x[9] = value.data[9];\r\n        x[10] = value.data[10];\r\n        x[11] = value.data[11];\r\n        x[12] = value.data[12];\r\n        x[13] = value.data[13];\r\n        x[14] = value.data[14];\r\n        x[15] = value.data[15];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n        x[9] = value[9];\r\n        x[10] = value[10];\r\n        x[11] = value[11];\r\n        x[12] = value[12];\r\n        x[13] = value[13];\r\n        x[14] = value[14];\r\n        x[15] = value[15];\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (value instanceof TypedData) {\r\n      if (typeInfo === value.typeInfo) {\r\n        const x = new Uint8Array(this.buffer, offset, value.buffer.byteLength);\r\n        x.set(new Uint8Array(value.buffer));\r\n        return;\r\n      } else {\r\n        console.error(`SetDataValue: Type mismatch`, typeName, value.typeInfo.getTypeName());\r\n        return;\r\n      }\r\n    }\r\n\r\n    console.error(`SetData: Unknown type ${typeName}`);\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix === null) {\r\n      return this;\r\n    }\r\n\r\n    let offset = this.offset;\r\n    let typeInfo = this.typeInfo;\r\n    while (postfix) {\r\n      if (postfix instanceof ArrayIndex) {\r\n        const idx = postfix.index;\r\n        const _i = idx instanceof Expression ? exec.evalExpression(idx, context) : idx;\r\n        let i = 0;\r\n        if (_i instanceof ScalarData) {\r\n          i = _i.value;\r\n        } else if (typeof _i === \"number\") {\r\n          i = _i;\r\n        } else {\r\n          console.error(`GetDataValue: Invalid index type`, idx);\r\n        }\r\n        if (typeInfo instanceof ArrayInfo) {\r\n          offset += i * typeInfo.stride;\r\n          typeInfo = typeInfo.format;\r\n        } else {\r\n          const typeName = typeInfo.getTypeName();\r\n          if (typeName === \"mat4x4\" || typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n            offset += i * 16;\r\n            typeInfo = exec.getTypeInfo(\"vec4f\")!;\r\n          } else {\r\n            console.error(`getDataValue: Type ${typeInfo.getTypeName()} is not an array`);\r\n          }\r\n        }\r\n      } else if (postfix instanceof StringExpr) {\r\n        const member = postfix.value;\r\n        if (typeInfo instanceof StructInfo) {\r\n          let found = false;\r\n          for (const m of typeInfo.members) {\r\n            if (m.name === member) {\r\n              offset += m.offset;\r\n              typeInfo = m.type;\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!found) {\r\n            console.error(`GetDataValue: Member ${member} not found`);\r\n            return null;\r\n          }\r\n        } else if (typeInfo instanceof TypeInfo) {\r\n          const typeName = typeInfo.getTypeName();\r\n          if (typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n              typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n              typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\" ||\r\n              typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\" ||\r\n              typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n              typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\") {\r\n\r\n            if (member.length > 0 && member.length < 5) {\r\n              let formatName = \"f32\";\r\n              let formatSuffix = \"f\";\r\n              const value: number[] = [];\r\n              for (let i = 0; i < member.length; ++i) {\r\n                const m = member[i].toLowerCase();\r\n                let element = 0;\r\n                if (m === \"x\" || m === \"r\") {\r\n                  element = 0;\r\n                } else if (m === \"y\" || m === \"g\") {\r\n                  element = 1;\r\n                } else if (m === \"z\" || m === \"b\") {\r\n                  element = 2;\r\n                } else if (m === \"w\" || m === \"a\") {\r\n                  element = 3;\r\n                } else {\r\n                  console.error(`Unknown member ${member}`);\r\n                  return null;\r\n                }\r\n\r\n                if (member.length === 1) {\r\n                  if (typeName.endsWith(\"f\")) {\r\n                    if (this.buffer.byteLength < (offset + element * 4 + 4)) {\r\n                      console.log(\"Insufficient buffer data\");\r\n                      return null;\r\n                    }\r\n                    return new ScalarData(new Float32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"f32\")!, this);\r\n                  } else if (typeName.endsWith(\"h\")) {\r\n                    return new ScalarData(new Float32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"f16\")!, this);\r\n                  } else if (typeName.endsWith(\"i\")) {\r\n                    return new ScalarData(new Int32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"i32\")!, this);\r\n                  } else if (typeName.endsWith(\"b\")) {\r\n                    return new ScalarData(new Int32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"bool\")!, this);\r\n                  } else if (typeName.endsWith(\"u\")) {\r\n                    return new ScalarData(new Uint32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"i32\")!, this);\r\n                  }\r\n                }\r\n\r\n                if (typeName === \"vec2f\") {\r\n                  value.push(new Float32Array(this.buffer, offset, 2)[element]);\r\n                } else if (typeName === \"vec3f\") {\r\n                  if ((offset + 12) >= this.buffer.byteLength) {\r\n                    console.log(\"Insufficient buffer data\");\r\n                    return null;\r\n                  }\r\n                  const fa = new Float32Array(this.buffer, offset, 3);\r\n                  value.push(fa[element]);\r\n                } else if (typeName === \"vec4f\") {\r\n                  value.push(new Float32Array(this.buffer, offset, 4)[element]);\r\n                } else if (typeName === \"vec2i\") {\r\n                  formatName = \"i32\";\r\n                  formatSuffix = \"i\";\r\n                  value.push(new Int32Array(this.buffer, offset, 2)[element]);\r\n                } else if (typeName === \"vec3i\") {\r\n                  formatName = \"i32\";\r\n                  formatSuffix = \"i\";\r\n                  value.push(new Int32Array(this.buffer, offset, 3)[element]);\r\n                } else if (typeName === \"vec4i\") {\r\n                  formatName = \"i32\";\r\n                  formatSuffix = \"i\";\r\n                  value.push(new Int32Array(this.buffer, offset, 4)[element]);\r\n                } else if (typeName === \"vec2u\") {\r\n                  formatName = \"u32\";\r\n                  formatSuffix = \"u\";\r\n                  const ua = new Uint32Array(this.buffer, offset, 2);\r\n                  value.push(ua[element]);\r\n                } else if (typeName === \"vec3u\") {\r\n                  formatName = \"u32\";\r\n                  formatSuffix = \"u\";\r\n                  value.push(new Uint32Array(this.buffer, offset, 3)[element]);\r\n                } else if (typeName === \"vec4u\") {\r\n                  formatName = \"u32\";\r\n                  formatSuffix = \"u\";\r\n                  value.push(new Uint32Array(this.buffer, offset, 4)[element]);\r\n                }\r\n              }\r\n\r\n              if (value.length === 2) {\r\n                typeInfo = exec.getTypeInfo(`vec2${formatSuffix}`)!;\r\n              } else if (value.length === 3) {\r\n                typeInfo = exec.getTypeInfo(`vec3${formatSuffix}`)!;\r\n              } else if (value.length === 4) {\r\n                typeInfo = exec.getTypeInfo(`vec4${formatSuffix}`)!;\r\n              } else {\r\n                console.error(`GetDataValue: Invalid vector length ${value.length}`);\r\n              }\r\n\r\n              return new VectorData(value, typeInfo, null);\r\n            } else {\r\n              console.error(`GetDataValue: Unknown member ${member}`);\r\n              return null;\r\n            }\r\n          }\r\n\r\n          console.error(`GetDataValue: Type ${typeName} is not a struct`);\r\n          return null;\r\n        }\r\n      } else {\r\n        console.error(`GetDataValue: Unknown postfix type`, postfix);\r\n        return null;\r\n      }\r\n\r\n      postfix = postfix.postfix;\r\n    }\r\n\r\n    const typeName = typeInfo.getTypeName();\r\n\r\n    if (typeName === \"f32\") {\r\n      return new ScalarData(new Float32Array(this.buffer, offset, 1), typeInfo, this);\r\n    } else if (typeName === \"i32\") {\r\n      return new ScalarData(new Int32Array(this.buffer, offset, 1), typeInfo, this);\r\n    } else if (typeName === \"u32\") {\r\n      return new ScalarData(new Uint32Array(this.buffer, offset, 1), typeInfo, this);\r\n    } else if (typeName === \"vec2f\") {\r\n      return new VectorData(new Float32Array(this.buffer, offset, 2), typeInfo, this);\r\n    } else if (typeName === \"vec3f\") {\r\n      return new VectorData(new Float32Array(this.buffer, offset, 3), typeInfo, this);\r\n    } else if (typeName === \"vec4f\") {\r\n      return new VectorData(new Float32Array(this.buffer, offset, 4), typeInfo, this);\r\n    } else if (typeName === \"vec2i\") {\r\n      return new VectorData(new Int32Array(this.buffer, offset, 2), typeInfo, this);\r\n    } else if (typeName === \"vec3i\") {\r\n      return new VectorData(new Int32Array(this.buffer, offset, 3), typeInfo, this);\r\n    } else if (typeName === \"vec4i\") {\r\n      return new VectorData(new Int32Array(this.buffer, offset, 4), typeInfo, this);\r\n    } else if (typeName === \"vec2u\") {\r\n      return new VectorData(new Uint32Array(this.buffer, offset, 2), typeInfo, this);\r\n    } else if (typeName === \"vec3u\") {\r\n      return new VectorData(new Uint32Array(this.buffer, offset, 3), typeInfo, this);\r\n    } else if (typeName === \"vec4u\") {\r\n      return new VectorData(new Uint32Array(this.buffer, offset, 4), typeInfo, this);\r\n    }\r\n\r\n    if (typeInfo instanceof TemplateInfo && typeInfo.name === \"atomic\") {\r\n      if (typeInfo.format?.name === \"u32\") {\r\n        return new ScalarData(new Uint32Array(this.buffer, offset, 1)[0], typeInfo.format, this);\r\n      } else if (typeInfo.format?.name === \"i32\") {\r\n        return new ScalarData(new Int32Array(this.buffer, offset, 1)[0], typeInfo.format, this);\r\n      } else {\r\n        console.error(`GetDataValue: Invalid atomic format ${typeInfo.format?.name}`);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    return new TypedData(this.buffer, typeInfo, offset, this);\r\n  }\r\n\r\n  toString(): string {\r\n    let s = \"\";\r\n    if (this.typeInfo instanceof ArrayInfo) {\r\n      if (this.typeInfo.format.name === \"f32\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}`;\r\n        for (let i = 1; i < fa.length; ++i) {\r\n          s += `, ${fa[i]}`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"i32\") {\r\n        const fa = new Int32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}`;\r\n        for (let i = 1; i < fa.length; ++i) {\r\n          s += `, ${fa[i]}`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"u32\") {\r\n        const fa = new Uint32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}`;\r\n        for (let i = 1; i < fa.length; ++i) {\r\n          s += `, ${fa[i]}`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"vec2f\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}, ${fa[1]}]`;\r\n        for (let i = 1; i < fa.length / 2; ++i) {\r\n          s += `, [${fa[i * 2]}, ${fa[i * 2 + 1]}]`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"vec3f\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}, ${fa[1]}, ${fa[2]}]`;\r\n        for (let i = 4; i < fa.length; i += 4) {\r\n          s += `, [${fa[i]}, ${fa[i + 1]}, ${fa[i + 2]}]`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"vec4f\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}, ${fa[1]}, ${fa[2]}, ${fa[3]}]`;\r\n        for (let i = 4; i < fa.length; i += 4) {\r\n          s += `, [${fa[i]}, ${fa[i + 1]}, ${fa[i + 2]}, ${fa[i + 3]}]`;\r\n        }\r\n      } else {\r\n        s = `[...]`;\r\n      }\r\n    } else if (this.typeInfo instanceof StructInfo) {\r\n      s += `{...}`;\r\n    } else {\r\n      s = `[...]`;\r\n    }\r\n    return s;\r\n  }\r\n}\r\n\r\nexport class TextureData extends Data {\r\n  data: Array<ArrayBuffer | Float32Array | Uint32Array | Int32Array | Uint8Array | Int8Array>;\r\n  descriptor: Object;\r\n  view: Object | null;\r\n\r\n  constructor(data: Array<ArrayBuffer | Float32Array | Uint32Array | Int32Array | Uint8Array | Int8Array>,\r\n      typeInfo: TypeInfo, descriptor: Object, view: Object | null) {\r\n      super(typeInfo, null);\r\n      this.data = data;\r\n      this.descriptor = descriptor;\r\n      this.view = view;\r\n  }\r\n\r\n  clone(): Data {\r\n    return new TextureData(this.data, this.typeInfo, this.descriptor, this.view);\r\n  }\r\n\r\n  get width(): number {\r\n    const size = this.descriptor[\"size\"];\r\n    if (size instanceof Array && size.length > 0) {\r\n      return size[0] ?? 0;\r\n    } else if (size instanceof Object) {\r\n      return size[\"width\"] ?? 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get height(): number {\r\n    const size = this.descriptor[\"size\"];\r\n    if (size instanceof Array && size.length > 1) {\r\n      return size[1] ?? 0;\r\n    } else if (size instanceof Object) {\r\n      return size[\"height\"] ?? 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get depthOrArrayLayers(): number {\r\n    const size = this.descriptor[\"size\"];\r\n    if (size instanceof Array && size.length > 2) {\r\n      return size[2] ?? 0;\r\n    } else if (size instanceof Object) {\r\n      return size[\"depthOrArrayLayers\"] ?? 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get format(): string {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"format\"] ?? \"rgba8unorm\";\r\n    }\r\n    return \"rgba8unorm\";\r\n  }\r\n\r\n  get sampleCount(): number {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"sampleCount\"] ?? 1;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  get mipLevelCount(): number {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"mipLevelCount\"] ?? 1;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  get dimension(): string {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"dimension\"] ?? \"2d\";\r\n    }\r\n    return \"2d\";\r\n  }\r\n\r\n  getMipLevelSize(level: number): number[] {\r\n    if (level >= this.mipLevelCount) {\r\n      return [0, 0, 0];\r\n    }\r\n\r\n    const size = [this.width, this.height, this.depthOrArrayLayers];\r\n    for (let i = 0; i < size.length; ++i) {\r\n      size[i] = Math.max(1, size[i] >> level);\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  get texelByteSize(): number {\r\n    const format = this.format;\r\n    const formatInfo = TextureFormatInfo[format];\r\n    if (!formatInfo) {\r\n      return 0;\r\n    }\r\n    if (formatInfo.isDepthStencil) {\r\n      return 4; // depth textures have r32float imageData\r\n    }\r\n    return formatInfo.bytesPerBlock;\r\n  }\r\n\r\n  get bytesPerRow(): number {\r\n    const width = this.width;\r\n    const texelByteSize = this.texelByteSize;\r\n    //return (width * texelByteSize + 255) & ~0xff; // bytesPerRow is aligned to a multiple of 256 bytes\r\n    return width * texelByteSize;\r\n  }\r\n\r\n  get isDepthStencil(): boolean {\r\n    const format = this.format;\r\n    const formatInfo = TextureFormatInfo[format];\r\n    if (!formatInfo) {\r\n      return false;\r\n    }\r\n    return formatInfo.isDepthStencil;\r\n  }\r\n\r\n  getGpuSize(): number {\r\n    const format = this.format;\r\n    const formatInfo = TextureFormatInfo[format];\r\n    const width = this.width;\r\n    if (!format || width <= 0 || !formatInfo) {\r\n      return -1;\r\n    }\r\n\r\n    const height = this.height;\r\n    const depthOrArrayLayers = this.depthOrArrayLayers;\r\n    const dimension = this.dimension;\r\n    const blockWidth = width / formatInfo.blockWidth;\r\n    const blockHeight = dimension === \"1d\" ? 1 : height / formatInfo.blockHeight;\r\n    const bytesPerBlock = formatInfo.bytesPerBlock;\r\n\r\n    return blockWidth * blockHeight * bytesPerBlock * depthOrArrayLayers;\r\n  }\r\n\r\n  getPixel(x: number, y: number, z: number = 0, mipLevel: number = 0): number[] | null {\r\n    const texelByteSize = this.texelByteSize;\r\n    const bytesPerRow = this.bytesPerRow;\r\n    const height = this.height;\r\n    const buffer = this.data[mipLevel];\r\n    const imageData = new Uint8Array(buffer);\r\n    return getTexturePixel(imageData, x, y, z, mipLevel, height, bytesPerRow, texelByteSize, this.format);\r\n  }\r\n\r\n  setPixel(x: number, y: number, z: number, mipLevel: number, value: number[]): void {\r\n    const texelByteSize = this.texelByteSize;\r\n    const bytesPerRow = this.bytesPerRow;\r\n    const height = this.height;\r\n    const buffer = this.data[mipLevel];\r\n    const imageData = new Uint8Array(buffer);\r\n    setTexturePixel(imageData, x, y, z, mipLevel, height, bytesPerRow, texelByteSize, this.format, value);\r\n  }\r\n}\r\n","export enum TokenClass {\r\n  token,\r\n  keyword,\r\n  reserved,\r\n}\r\n\r\nexport class TokenType {\r\n  name: string;\r\n  type: TokenClass;\r\n  rule: RegExp | string;\r\n\r\n  constructor(name: string, type: TokenClass, rule: RegExp | string) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.rule = rule;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\n/// Catalog of defined token types, keywords, and reserved words.\r\nexport class TokenTypes {\r\n  static readonly none = new TokenType(\"\", TokenClass.reserved, \"\");\r\n  static readonly eof = new TokenType(\"EOF\", TokenClass.token, \"\");\r\n\r\n  static readonly reserved = {\r\n    asm: new TokenType(\"asm\", TokenClass.reserved, \"asm\"),\r\n    bf16: new TokenType(\"bf16\", TokenClass.reserved, \"bf16\"),\r\n    do: new TokenType(\"do\", TokenClass.reserved, \"do\"),\r\n    enum: new TokenType(\"enum\", TokenClass.reserved, \"enum\"),\r\n    f16: new TokenType(\"f16\", TokenClass.reserved, \"f16\"),\r\n    f64: new TokenType(\"f64\", TokenClass.reserved, \"f64\"),\r\n    handle: new TokenType(\"handle\", TokenClass.reserved, \"handle\"),\r\n    i8: new TokenType(\"i8\", TokenClass.reserved, \"i8\"),\r\n    i16: new TokenType(\"i16\", TokenClass.reserved, \"i16\"),\r\n    i64: new TokenType(\"i64\", TokenClass.reserved, \"i64\"),\r\n    mat: new TokenType(\"mat\", TokenClass.reserved, \"mat\"),\r\n    premerge: new TokenType(\"premerge\", TokenClass.reserved, \"premerge\"),\r\n    regardless: new TokenType(\"regardless\", TokenClass.reserved, \"regardless\"),\r\n    typedef: new TokenType(\"typedef\", TokenClass.reserved, \"typedef\"),\r\n    u8: new TokenType(\"u8\", TokenClass.reserved, \"u8\"),\r\n    u16: new TokenType(\"u16\", TokenClass.reserved, \"u16\"),\r\n    u64: new TokenType(\"u64\", TokenClass.reserved, \"u64\"),\r\n    unless: new TokenType(\"unless\", TokenClass.reserved, \"unless\"),\r\n    using: new TokenType(\"using\", TokenClass.reserved, \"using\"),\r\n    vec: new TokenType(\"vec\", TokenClass.reserved, \"vec\"),\r\n    void: new TokenType(\"void\", TokenClass.reserved, \"void\"),\r\n  };\r\n\r\n  static readonly keywords = {\r\n    array: new TokenType(\"array\", TokenClass.keyword, \"array\"),\r\n    atomic: new TokenType(\"atomic\", TokenClass.keyword, \"atomic\"),\r\n    bool: new TokenType(\"bool\", TokenClass.keyword, \"bool\"),\r\n    f32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\r\n    i32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\r\n    mat2x2: new TokenType(\"mat2x2\", TokenClass.keyword, \"mat2x2\"),\r\n    mat2x3: new TokenType(\"mat2x3\", TokenClass.keyword, \"mat2x3\"),\r\n    mat2x4: new TokenType(\"mat2x4\", TokenClass.keyword, \"mat2x4\"),\r\n    mat3x2: new TokenType(\"mat3x2\", TokenClass.keyword, \"mat3x2\"),\r\n    mat3x3: new TokenType(\"mat3x3\", TokenClass.keyword, \"mat3x3\"),\r\n    mat3x4: new TokenType(\"mat3x4\", TokenClass.keyword, \"mat3x4\"),\r\n    mat4x2: new TokenType(\"mat4x2\", TokenClass.keyword, \"mat4x2\"),\r\n    mat4x3: new TokenType(\"mat4x3\", TokenClass.keyword, \"mat4x3\"),\r\n    mat4x4: new TokenType(\"mat4x4\", TokenClass.keyword, \"mat4x4\"),\r\n    ptr: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),\r\n    sampler: new TokenType(\"sampler\", TokenClass.keyword, \"sampler\"),\r\n    sampler_comparison: new TokenType(\r\n      \"sampler_comparison\",\r\n      TokenClass.keyword,\r\n      \"sampler_comparison\"\r\n    ),\r\n    struct: new TokenType(\"struct\", TokenClass.keyword, \"struct\"),\r\n    texture_1d: new TokenType(\"texture_1d\", TokenClass.keyword, \"texture_1d\"),\r\n    texture_2d: new TokenType(\"texture_2d\", TokenClass.keyword, \"texture_2d\"),\r\n    texture_2d_array: new TokenType(\r\n      \"texture_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_2d_array\"\r\n    ),\r\n    texture_3d: new TokenType(\"texture_3d\", TokenClass.keyword, \"texture_3d\"),\r\n    texture_cube: new TokenType(\r\n      \"texture_cube\",\r\n      TokenClass.keyword,\r\n      \"texture_cube\"\r\n    ),\r\n    texture_cube_array: new TokenType(\r\n      \"texture_cube_array\",\r\n      TokenClass.keyword,\r\n      \"texture_cube_array\"\r\n    ),\r\n    texture_multisampled_2d: new TokenType(\r\n      \"texture_multisampled_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_multisampled_2d\"\r\n    ),\r\n    texture_storage_1d: new TokenType(\r\n      \"texture_storage_1d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_1d\"\r\n    ),\r\n    texture_storage_2d: new TokenType(\r\n      \"texture_storage_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_2d\"\r\n    ),\r\n    texture_storage_2d_array: new TokenType(\r\n      \"texture_storage_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_2d_array\"\r\n    ),\r\n    texture_storage_3d: new TokenType(\r\n      \"texture_storage_3d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_3d\"\r\n    ),\r\n    texture_depth_2d: new TokenType(\r\n      \"texture_depth_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_2d\"\r\n    ),\r\n    texture_depth_2d_array: new TokenType(\r\n      \"texture_depth_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_2d_array\"\r\n    ),\r\n    texture_depth_cube: new TokenType(\r\n      \"texture_depth_cube\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_cube\"\r\n    ),\r\n    texture_depth_cube_array: new TokenType(\r\n      \"texture_depth_cube_array\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_cube_array\"\r\n    ),\r\n    texture_depth_multisampled_2d: new TokenType(\r\n      \"texture_depth_multisampled_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_multisampled_2d\"\r\n    ),\r\n    texture_external: new TokenType(\r\n      \"texture_external\",\r\n      TokenClass.keyword,\r\n      \"texture_external\"\r\n    ),\r\n    u32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\r\n    vec2: new TokenType(\"vec2\", TokenClass.keyword, \"vec2\"),\r\n    vec3: new TokenType(\"vec3\", TokenClass.keyword, \"vec3\"),\r\n    vec4: new TokenType(\"vec4\", TokenClass.keyword, \"vec4\"),\r\n    bitcast: new TokenType(\"bitcast\", TokenClass.keyword, \"bitcast\"),\r\n    block: new TokenType(\"block\", TokenClass.keyword, \"block\"),\r\n    break: new TokenType(\"break\", TokenClass.keyword, \"break\"),\r\n    case: new TokenType(\"case\", TokenClass.keyword, \"case\"),\r\n    continue: new TokenType(\"continue\", TokenClass.keyword, \"continue\"),\r\n    continuing: new TokenType(\"continuing\", TokenClass.keyword, \"continuing\"),\r\n    default: new TokenType(\"default\", TokenClass.keyword, \"default\"),\r\n    diagnostic: new TokenType(\"diagnostic\", TokenClass.keyword, \"diagnostic\"),\r\n    discard: new TokenType(\"discard\", TokenClass.keyword, \"discard\"),\r\n    else: new TokenType(\"else\", TokenClass.keyword, \"else\"),\r\n    enable: new TokenType(\"enable\", TokenClass.keyword, \"enable\"),\r\n    fallthrough: new TokenType(\r\n      \"fallthrough\",\r\n      TokenClass.keyword,\r\n      \"fallthrough\"\r\n    ),\r\n    false: new TokenType(\"false\", TokenClass.keyword, \"false\"),\r\n    fn: new TokenType(\"fn\", TokenClass.keyword, \"fn\"),\r\n    for: new TokenType(\"for\", TokenClass.keyword, \"for\"),\r\n    function: new TokenType(\"function\", TokenClass.keyword, \"function\"),\r\n    if: new TokenType(\"if\", TokenClass.keyword, \"if\"),\r\n    let: new TokenType(\"let\", TokenClass.keyword, \"let\"),\r\n    const: new TokenType(\"const\", TokenClass.keyword, \"const\"),\r\n    loop: new TokenType(\"loop\", TokenClass.keyword, \"loop\"),\r\n    while: new TokenType(\"while\", TokenClass.keyword, \"while\"),\r\n    private: new TokenType(\"private\", TokenClass.keyword, \"private\"),\r\n    read: new TokenType(\"read\", TokenClass.keyword, \"read\"),\r\n    read_write: new TokenType(\"read_write\", TokenClass.keyword, \"read_write\"),\r\n    return: new TokenType(\"return\", TokenClass.keyword, \"return\"),\r\n    requires: new TokenType(\"requires\", TokenClass.keyword, \"requires\"),\r\n    storage: new TokenType(\"storage\", TokenClass.keyword, \"storage\"),\r\n    switch: new TokenType(\"switch\", TokenClass.keyword, \"switch\"),\r\n    true: new TokenType(\"true\", TokenClass.keyword, \"true\"),\r\n    alias: new TokenType(\"alias\", TokenClass.keyword, \"alias\"),\r\n    type: new TokenType(\"type\", TokenClass.keyword, \"type\"),\r\n    uniform: new TokenType(\"uniform\", TokenClass.keyword, \"uniform\"),\r\n    var: new TokenType(\"var\", TokenClass.keyword, \"var\"),\r\n    override: new TokenType(\"override\", TokenClass.keyword, \"override\"),\r\n    workgroup: new TokenType(\"workgroup\", TokenClass.keyword, \"workgroup\"),\r\n    write: new TokenType(\"write\", TokenClass.keyword, \"write\"),\r\n    r8unorm: new TokenType(\"r8unorm\", TokenClass.keyword, \"r8unorm\"),\r\n    r8snorm: new TokenType(\"r8snorm\", TokenClass.keyword, \"r8snorm\"),\r\n    r8uint: new TokenType(\"r8uint\", TokenClass.keyword, \"r8uint\"),\r\n    r8sint: new TokenType(\"r8sint\", TokenClass.keyword, \"r8sint\"),\r\n    r16uint: new TokenType(\"r16uint\", TokenClass.keyword, \"r16uint\"),\r\n    r16sint: new TokenType(\"r16sint\", TokenClass.keyword, \"r16sint\"),\r\n    r16float: new TokenType(\"r16float\", TokenClass.keyword, \"r16float\"),\r\n    rg8unorm: new TokenType(\"rg8unorm\", TokenClass.keyword, \"rg8unorm\"),\r\n    rg8snorm: new TokenType(\"rg8snorm\", TokenClass.keyword, \"rg8snorm\"),\r\n    rg8uint: new TokenType(\"rg8uint\", TokenClass.keyword, \"rg8uint\"),\r\n    rg8sint: new TokenType(\"rg8sint\", TokenClass.keyword, \"rg8sint\"),\r\n    r32uint: new TokenType(\"r32uint\", TokenClass.keyword, \"r32uint\"),\r\n    r32sint: new TokenType(\"r32sint\", TokenClass.keyword, \"r32sint\"),\r\n    r32float: new TokenType(\"r32float\", TokenClass.keyword, \"r32float\"),\r\n    rg16uint: new TokenType(\"rg16uint\", TokenClass.keyword, \"rg16uint\"),\r\n    rg16sint: new TokenType(\"rg16sint\", TokenClass.keyword, \"rg16sint\"),\r\n    rg16float: new TokenType(\"rg16float\", TokenClass.keyword, \"rg16float\"),\r\n    rgba8unorm: new TokenType(\"rgba8unorm\", TokenClass.keyword, \"rgba8unorm\"),\r\n    rgba8unorm_srgb: new TokenType(\r\n      \"rgba8unorm_srgb\",\r\n      TokenClass.keyword,\r\n      \"rgba8unorm_srgb\"\r\n    ),\r\n    rgba8snorm: new TokenType(\"rgba8snorm\", TokenClass.keyword, \"rgba8snorm\"),\r\n    rgba8uint: new TokenType(\"rgba8uint\", TokenClass.keyword, \"rgba8uint\"),\r\n    rgba8sint: new TokenType(\"rgba8sint\", TokenClass.keyword, \"rgba8sint\"),\r\n    bgra8unorm: new TokenType(\"bgra8unorm\", TokenClass.keyword, \"bgra8unorm\"),\r\n    bgra8unorm_srgb: new TokenType(\r\n      \"bgra8unorm_srgb\",\r\n      TokenClass.keyword,\r\n      \"bgra8unorm_srgb\"\r\n    ),\r\n    rgb10a2unorm: new TokenType(\r\n      \"rgb10a2unorm\",\r\n      TokenClass.keyword,\r\n      \"rgb10a2unorm\"\r\n    ),\r\n    rg11b10float: new TokenType(\r\n      \"rg11b10float\",\r\n      TokenClass.keyword,\r\n      \"rg11b10float\"\r\n    ),\r\n    rg32uint: new TokenType(\"rg32uint\", TokenClass.keyword, \"rg32uint\"),\r\n    rg32sint: new TokenType(\"rg32sint\", TokenClass.keyword, \"rg32sint\"),\r\n    rg32float: new TokenType(\"rg32float\", TokenClass.keyword, \"rg32float\"),\r\n    rgba16uint: new TokenType(\"rgba16uint\", TokenClass.keyword, \"rgba16uint\"),\r\n    rgba16sint: new TokenType(\"rgba16sint\", TokenClass.keyword, \"rgba16sint\"),\r\n    rgba16float: new TokenType(\r\n      \"rgba16float\",\r\n      TokenClass.keyword,\r\n      \"rgba16float\"\r\n    ),\r\n    rgba32uint: new TokenType(\"rgba32uint\", TokenClass.keyword, \"rgba32uint\"),\r\n    rgba32sint: new TokenType(\"rgba32sint\", TokenClass.keyword, \"rgba32sint\"),\r\n    rgba32float: new TokenType(\r\n      \"rgba32float\",\r\n      TokenClass.keyword,\r\n      \"rgba32float\"\r\n    ),\r\n    static_assert: new TokenType(\r\n      \"static_assert\",\r\n      TokenClass.keyword,\r\n      \"static_assert\"\r\n    ),\r\n\r\n    // WGSL grammar has a few keywords that have different token names than the strings they\r\n    // represent. Aliasing them here.\r\n    /*int32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\r\n        uint32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\r\n        float32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\r\n        pointer: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),*/\r\n  };\r\n\r\n  static readonly tokens = {\r\n    decimal_float_literal: new TokenType(\r\n      \"decimal_float_literal\",\r\n      TokenClass.token,\r\n      /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/\r\n    ),\r\n    hex_float_literal: new TokenType(\r\n      \"hex_float_literal\",\r\n      TokenClass.token,\r\n      /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+[fh]?))/\r\n    ),\r\n    int_literal: new TokenType(\r\n      \"int_literal\",\r\n      TokenClass.token,\r\n      /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/\r\n    ),\r\n    uint_literal: new TokenType(\r\n      \"uint_literal\",\r\n      TokenClass.token,\r\n      /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/\r\n    ),\r\n    name: new TokenType(\"name\", TokenClass.token,  /([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/u),\r\n    //name: new TokenType(\"name\", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),\r\n    ident: new TokenType(\"ident\", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),\r\n    and: new TokenType(\"and\", TokenClass.token, \"&\"),\r\n    and_and: new TokenType(\"and_and\", TokenClass.token, \"&&\"),\r\n    arrow: new TokenType(\"arrow \", TokenClass.token, \"->\"),\r\n    attr: new TokenType(\"attr\", TokenClass.token, \"@\"),\r\n    forward_slash: new TokenType(\"forward_slash\", TokenClass.token, \"/\"),\r\n    bang: new TokenType(\"bang\", TokenClass.token, \"!\"),\r\n    bracket_left: new TokenType(\"bracket_left\", TokenClass.token, \"[\"),\r\n    bracket_right: new TokenType(\"bracket_right\", TokenClass.token, \"]\"),\r\n    brace_left: new TokenType(\"brace_left\", TokenClass.token, \"{\"),\r\n    brace_right: new TokenType(\"brace_right\", TokenClass.token, \"}\"),\r\n    colon: new TokenType(\"colon\", TokenClass.token, \":\"),\r\n    comma: new TokenType(\"comma\", TokenClass.token, \",\"),\r\n    equal: new TokenType(\"equal\", TokenClass.token, \"=\"),\r\n    equal_equal: new TokenType(\"equal_equal\", TokenClass.token, \"==\"),\r\n    not_equal: new TokenType(\"not_equal\", TokenClass.token, \"!=\"),\r\n    greater_than: new TokenType(\"greater_than\", TokenClass.token, \">\"),\r\n    greater_than_equal: new TokenType(\r\n      \"greater_than_equal\",\r\n      TokenClass.token,\r\n      \">=\"\r\n    ),\r\n    shift_right: new TokenType(\"shift_right\", TokenClass.token, \">>\"),\r\n    less_than: new TokenType(\"less_than\", TokenClass.token, \"<\"),\r\n    less_than_equal: new TokenType(\"less_than_equal\", TokenClass.token, \"<=\"),\r\n    shift_left: new TokenType(\"shift_left\", TokenClass.token, \"<<\"),\r\n    modulo: new TokenType(\"modulo\", TokenClass.token, \"%\"),\r\n    minus: new TokenType(\"minus\", TokenClass.token, \"-\"),\r\n    minus_minus: new TokenType(\"minus_minus\", TokenClass.token, \"--\"),\r\n    period: new TokenType(\"period\", TokenClass.token, \".\"),\r\n    plus: new TokenType(\"plus\", TokenClass.token, \"+\"),\r\n    plus_plus: new TokenType(\"plus_plus\", TokenClass.token, \"++\"),\r\n    or: new TokenType(\"or\", TokenClass.token, \"|\"),\r\n    or_or: new TokenType(\"or_or\", TokenClass.token, \"||\"),\r\n    paren_left: new TokenType(\"paren_left\", TokenClass.token, \"(\"),\r\n    paren_right: new TokenType(\"paren_right\", TokenClass.token, \")\"),\r\n    semicolon: new TokenType(\"semicolon\", TokenClass.token, \";\"),\r\n    star: new TokenType(\"star\", TokenClass.token, \"*\"),\r\n    tilde: new TokenType(\"tilde\", TokenClass.token, \"~\"),\r\n    underscore: new TokenType(\"underscore\", TokenClass.token, \"_\"),\r\n    xor: new TokenType(\"xor\", TokenClass.token, \"^\"),\r\n    plus_equal: new TokenType(\"plus_equal\", TokenClass.token, \"+=\"),\r\n    minus_equal: new TokenType(\"minus_equal\", TokenClass.token, \"-=\"),\r\n    times_equal: new TokenType(\"times_equal\", TokenClass.token, \"*=\"),\r\n    division_equal: new TokenType(\"division_equal\", TokenClass.token, \"/=\"),\r\n    modulo_equal: new TokenType(\"modulo_equal\", TokenClass.token, \"%=\"),\r\n    and_equal: new TokenType(\"and_equal\", TokenClass.token, \"&=\"),\r\n    or_equal: new TokenType(\"or_equal\", TokenClass.token, \"|=\"),\r\n    xor_equal: new TokenType(\"xor_equal\", TokenClass.token, \"^=\"),\r\n    shift_right_equal: new TokenType(\r\n      \"shift_right_equal\",\r\n      TokenClass.token,\r\n      \">>=\"\r\n    ),\r\n    shift_left_equal: new TokenType(\r\n      \"shift_left_equal\",\r\n      TokenClass.token,\r\n      \"<<=\"\r\n    ),\r\n  };\r\n\r\n  static readonly simpleTokens = {\r\n    \"@\": this.tokens.attr,\r\n    \"{\": this.tokens.brace_left,\r\n    \"}\": this.tokens.brace_right,\r\n    \":\": this.tokens.colon,\r\n    \",\": this.tokens.comma,\r\n    \"(\": this.tokens.paren_left,\r\n    \")\": this.tokens.paren_right,\r\n    \";\": this.tokens.semicolon,\r\n  };\r\n\r\n  static readonly literalTokens = {\r\n    \"&\": this.tokens.and,\r\n    \"&&\": this.tokens.and_and,\r\n    \"->\": this.tokens.arrow ,\r\n    \"/\": this.tokens.forward_slash,\r\n    \"!\": this.tokens.bang,\r\n    \"[\": this.tokens.bracket_left,\r\n    \"]\": this.tokens.bracket_right,\r\n    \"=\": this.tokens.equal,\r\n    \"==\": this.tokens.equal_equal,\r\n    \"!=\": this.tokens.not_equal,\r\n    \">\": this.tokens.greater_than,\r\n    \">=\": this.tokens.greater_than_equal,\r\n    \">>\": this.tokens.shift_right,\r\n    \"<\": this.tokens.less_than,\r\n    \"<=\": this.tokens.less_than_equal,\r\n    \"<<\": this.tokens.shift_left,\r\n    \"%\": this.tokens.modulo,\r\n    \"-\": this.tokens.minus,\r\n    \"--\": this.tokens.minus_minus,\r\n    \".\": this.tokens.period,\r\n    \"+\": this.tokens.plus,\r\n    \"++\": this.tokens.plus_plus,\r\n    \"|\": this.tokens.or,\r\n    \"||\": this.tokens.or_or,\r\n    \"*\": this.tokens.star,\r\n    \"~\": this.tokens.tilde,\r\n    \"_\": this.tokens.underscore,\r\n    \"^\": this.tokens.xor,\r\n    \"+=\": this.tokens.plus_equal,\r\n    \"-=\": this.tokens.minus_equal,\r\n    \"*=\": this.tokens.times_equal,\r\n    \"/=\": this.tokens.division_equal,\r\n    \"%=\": this.tokens.modulo_equal,\r\n    \"&=\": this.tokens.and_equal,\r\n    \"|=\": this.tokens.or_equal,\r\n    \"^=\": this.tokens.xor_equal,\r\n    \">>=\": this.tokens.shift_right_equal,\r\n    \"<<=\": this.tokens.shift_left_equal,\r\n  };\r\n\r\n  static readonly regexTokens = {\r\n    decimal_float_literal: this.tokens.decimal_float_literal,\r\n    hex_float_literal: this.tokens.hex_float_literal,\r\n    int_literal: this.tokens.int_literal,\r\n    uint_literal: this.tokens.uint_literal,\r\n    ident: this.tokens.ident,\r\n  };\r\n\r\n  static readonly storage_class = [\r\n    this.keywords.function,\r\n    this.keywords.private,\r\n    this.keywords.workgroup,\r\n    this.keywords.uniform,\r\n    this.keywords.storage,\r\n  ];\r\n\r\n  static readonly access_mode = [\r\n    this.keywords.read,\r\n    this.keywords.write,\r\n    this.keywords.read_write,\r\n  ];\r\n\r\n  static readonly sampler_type = [\r\n    this.keywords.sampler,\r\n    this.keywords.sampler_comparison,\r\n  ];\r\n\r\n  static readonly sampled_texture_type = [\r\n    this.keywords.texture_1d,\r\n    this.keywords.texture_2d,\r\n    this.keywords.texture_2d_array,\r\n    this.keywords.texture_3d,\r\n    this.keywords.texture_cube,\r\n    this.keywords.texture_cube_array,\r\n  ];\r\n\r\n  static readonly multisampled_texture_type = [\r\n    this.keywords.texture_multisampled_2d,\r\n  ];\r\n\r\n  static readonly storage_texture_type = [\r\n    this.keywords.texture_storage_1d,\r\n    this.keywords.texture_storage_2d,\r\n    this.keywords.texture_storage_2d_array,\r\n    this.keywords.texture_storage_3d,\r\n  ];\r\n\r\n  static readonly depth_texture_type = [\r\n    this.keywords.texture_depth_2d,\r\n    this.keywords.texture_depth_2d_array,\r\n    this.keywords.texture_depth_cube,\r\n    this.keywords.texture_depth_cube_array,\r\n    this.keywords.texture_depth_multisampled_2d,\r\n  ];\r\n\r\n  static readonly texture_external_type = [this.keywords.texture_external];\r\n\r\n  static readonly any_texture_type = [\r\n    ...this.sampled_texture_type,\r\n    ...this.multisampled_texture_type,\r\n    ...this.storage_texture_type,\r\n    ...this.depth_texture_type,\r\n    ...this.texture_external_type,\r\n  ];\r\n\r\n  static readonly texel_format = [\r\n    this.keywords.r8unorm,\r\n    this.keywords.r8snorm,\r\n    this.keywords.r8uint,\r\n    this.keywords.r8sint,\r\n    this.keywords.r16uint,\r\n    this.keywords.r16sint,\r\n    this.keywords.r16float,\r\n    this.keywords.rg8unorm,\r\n    this.keywords.rg8snorm,\r\n    this.keywords.rg8uint,\r\n    this.keywords.rg8sint,\r\n    this.keywords.r32uint,\r\n    this.keywords.r32sint,\r\n    this.keywords.r32float,\r\n    this.keywords.rg16uint,\r\n    this.keywords.rg16sint,\r\n    this.keywords.rg16float,\r\n    this.keywords.rgba8unorm,\r\n    this.keywords.rgba8unorm_srgb,\r\n    this.keywords.rgba8snorm,\r\n    this.keywords.rgba8uint,\r\n    this.keywords.rgba8sint,\r\n    this.keywords.bgra8unorm,\r\n    this.keywords.bgra8unorm_srgb,\r\n    this.keywords.rgb10a2unorm,\r\n    this.keywords.rg11b10float,\r\n    this.keywords.rg32uint,\r\n    this.keywords.rg32sint,\r\n    this.keywords.rg32float,\r\n    this.keywords.rgba16uint,\r\n    this.keywords.rgba16sint,\r\n    this.keywords.rgba16float,\r\n    this.keywords.rgba32uint,\r\n    this.keywords.rgba32sint,\r\n    this.keywords.rgba32float,\r\n  ];\r\n\r\n  static readonly const_literal = [\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.decimal_float_literal,\r\n    this.tokens.hex_float_literal,\r\n    this.keywords.true,\r\n    this.keywords.false,\r\n  ];\r\n\r\n  static readonly literal_or_ident = [\r\n    this.tokens.ident,\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.decimal_float_literal,\r\n    this.tokens.hex_float_literal,\r\n    this.tokens.name\r\n  ];\r\n\r\n  static readonly element_count_expression = [\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.ident,\r\n  ];\r\n\r\n  static readonly template_types = [\r\n    this.keywords.vec2,\r\n    this.keywords.vec3,\r\n    this.keywords.vec4,\r\n    this.keywords.mat2x2,\r\n    this.keywords.mat2x3,\r\n    this.keywords.mat2x4,\r\n    this.keywords.mat3x2,\r\n    this.keywords.mat3x3,\r\n    this.keywords.mat3x4,\r\n    this.keywords.mat4x2,\r\n    this.keywords.mat4x3,\r\n    this.keywords.mat4x4,\r\n    this.keywords.atomic,\r\n    this.keywords.bitcast,\r\n    ...this.any_texture_type,\r\n  ];\r\n\r\n  // The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\r\n  // The attribute grammar should be ident | block.\r\n  static readonly attribute_name = [this.tokens.ident, this.keywords.block, this.keywords.diagnostic];\r\n\r\n  static readonly assignment_operators = [\r\n    this.tokens.equal,\r\n    this.tokens.plus_equal,\r\n    this.tokens.minus_equal,\r\n    this.tokens.times_equal,\r\n    this.tokens.division_equal,\r\n    this.tokens.modulo_equal,\r\n    this.tokens.and_equal,\r\n    this.tokens.or_equal,\r\n    this.tokens.xor_equal,\r\n    this.tokens.shift_right_equal,\r\n    this.tokens.shift_left_equal,\r\n  ];\r\n\r\n  static readonly increment_operators = [\r\n    this.tokens.plus_plus,\r\n    this.tokens.minus_minus,\r\n  ];\r\n}\r\n\r\n/// A token parsed by the WgslScanner.\r\nexport class Token {\r\n  readonly type: TokenType; // The type of the token.\r\n  readonly lexeme: string; // The string of the token, as parsed from the source text.\r\n  readonly line: number; // The line number of the token in the source text.\r\n  readonly start: number; // The start position of the token in the source text.\r\n  readonly end: number; // The end position of the token in the source text.\r\n\r\n  constructor(type: TokenType, lexeme: string, line: number, start: number, end: number) {\r\n    this.type = type;\r\n    this.lexeme = lexeme;\r\n    this.line = line;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.lexeme;\r\n  }\r\n\r\n  isTemplateType(): boolean {\r\n    return TokenTypes.template_types.indexOf(this.type) != -1;\r\n  }\r\n\r\n  isArrayType(): boolean {\r\n    return this.type == TokenTypes.keywords.array;\r\n  }\r\n\r\n  isArrayOrTemplateType(): boolean {\r\n    return this.isArrayType() || this.isTemplateType();\r\n  }\r\n}\r\n\r\n/// Lexical scanner for the WGSL language. This takes an input source text and generates a list\r\n/// of Token objects, which can then be fed into the WgslParser to generate an AST.\r\nexport class WgslScanner {\r\n  private _source: string;\r\n  private _tokens: Token[] = [];\r\n  private _start = 0;\r\n  private _current = 0;\r\n  private _line = 1;\r\n\r\n  constructor(source?: string) {\r\n    this._source = source ?? \"\";\r\n  }\r\n\r\n  /// Scan all tokens from the source.\r\n  scanTokens(): Token[] {\r\n    while (!this._isAtEnd()) {\r\n      this._start = this._current;\r\n      if (!this.scanToken()) {\r\n        throw `Invalid syntax at line ${this._line}`;\r\n      }\r\n    }\r\n\r\n    this._tokens.push(new Token(TokenTypes.eof, \"\", this._line, this._current, this._current));\r\n\r\n    return this._tokens;\r\n  }\r\n\r\n  /// Scan a single token from the source.\r\n  scanToken(): boolean {\r\n    // Find the longest consecutive set of characters that match a rule.\r\n    let lexeme = this._advance();\r\n\r\n    // Skip line-feed, adding to the line counter.\r\n    if (lexeme == \"\\n\") {\r\n      this._line++;\r\n      return true;\r\n    }\r\n\r\n    // Skip whitespace\r\n    if (this._isWhitespace(lexeme)) {\r\n      return true;\r\n    }\r\n\r\n    if (lexeme == \"/\") {\r\n      // If it's a // comment, skip everything until the next line-feed.\r\n      if (this._peekAhead() == \"/\") {\r\n        while (lexeme != \"\\n\") {\r\n          if (this._isAtEnd()) {\r\n            return true;\r\n          }\r\n          lexeme = this._advance();\r\n        }\r\n        // skip the linefeed\r\n        this._line++;\r\n        return true;\r\n      } else if (this._peekAhead() == \"*\") {\r\n        // If it's a / * block comment, skip everything until the matching * /,\r\n        // allowing for nested block comments.\r\n        this._advance();\r\n        let commentLevel = 1;\r\n        while (commentLevel > 0) {\r\n          if (this._isAtEnd()) {\r\n            return true;\r\n          }\r\n          lexeme = this._advance();\r\n          if (lexeme == \"\\n\") {\r\n            this._line++;\r\n          } else if (lexeme == \"*\") {\r\n            if (this._peekAhead() == \"/\") {\r\n              this._advance();\r\n              commentLevel--;\r\n              if (commentLevel == 0) {\r\n                return true;\r\n              }\r\n            }\r\n          } else if (lexeme == \"/\") {\r\n            if (this._peekAhead() == \"*\") {\r\n              this._advance();\r\n              commentLevel++;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Shortcut single character tokens\r\n    const simpleToken = TokenTypes.simpleTokens[lexeme];\r\n    if (simpleToken) {\r\n      this._addToken(simpleToken);\r\n      return true;\r\n    }\r\n\r\n    // Shortcut keywords and identifiers\r\n    let matchType = TokenTypes.none;\r\n    const isAlpha = this._isAlpha(lexeme);\r\n    const isUnderscore = lexeme === \"_\";\r\n\r\n    if (this._isAlphaNumeric(lexeme)) {\r\n      let nextChar = this._peekAhead();\r\n      while (this._isAlphaNumeric(nextChar)) {\r\n        lexeme += this._advance();\r\n        nextChar = this._peekAhead();\r\n      }\r\n    }\r\n\r\n    if (isAlpha) {\r\n      const matchedType = TokenTypes.keywords[lexeme];\r\n      if (matchedType) {\r\n        this._addToken(matchedType);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (isAlpha || isUnderscore) {\r\n      this._addToken(TokenTypes.tokens.ident);\r\n      return true;\r\n    }\r\n\r\n    // Scan for the next valid token type\r\n    for (;;) {\r\n      let matchedType = this._findType(lexeme);\r\n\r\n      // An exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a\r\n      // shift_right.\r\n      // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\r\n      // and one to close the array).\r\n      // Another ambiguity is '>='. In the case of vec2<i32>=vec2(1,2),\r\n      // it's a greather_than and an equal, not a greater_than_equal.\r\n      // Another ambiguity is '-'. In the case of a-2, it's a minus; in the case of a*-2, it's a -2;\r\n      // in the case of foo()->int, it's a ->; in the case of foo-- or --foo, it's a -- decrement.\r\n\r\n      // WGSL requires context sensitive parsing to resolve these ambiguities. Both of these cases\r\n      // are predicated on it the > either closing a template, or being part of an operator.\r\n      // The solution here is to check if there was a less_than up to some number of tokens\r\n      // previously, and the token prior to that is a keyword that requires a '<', then it will be\r\n      // split into two operators; otherwise it's a single operator.\r\n      const nextLexeme = this._peekAhead();\r\n      if (lexeme == \"-\" && this._tokens.length > 0) {\r\n        if (nextLexeme == \"=\") {\r\n          this._current++;\r\n          lexeme += nextLexeme;\r\n          this._addToken(TokenTypes.tokens.minus_equal);\r\n          return true;\r\n        }\r\n        if (nextLexeme == \"-\") {\r\n          this._current++;\r\n          lexeme += nextLexeme;\r\n          this._addToken(TokenTypes.tokens.minus_minus);\r\n          return true;\r\n        }\r\n        const ti = this._tokens.length - 1;\r\n        const isIdentOrLiteral = TokenTypes.literal_or_ident.indexOf(this._tokens[ti].type) != -1;\r\n        if ((isIdentOrLiteral || this._tokens[ti].type == TokenTypes.tokens.paren_right) && nextLexeme != \">\") {\r\n          this._addToken(matchedType);\r\n          return true;\r\n        }\r\n      }\r\n      if (lexeme == \">\" && (nextLexeme == \">\" || nextLexeme == \"=\")) {\r\n        let foundLessThan = false;\r\n        let ti = this._tokens.length - 1;\r\n        for (let count = 0; count < 5 && ti >= 0; ++count, --ti) {\r\n          if (TokenTypes.assignment_operators.indexOf(this._tokens[ti].type) !== -1) {\r\n            break;\r\n          }\r\n          if (this._tokens[ti].type === TokenTypes.tokens.less_than) {\r\n            if (ti > 0 && this._tokens[ti - 1].isArrayOrTemplateType()) {\r\n              foundLessThan = true;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        // If there was a less_than in the recent token history, then this is probably a\r\n        // greater_than.\r\n        if (foundLessThan) {\r\n          this._addToken(matchedType);\r\n          return true;\r\n        }\r\n      }\r\n\r\n      // The current lexeme may not match any rule, but some token types may be invalid for\r\n      // part of the string but valid after a few more characters.\r\n      // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\r\n      // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\r\n      // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\r\n      // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\r\n      // hex_float_literal. So that means if we hit an non-matching string, we should look\r\n      // ahead up to two characters to see if the string starts matching a valid rule again.\r\n      if (matchedType === TokenTypes.none) {\r\n        let lookAheadLexeme = lexeme;\r\n        let lookAhead = 0;\r\n        const maxLookAhead = 2;\r\n        for (let li = 0; li < maxLookAhead; ++li) {\r\n          lookAheadLexeme += this._peekAhead(li);\r\n          matchedType = this._findType(lookAheadLexeme);\r\n          if (matchedType !== TokenTypes.none) {\r\n            lookAhead = li;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (matchedType === TokenTypes.none) {\r\n          if (matchType === TokenTypes.none) {\r\n            return false;\r\n          }\r\n          this._current--;\r\n          this._addToken(matchType);\r\n          return true;\r\n        }\r\n\r\n        lexeme = lookAheadLexeme;\r\n        this._current += lookAhead + 1;\r\n      }\r\n\r\n      matchType = matchedType;\r\n\r\n      if (this._isAtEnd()) {\r\n        break;\r\n      }\r\n\r\n      lexeme += this._advance();\r\n    }\r\n\r\n    // We got to the end of the input stream. Then the token we've ready so far is it.\r\n    if (matchType === TokenTypes.none) {\r\n      return false;\r\n    }\r\n\r\n    this._addToken(matchType);\r\n    return true;\r\n  }\r\n\r\n  _findType(lexeme: string): TokenType {\r\n    for (const name in TokenTypes.regexTokens) {\r\n      const type = TokenTypes.regexTokens[name];\r\n      if (this._match(lexeme, type.rule)) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    const type = TokenTypes.literalTokens[lexeme];\r\n    if (type) {\r\n      return type;\r\n    }\r\n\r\n    return TokenTypes.none;\r\n  }\r\n\r\n  _match(lexeme: string, rule: RegExp): boolean {\r\n    const match = rule.exec(lexeme);\r\n    return match && match.index == 0 && match[0] == lexeme;\r\n  }\r\n\r\n  _isAtEnd(): boolean {\r\n    return this._current >= this._source.length;\r\n  }\r\n\r\n  _isAlpha(c: string): boolean {\r\n    // To support UTF-8 characters, allow anything other than whitespace, numbers, or operators\r\n    return !this._isNumeric(c) && !this._isWhitespace(c) && c !== \"_\" && c !== \".\" && c !== \"(\" && c !== \")\" &&\r\n      c !== \"[\" && c !== \"]\" && c !== \"{\" && c !== \"}\" && c !== \",\" && c !== \";\" && c !== \":\" && c !== \"=\" &&\r\n      c !== \"!\" && c !== \"<\" && c !== \">\" && c !== \"+\" && c !== \"-\" && c !== \"*\" && c !== \"/\" && c !== \"%\" &&\r\n      c !== \"&\" && c !== \"|\" && c !== \"^\" && c !== \"~\" && c !== \"@\" && c !== \"#\" && c !== \"?\" && c !== \"'\" &&\r\n      c !== \"`\" && c !== \"\\\"\" && c !== \"\\\\\" && c !== \"\\n\" && c !== \"\\r\" && c !== \"\\t\" && c !== \"\\0\";\r\n  }\r\n\r\n  _isNumeric(c: string): boolean {\r\n    return c >= \"0\" && c <= \"9\";\r\n  }\r\n\r\n  _isAlphaNumeric(c: string): boolean {\r\n    return this._isAlpha(c) || this._isNumeric(c) || c === \"_\";\r\n  }\r\n\r\n  _isWhitespace(c: string): boolean {\r\n    return c == \" \" || c == \"\\t\" || c == \"\\r\";\r\n  }\r\n\r\n  _advance(amount: number = 0): string {\r\n    let c = this._source[this._current];\r\n    amount = amount || 0;\r\n    amount++;\r\n    this._current += amount;\r\n    return c;\r\n  }\r\n\r\n  _peekAhead(offset: number = 0): string {\r\n    offset = offset || 0;\r\n    if (this._current + offset >= this._source.length) {\r\n      return \"\\0\";\r\n    }\r\n    return this._source[this._current + offset];\r\n  }\r\n\r\n  _addToken(type: TokenType) {\r\n    const text = this._source.substring(this._start, this._current);\r\n    this._tokens.push(new Token(type, text, this._line, this._start, this._current));\r\n  }\r\n}\r\n","export function isArray(value: any): boolean {\r\n    return Array.isArray(value) || value?.buffer instanceof ArrayBuffer;\r\n}\r\n\r\nexport function isNumber(value: any): boolean {\r\n    return typeof value === \"number\";\r\n}\r\n\r\nconst _f32 = new Float32Array(1);\r\nconst _f32_i32 = new Uint32Array(_f32.buffer);\r\nconst _f32_u32 = new Uint32Array(_f32.buffer);\r\nconst _i32 = new Int32Array(1);\r\nconst _i32_f32 = new Float32Array(_i32.buffer);\r\nconst _i32_u32 = new Uint32Array(_i32.buffer);\r\nconst _u32 = new Uint32Array(1);\r\nconst _u32_f32 = new Float32Array(_u32.buffer);\r\nconst _u32_i32 = new Int32Array(_u32.buffer);\r\n\r\nexport function castScalar(v: number, from: string, to: string): number {\r\n    if (from === to) {\r\n        return v;\r\n    }\r\n\r\n    if (from === \"f32\") {\r\n        if (to === \"i32\" || to === \"x32\") {\r\n            _f32[0] = v;\r\n            return _f32_i32[0];\r\n        } else if (to === \"u32\") {\r\n            _f32[0] = v;\r\n            return _f32_u32[0];\r\n        }\r\n    } else if (from === \"i32\" || from === \"x32\") {\r\n        if (to === \"f32\") {\r\n            _i32[0] = v;\r\n            return _i32_f32[0];\r\n        } else if (to === \"u32\") {\r\n            _i32[0] = v;\r\n            return _i32_u32[0];\r\n        }\r\n    } else if (from === \"u32\") {\r\n        if (to === \"f32\") {\r\n            _u32[0] = v;\r\n            return _u32_f32[0];\r\n        } else if (to === \"i32\" || to === \"x32\") {\r\n            _u32[0] = v;\r\n            return _u32_i32[0];\r\n        }\r\n    }\r\n\r\n    console.error(`Unsupported cast from ${from} to ${to}`);\r\n    return v;\r\n}\r\n\r\nexport function castVector(v: number[], from: string, to: string): number[] {\r\n    if (from === to) {\r\n        return v;\r\n    }\r\n\r\n    const cast = new Array<number>(v.length);\r\n    for (let i = 0; i < v.length; i++) {\r\n        cast[i] = castScalar(v[i], from, to);\r\n    }\r\n\r\n    return cast;\r\n}\r\n","/**\r\n * @author Brendan Duncan / https://github.com/brendan-duncan\r\n */\r\nimport { TokenTypes } from \"../wgsl_scanner.js\";\r\nimport { Type, Struct, Alias, Override, Var, Node, Function, VariableExpr, CreateExpr,\r\n    Let, CallExpr, Call, Argument, Member, Attribute, ArrayType, SamplerType, TemplateType, \r\n    PointerType } from \"../wgsl_ast.js\";\r\nimport { _BlockStart, _BlockEnd } from \"../wgsl_ast.js\";\r\nimport { FunctionInfo, VariableInfo, AliasInfo, OverrideInfo, PointerInfo,\r\n  StructInfo, TypeInfo, MemberInfo, ArrayInfo, TemplateInfo, OutputInfo,\r\n  InputInfo, ArgumentInfo, ResourceType, EntryFunctions } from \"./info.js\";\r\nimport { isArray } from \"../utils/cast.js\";\r\n \r\nclass _FunctionResources {\r\n  node: Function;\r\n  resources: VariableInfo[] | null = null;\r\n  inUse: boolean = false;\r\n  info: FunctionInfo | null = null;\r\n  constructor(node: Function) {\r\n    this.node = node;\r\n  }\r\n}\r\n\r\nclass _TypeSize {\r\n  align: number;\r\n  size: number;\r\n\r\n  constructor(align: number, size: number) {\r\n    this.align = align;\r\n    this.size = size;\r\n  }\r\n}\r\n\r\nexport class Reflect {\r\n  /// All top-level uniform vars in the shader.\r\n  uniforms: VariableInfo[] = [];\r\n  /// All top-level storage vars in the shader.\r\n  storage: VariableInfo[] = [];\r\n  /// All top-level texture vars in the shader;\r\n  textures: VariableInfo[] = [];\r\n  // All top-level sampler vars in the shader.\r\n  samplers: VariableInfo[] = [];\r\n  /// All top-level type aliases in the shader.\r\n  aliases: AliasInfo[] = [];\r\n  /// All top-level overrides in the shader.\r\n  overrides: OverrideInfo[] = [];\r\n  /// All top-level structs in the shader.\r\n  structs: StructInfo[] = [];\r\n  /// All entry functions in the shader: vertex, fragment, and/or compute.\r\n  entry: EntryFunctions = new EntryFunctions();\r\n  /// All functions in the shader, including entry functions.\r\n  functions: FunctionInfo[] = [];\r\n\r\n  _types: Map<Type, TypeInfo> = new Map();\r\n  _functions: Map<string, _FunctionResources> = new Map();\r\n\r\n  _isStorageTexture(type: TypeInfo): boolean {\r\n    return (\r\n      type.name == \"texture_storage_1d\" ||\r\n      type.name == \"texture_storage_2d\" ||\r\n      type.name == \"texture_storage_2d_array\" ||\r\n      type.name == \"texture_storage_3d\"\r\n    );\r\n  }\r\n\r\n  updateAST(ast: Node[]): void {\r\n    for (const node of ast) {\r\n      if (node instanceof Function) {\r\n        this._functions.set(node.name, new _FunctionResources(node as Function));\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof Struct) {\r\n        const info = this.getTypeInfo(node as Struct, null);\r\n        if (info instanceof StructInfo) {\r\n          this.structs.push(info as StructInfo);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof Alias) {\r\n        this.aliases.push(this._getAliasInfo(node as Alias));\r\n        continue;\r\n      }\r\n\r\n      if (node instanceof Override) {\r\n        const v = node as Override;\r\n        const id = this._getAttributeNum(v.attributes, \"id\", 0);\r\n        const type = v.type != null ? this.getTypeInfo(v.type, v.attributes) : null;\r\n        this.overrides.push(new OverrideInfo(v.name, type, v.attributes, id));\r\n        continue;\r\n      }\r\n\r\n      if (this._isUniformVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Uniform, v.access);\r\n        if (!varInfo.access) {\r\n          varInfo.access = \"read\";\r\n        }\r\n        this.uniforms.push(varInfo);\r\n        continue;\r\n      }\r\n\r\n      if (this._isStorageVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const isStorageTexture = this._isStorageTexture(type);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Storage, v.access);\r\n        if (!varInfo.access) {\r\n          varInfo.access = \"read\";\r\n        }\r\n        this.storage.push(varInfo);\r\n        continue;\r\n      }\r\n\r\n      if (this._isTextureVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const isStorageTexture = this._isStorageTexture(type);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, \r\n            isStorageTexture ? ResourceType.StorageTexture : ResourceType.Texture, v.access);\r\n        if (!varInfo.access) {\r\n          varInfo.access = \"read\";\r\n        }\r\n        if (isStorageTexture) {\r\n          this.storage.push(varInfo);\r\n        } else {\r\n          this.textures.push(varInfo);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (this._isSamplerVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Sampler, v.access);\r\n        this.samplers.push(varInfo);\r\n        continue;\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof Function) {\r\n        const vertexStage = this._getAttribute(node, \"vertex\");\r\n        const fragmentStage = this._getAttribute(node, \"fragment\");\r\n        const computeStage = this._getAttribute(node, \"compute\");\r\n        const stage = vertexStage || fragmentStage || computeStage;\r\n\r\n        const fn = new FunctionInfo(node.name, stage?.name, node.attributes);\r\n        fn.attributes = node.attributes;\r\n        fn.startLine = node.startLine;\r\n        fn.endLine = node.endLine;\r\n        this.functions.push(fn);\r\n        this._functions.get(node.name)!.info = fn;\r\n\r\n        if (stage) {\r\n          this._functions.get(node.name)!.inUse = true;\r\n          fn.inUse = true;\r\n          fn.resources = this._findResources(node, !!stage);\r\n          fn.inputs = this._getInputs(node.args);\r\n          fn.outputs = this._getOutputs(node.returnType);\r\n          this.entry[stage.name].push(fn);\r\n        }\r\n\r\n        fn.arguments = node.args.map(\r\n          (arg) => new ArgumentInfo(arg.name, this.getTypeInfo(arg.type, arg.attributes), arg.attributes)\r\n        );\r\n\r\n        fn.returnType = node.returnType ? this.getTypeInfo(node.returnType, node.attributes) : null;\r\n\r\n        continue;\r\n      }\r\n    }\r\n\r\n    for (const fn of this._functions.values()) {\r\n      if (fn.info) {\r\n        fn.info.inUse = fn.inUse;\r\n        this._addCalls(fn.node, fn.info.calls);\r\n      }\r\n    }\r\n\r\n    for (const fn of this._functions.values()) {\r\n      fn.node.search((node) => {\r\n        if (node instanceof Attribute) {\r\n          if (node.value) {\r\n            if (isArray(node.value)) {\r\n              for (const value of node.value) {\r\n                for (const override of this.overrides) {\r\n                  if (value === override.name) {\r\n                    fn.info?.overrides.push(override);\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              for (const override of this.overrides) {\r\n                if (node.value === override.name) {\r\n                  fn.info?.overrides.push(override);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else if (node instanceof VariableExpr) {\r\n          for (const override of this.overrides) {\r\n            if (node.name === override.name) {\r\n              fn.info?.overrides.push(override);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      this._markStructsInUse(u.type);\r\n    }\r\n    for (const s of this.storage) {\r\n      this._markStructsInUse(s.type);\r\n    }\r\n  }\r\n\r\n  getFunctionInfo(name: string): FunctionInfo | null {\r\n    for (const fn of this.functions) {\r\n      if (fn.name == name) {\r\n        return fn;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getStructInfo(name: string): StructInfo | null {\r\n    for (const s of this.structs) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getOverrideInfo(name: string): OverrideInfo | null {\r\n    for (const o of this.overrides) {\r\n      if (o.name == name) {\r\n        return o;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _markStructsInUse(type: TypeInfo) {\r\n    if (!type) {\r\n      return;\r\n    }\r\n    if (type.isStruct) {\r\n      (type as StructInfo).inUse = true;\r\n      if ((type as StructInfo).members) {\r\n        for (const m of (type as StructInfo).members) {\r\n          this._markStructsInUse(m.type);\r\n        }\r\n      }\r\n    } else if (type.isArray) {\r\n      this._markStructsInUse((type as ArrayInfo).format);\r\n    } else if (type.isTemplate) {\r\n      if ((type as TemplateInfo).format) {\r\n        this._markStructsInUse((type as TemplateInfo).format!);\r\n      }\r\n    } else {\r\n      const alias = this._getAlias(type.name);\r\n      if (alias) {\r\n        this._markStructsInUse(alias);\r\n      }\r\n    }\r\n  }\r\n\r\n  _addCalls(fn: Function, calls: Set<FunctionInfo>, ) {\r\n    for (const call of fn.calls) {\r\n      const info = this._functions.get(call.name)?.info;\r\n      if (info) {\r\n        calls.add(info);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// Find a resource by its group and binding.\r\n  findResource(group: number, binding: number, entry?: string) {\r\n    if (entry) {\r\n      for (const fn of this.entry.compute) {\r\n        if (fn.name === entry) {\r\n          for (const r of fn.resources) {\r\n            if (r.group == group && r.binding == binding) {\r\n              return r;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (const fn of this.entry.vertex) {\r\n        if (fn.name === entry) {\r\n          for (const r of fn.resources) {\r\n            if (r.group == group && r.binding == binding) {\r\n              return r;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (const fn of this.entry.fragment) {\r\n        if (fn.name === entry) {\r\n          for (const r of fn.resources) {\r\n            if (r.group == group && r.binding == binding) {\r\n              return r;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      if (u.group == group && u.binding == binding) {\r\n        return u;\r\n      }\r\n    }\r\n    for (const s of this.storage) {\r\n      if (s.group == group && s.binding == binding) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const t of this.textures) {\r\n      if (t.group == group && t.binding == binding) {\r\n        return t;\r\n      }\r\n    }\r\n    for (const s of this.samplers) {\r\n      if (s.group == group && s.binding == binding) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _findResource(name: string): VariableInfo | null {\r\n    for (const u of this.uniforms) {\r\n      if (u.name == name) {\r\n        return u;\r\n      }\r\n    }\r\n    for (const s of this.storage) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const t of this.textures) {\r\n      if (t.name == name) {\r\n        return t;\r\n      }\r\n    }\r\n    for (const s of this.samplers) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  _markStructsFromAST(type: Type) {\r\n    const info = this.getTypeInfo(type, null);\r\n    this._markStructsInUse(info);\r\n  }\r\n\r\n  _findResources(fn: Node, isEntry: boolean): VariableInfo[] {\r\n    const resources: any[] = [];\r\n    const self = this;\r\n    const varStack: any[] = [];\r\n    fn.search((node) => {\r\n      if (node instanceof _BlockStart) {\r\n        varStack.push({});\r\n      } else if (node instanceof _BlockEnd) {\r\n        varStack.pop();\r\n      } else if (node instanceof Var) {\r\n        const v = node as Var;\r\n        if (isEntry && v.type !== null) {\r\n          this._markStructsFromAST(v.type);\r\n        }\r\n        if (varStack.length > 0) {\r\n          varStack[varStack.length - 1][v.name] = v;\r\n        }\r\n      } else if (node instanceof CreateExpr) {\r\n        const c = node as CreateExpr;\r\n        if (isEntry && c.type !== null) {\r\n          this._markStructsFromAST(c.type);\r\n        }\r\n      } else if (node instanceof Let) {\r\n        const v = node as Let;\r\n        if (isEntry && v.type !== null) {\r\n          this._markStructsFromAST(v.type);\r\n        }\r\n        if (varStack.length > 0) {\r\n          varStack[varStack.length - 1][v.name] = v;\r\n        }\r\n      } else if (node instanceof VariableExpr) {\r\n        const v = node as VariableExpr;\r\n        // Check to see if the variable is a local variable before checking to see if it's\r\n        // a resource.\r\n        if (varStack.length > 0) {\r\n          const varInfo = varStack[varStack.length - 1][v.name];\r\n          if (varInfo) {\r\n            return;\r\n          }\r\n        }\r\n        const varInfo = self._findResource(v.name);\r\n        if (varInfo) {\r\n          resources.push(varInfo);\r\n        }\r\n      } else if (node instanceof CallExpr) {\r\n        const c = node as CallExpr;\r\n        const callFn = self._functions.get(c.name);\r\n        if (callFn) {\r\n          if (isEntry) {\r\n            callFn.inUse = true;\r\n          }\r\n          (fn as Function).calls.add(callFn.node);\r\n          if (callFn.resources === null) {\r\n            callFn.resources = self._findResources(callFn.node, isEntry);\r\n          }\r\n          resources.push(...callFn.resources);\r\n        }\r\n        if (c.name === \"textureSample\") {\r\n          if (c.args.length >= 2) {\r\n            const textureArg = c.args[0];\r\n            let texture = null;\r\n            if (textureArg instanceof VariableExpr) {\r\n              const varInfo = self._findResource(textureArg.name);\r\n              if (varInfo && varInfo.resourceType === ResourceType.Texture) {\r\n                texture = varInfo;\r\n              }\r\n            }\r\n            const samplerArg = c.args[1];\r\n            let sampler = null;\r\n            if (samplerArg instanceof VariableExpr) {\r\n              const varInfo = self._findResource(samplerArg.name);\r\n              if (varInfo && varInfo.resourceType === ResourceType.Sampler) {\r\n                sampler = varInfo;\r\n              }\r\n            }\r\n\r\n            if (texture && sampler) {\r\n              if (texture.relations === null) {\r\n                texture.relations = [];\r\n              }\r\n              texture.relations.push(sampler);\r\n\r\n              if (sampler.relations === null) {\r\n                sampler.relations = [];\r\n              }\r\n              sampler.relations.push(texture);\r\n            }\r\n          }\r\n        }\r\n      } else if (node instanceof Call) {\r\n        const c = node as Call;\r\n        const callFn = self._functions.get(c.name);\r\n        if (callFn) {\r\n          if (isEntry) {\r\n            callFn.inUse = true;\r\n          }\r\n          (fn as Function).calls.add(callFn.node);\r\n          if (callFn.resources === null) {\r\n            callFn.resources = self._findResources(callFn.node, isEntry);\r\n          }\r\n          resources.push(...callFn.resources);\r\n        }\r\n      }\r\n    });\r\n    return [...new Map(resources.map(r => [r.name, r])).values()];\r\n  }\r\n\r\n  getBindGroups(): Array<VariableInfo[]> {\r\n    const groups: Array<VariableInfo[]> = [];\r\n\r\n    function _makeRoom(group: number, binding: number) {\r\n      if (group >= groups.length) {\r\n        groups.length = group + 1;\r\n      }\r\n\r\n      if (groups[group] === undefined) {\r\n        groups[group] = [];\r\n      }\r\n\r\n      if (binding >= groups[group].length) {\r\n        groups[group].length = binding + 1;\r\n      }\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      _makeRoom(u.group, u.binding);\r\n      const group = groups[u.group];\r\n      group[u.binding] = u;\r\n    }\r\n\r\n    for (const u of this.storage) {\r\n      _makeRoom(u.group, u.binding);\r\n      const group = groups[u.group];\r\n      group[u.binding] = u;\r\n    }\r\n\r\n    for (const t of this.textures) {\r\n      _makeRoom(t.group, t.binding);\r\n      const group = groups[t.group];\r\n      group[t.binding] = t;\r\n    }\r\n\r\n    for (const t of this.samplers) {\r\n      _makeRoom(t.group, t.binding);\r\n      const group = groups[t.group];\r\n      group[t.binding] = t;\r\n    }\r\n\r\n    return groups;\r\n  }\r\n\r\n  _getOutputs(\r\n    type: Type,\r\n    outputs: OutputInfo[] | undefined = undefined\r\n  ): OutputInfo[] {\r\n    if (outputs === undefined) {\r\n      outputs = [];\r\n    }\r\n\r\n    if (type instanceof Struct) {\r\n      this._getStructOutputs(type, outputs);\r\n    } else {\r\n      const output = this._getOutputInfo(type);\r\n      if (output !== null) {\r\n        outputs.push(output);\r\n      }\r\n    }\r\n\r\n    return outputs;\r\n  }\r\n\r\n  _getStructOutputs(struct: Struct, outputs: OutputInfo[]) {\r\n    for (const m of struct.members) {\r\n      if (m.type instanceof Struct) {\r\n        this._getStructOutputs(m.type, outputs);\r\n      } else {\r\n        const location =\r\n          this._getAttribute(m, \"location\") || this._getAttribute(m, \"builtin\");\r\n        if (location !== null) {\r\n          const typeInfo = this.getTypeInfo(m.type, m.type.attributes);\r\n          const locationValue = this._parseInt(location.value);\r\n          const info = new OutputInfo(\r\n            m.name,\r\n            typeInfo,\r\n            location.name,\r\n            locationValue\r\n          );\r\n          outputs.push(info);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _getOutputInfo(type: Type): OutputInfo | null {\r\n    const location =\r\n      this._getAttribute(type, \"location\") ||\r\n      this._getAttribute(type, \"builtin\");\r\n    if (location !== null) {\r\n      const typeInfo = this.getTypeInfo(type, type.attributes);\r\n      const locationValue = this._parseInt(location.value);\r\n      const info = new OutputInfo(\"\", typeInfo, location.name, locationValue);\r\n      return info;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getInputs(\r\n    args: Argument[],\r\n    inputs: InputInfo[] | undefined = undefined\r\n  ): InputInfo[] {\r\n    if (inputs === undefined) {\r\n      inputs = [];\r\n    }\r\n\r\n    for (const arg of args) {\r\n      if (arg.type instanceof Struct) {\r\n        this._getStructInputs(arg.type, inputs);\r\n      } else {\r\n        const input = this._getInputInfo(arg);\r\n        if (input !== null) {\r\n          inputs.push(input);\r\n        }\r\n      }\r\n    }\r\n\r\n    return inputs;\r\n  }\r\n\r\n  _getStructInputs(struct: Struct, inputs: InputInfo[]) {\r\n    for (const m of struct.members) {\r\n      if (m.type instanceof Struct) {\r\n        this._getStructInputs(m.type, inputs);\r\n      } else {\r\n        const input = this._getInputInfo(m);\r\n        if (input !== null) {\r\n          inputs.push(input);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _getInputInfo(node: Member | Argument): InputInfo | null {\r\n    const location =\r\n      this._getAttribute(node, \"location\") ||\r\n      this._getAttribute(node, \"builtin\");\r\n    if (location !== null) {\r\n      const interpolation = this._getAttribute(node, \"interpolation\");\r\n      const type = this.getTypeInfo(node.type, node.attributes);\r\n      const locationValue = this._parseInt(location.value);\r\n      const info = new InputInfo(node.name, type, location.name, locationValue);\r\n      if (interpolation !== null) {\r\n        info.interpolation = this._parseString(interpolation.value);\r\n      }\r\n      return info;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _parseString(s: string | string[]): string {\r\n    if (s instanceof Array) {\r\n      s = s[0];\r\n    }\r\n    return s;\r\n  }\r\n\r\n  _parseInt(s: string | string[]): number | string {\r\n    if (s instanceof Array) {\r\n      s = s[0];\r\n    }\r\n    const n = parseInt(s);\r\n    return isNaN(n) ? s : n;\r\n  }\r\n\r\n  _getAlias(name: string): TypeInfo | null {\r\n    for (const a of this.aliases) {\r\n      if (a.name == name) {\r\n        return a.type;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getAliasInfo(node: Alias): AliasInfo {\r\n    return new AliasInfo(node.name, this.getTypeInfo(node.type!, null));\r\n  }\r\n\r\n  getTypeInfoByName(name: string): TypeInfo | null {\r\n    for (const s of this.structs) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const a of this.aliases) {\r\n      if (a.name == name) {\r\n        return a.type;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getTypeInfo(type: Type, attributes: Attribute[] | null = null): TypeInfo {\r\n    if (this._types.has(type)) {\r\n      return this._types.get(type)!;\r\n    }\r\n\r\n    if (type instanceof PointerType) {\r\n      const t = type.type ? this.getTypeInfo(type.type!, type.attributes) : null;\r\n      const info = new PointerInfo(type.name, t, attributes);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof ArrayType) {\r\n      const a = type as ArrayType;\r\n      const t = a.format ? this.getTypeInfo(a.format!, a.attributes) : null;\r\n      const info = new ArrayInfo(a.name, attributes);\r\n      info.format = t;\r\n      info.count = a.count;\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof Struct) {\r\n      const s = type as Struct;\r\n      const info = new StructInfo(s.name, attributes);\r\n      info.startLine = s.startLine;\r\n      info.endLine = s.endLine;\r\n      for (const m of s.members) {\r\n        const t = this.getTypeInfo(m.type!, m.attributes);\r\n        info.members.push(new MemberInfo(m.name, t, m.attributes));\r\n      }\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof SamplerType) {\r\n      const s = type as SamplerType;\r\n      const formatIsType = s.format instanceof Type;\r\n      const format = s.format\r\n        ? formatIsType\r\n          ? this.getTypeInfo(s.format! as Type, null)\r\n          : new TypeInfo(s.format! as string, null)\r\n        : null;\r\n      const info = new TemplateInfo(s.name, format, attributes, s.access);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof TemplateType) {\r\n      const t = type as TemplateType;\r\n      const format = t.format ? this.getTypeInfo(t.format!, null) : null;\r\n      const info = new TemplateInfo(t.name, format, attributes, t.access);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    const info = new TypeInfo(type.name, attributes);\r\n    this._types.set(type, info);\r\n    this._updateTypeInfo(info);\r\n    return info;\r\n  }\r\n\r\n  _updateTypeInfo(type: TypeInfo) {\r\n    const typeSize = this._getTypeSize(type);\r\n    type.size = typeSize?.size ?? 0;\r\n\r\n    if (type instanceof ArrayInfo) {\r\n      if (type[\"format\"]) {\r\n        const formatInfo = this._getTypeSize(type[\"format\"]);\r\n        // Array stride is the maximum of the format size and alignment.\r\n        // In the case of a vec3f, the size is 12 bytes, but the alignment is 16 bytes.\r\n        // Buffer alignment is therefore 16 bytes.\r\n        type.stride = Math.max(formatInfo?.size ?? 0, formatInfo?.align ?? 0);\r\n        this._updateTypeInfo(type[\"format\"]);\r\n      }\r\n    }\r\n\r\n    if (type instanceof PointerInfo) {\r\n      this._updateTypeInfo(type[\"format\"]);\r\n    }\r\n\r\n    if (type instanceof StructInfo) {\r\n      this._updateStructInfo(type);\r\n    }\r\n  }\r\n\r\n  _updateStructInfo(struct: StructInfo) {\r\n    let offset = 0;\r\n    let lastSize = 0;\r\n    let lastOffset = 0;\r\n    let structAlign = 0;\r\n\r\n    for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\r\n      const member = struct.members[mi];\r\n\r\n      const sizeInfo = this._getTypeSize(member);\r\n      if (!sizeInfo) {\r\n        continue;\r\n      }\r\n\r\n      const type = this._getAlias(member.type.name) ?? member.type;\r\n      const align = sizeInfo.align;\r\n      const size = sizeInfo.size;\r\n      offset = this._roundUp(align, offset + lastSize);\r\n      lastSize = size;\r\n      lastOffset = offset;\r\n      structAlign = Math.max(structAlign, align);\r\n\r\n      member.offset = offset;\r\n      member.size = size;\r\n\r\n      this._updateTypeInfo(member.type);\r\n    }\r\n\r\n    struct.size = this._roundUp(structAlign, lastOffset + lastSize);\r\n    struct.align = structAlign;\r\n  }\r\n\r\n  _getTypeSize(\r\n    type: TypeInfo | MemberInfo | null | undefined\r\n  ): _TypeSize | null {\r\n    if (type === null || type === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const explicitSize = this._getAttributeNum(type.attributes, \"size\", 0);\r\n    const explicitAlign = this._getAttributeNum(type.attributes, \"align\", 0);\r\n\r\n    if (type instanceof MemberInfo) {\r\n      type = type.type;\r\n    }\r\n\r\n    if (type instanceof TypeInfo) {\r\n      const alias = this._getAlias(type.name);\r\n      if (alias !== null) {\r\n        type = alias;\r\n      }\r\n    }\r\n\r\n    {\r\n      const info = Reflect._typeInfo[type.name];\r\n      if (info !== undefined) {\r\n        const divisor = type[\"format\"]?.name === \"f16\" ? 2 : 1;\r\n        return new _TypeSize(\r\n          Math.max(explicitAlign, info.align / divisor),\r\n          Math.max(explicitSize, info.size / divisor)\r\n        );\r\n      }\r\n    }\r\n\r\n    {\r\n      const info =\r\n        Reflect._typeInfo[type.name.substring(0, type.name.length - 1)];\r\n      if (info) {\r\n        const divisor = type.name[type.name.length - 1] === \"h\" ? 2 : 1;\r\n        return new _TypeSize(\r\n          Math.max(explicitAlign, info.align / divisor),\r\n          Math.max(explicitSize, info.size / divisor)\r\n        );\r\n      }\r\n    }\r\n\r\n    if (type instanceof ArrayInfo) {\r\n      let arrayType = type as ArrayInfo;\r\n      let align = 8;\r\n      let size = 8;\r\n      // Type                 AlignOf(T)          Sizeof(T)\r\n      // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\r\n      // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\r\n      //\r\n      // @stride(Q)\r\n      // array<E, N>          AlignOf(E)          N * Q\r\n      //\r\n      // @stride(Q)\r\n      // array<E>             AlignOf(E)          Nruntime * Q\r\n      //const E = type.format.name;\r\n      const E = this._getTypeSize(arrayType.format);\r\n      if (E !== null) {\r\n        size = E.size;\r\n        align = E.align;\r\n      }\r\n\r\n      const N = arrayType.count;\r\n\r\n      const stride = this._getAttributeNum(\r\n        type?.attributes ?? null,\r\n        \"stride\",\r\n        this._roundUp(align, size)\r\n      );\r\n      size = N * stride;\r\n\r\n      if (explicitSize) {\r\n        size = explicitSize;\r\n      }\r\n\r\n      return new _TypeSize(\r\n        Math.max(explicitAlign, align),\r\n        Math.max(explicitSize, size)\r\n      );\r\n    }\r\n\r\n    if (type instanceof StructInfo) {\r\n      let align = 0;\r\n      let size = 0;\r\n      // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\r\n      //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\r\n      //                          Where L is the last member of the structure\r\n      let offset = 0;\r\n      let lastSize = 0;\r\n      let lastOffset = 0;\r\n      for (const m of type.members) {\r\n        const mi = this._getTypeSize(m.type);\r\n        if (mi !== null) {\r\n          align = Math.max(mi.align, align);\r\n          offset = this._roundUp(mi.align, offset + lastSize);\r\n          lastSize = mi.size;\r\n          lastOffset = offset;\r\n        }\r\n      }\r\n      size = this._roundUp(align, lastOffset + lastSize);\r\n\r\n      return new _TypeSize(\r\n        Math.max(explicitAlign, align),\r\n        Math.max(explicitSize, size)\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _isUniformVar(node: Node): boolean {\r\n    return node instanceof Var && node.storage == \"uniform\";\r\n  }\r\n\r\n  _isStorageVar(node: Node): boolean {\r\n    return node instanceof Var && node.storage == \"storage\";\r\n  }\r\n\r\n  _isTextureVar(node: Node): boolean {\r\n    return (\r\n      node instanceof Var &&\r\n      node.type !== null &&\r\n      Reflect._textureTypes.indexOf(node.type.name) != -1\r\n    );\r\n  }\r\n\r\n  _isSamplerVar(node: Node): boolean {\r\n    return (\r\n      node instanceof Var &&\r\n      node.type !== null &&\r\n      Reflect._samplerTypes.indexOf(node.type.name) != -1\r\n    );\r\n  }\r\n\r\n  _getAttribute(node: Node, name: string): Attribute | null {\r\n    const obj = node as Object;\r\n    if (!obj || !obj[\"attributes\"]) {\r\n      return null;\r\n    }\r\n    const attrs = obj[\"attributes\"];\r\n    for (let a of attrs) {\r\n      if (a.name == name) {\r\n        return a;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getAttributeNum(\r\n    attributes: Attribute[] | null,\r\n    name: string,\r\n    defaultValue: number\r\n  ): number {\r\n    if (attributes === null) {\r\n      return defaultValue;\r\n    }\r\n    for (let a of attributes) {\r\n      if (a.name == name) {\r\n        let v = a !== null && a.value !== null ? a.value : defaultValue;\r\n        if (v instanceof Array) {\r\n          v = v[0];\r\n        }\r\n        if (typeof v === \"number\") {\r\n          return v;\r\n        }\r\n        if (typeof v === \"string\") {\r\n          return parseInt(v);\r\n        }\r\n        return defaultValue;\r\n      }\r\n    }\r\n    return defaultValue;\r\n  }\r\n\r\n  _roundUp(k: number, n: number): number {\r\n    return Math.ceil(n / k) * k;\r\n  }\r\n\r\n  // Type                 AlignOf(T)          Sizeof(T)\r\n  // i32, u32, or f32     4                   4\r\n  // atomic<T>            4                   4\r\n  // vec2<T>              8                   8\r\n  // vec3<T>              16                  12\r\n  // vec4<T>              16                  16\r\n  // mat2x2<f32>          8                   16\r\n  // mat3x2<f32>          8                   24\r\n  // mat4x2<f32>          8                   32\r\n  // mat2x3<f32>          16                  32\r\n  // mat3x3<f32>          16                  48\r\n  // mat4x3<f32>          16                  64\r\n  // mat2x4<f32>          16                  32\r\n  // mat3x4<f32>          16                  48\r\n  // mat4x4<f32>          16                  64\r\n  static readonly _typeInfo = {\r\n    f16: { align: 2, size: 2 },\r\n    i32: { align: 4, size: 4 },\r\n    u32: { align: 4, size: 4 },\r\n    f32: { align: 4, size: 4 },\r\n    atomic: { align: 4, size: 4 },\r\n    vec2: { align: 8, size: 8 },\r\n    vec3: { align: 16, size: 12 },\r\n    vec4: { align: 16, size: 16 },\r\n    mat2x2: { align: 8, size: 16 },\r\n    mat3x2: { align: 8, size: 24 },\r\n    mat4x2: { align: 8, size: 32 },\r\n    mat2x3: { align: 16, size: 32 },\r\n    mat3x3: { align: 16, size: 48 },\r\n    mat4x3: { align: 16, size: 64 },\r\n    mat2x4: { align: 16, size: 32 },\r\n    mat3x4: { align: 16, size: 48 },\r\n    mat4x4: { align: 16, size: 64 },\r\n  };\r\n\r\n  static readonly _textureTypes = TokenTypes.any_texture_type.map((t) => {\r\n    return t.name;\r\n  });\r\n\r\n  static readonly _samplerTypes = TokenTypes.sampler_type.map((t) => {\r\n    return t.name;\r\n  });\r\n}\r\n","import { Let, Var, Argument, Function } from \"../wgsl_ast.js\";\r\nimport { Data } from \"../wgsl_ast.js\";\r\n\r\ntype ASTVarNode = Let | Var | Argument;\r\n\r\nlet _id = 0;\r\n\r\nexport class VarRef {\r\n    name: string;\r\n    value: Data;\r\n    node: ASTVarNode | null;\r\n    readonly id: number = _id++;\r\n\r\n    constructor(n: string, v: Data, node: ASTVarNode | null) {\r\n        this.name = n;\r\n        this.value = v;\r\n        this.node = node;\r\n    }\r\n\r\n    clone(): VarRef {\r\n        return new VarRef(this.name, this.value, this.node);\r\n    }\r\n};\r\n\r\nexport class FunctionRef {\r\n    name: string;\r\n    node: Function;\r\n    readonly id: number = _id++;\r\n\r\n    constructor(node: Function) {\r\n        this.name = node.name;\r\n        this.node = node;\r\n    }\r\n\r\n    clone(): FunctionRef {\r\n        return new FunctionRef(this.node);\r\n    }\r\n};\r\n\r\nexport class ExecContext {\r\n    parent: ExecContext | null = null;\r\n    variables = new Map<string, VarRef>();\r\n    functions = new Map<string, FunctionRef>();\r\n    currentFunctionName = \"\";\r\n    readonly id: number = _id++;\r\n\r\n    constructor(parent?: ExecContext) {\r\n        if (parent) {\r\n            this.parent = parent;\r\n            this.currentFunctionName = parent.currentFunctionName;\r\n        }\r\n    }\r\n\r\n    getVariable(name: string): VarRef | null {\r\n        if (this.variables.has(name)) {\r\n            return this.variables.get(name) ?? null;\r\n        }\r\n        if (this.parent) {\r\n            return this.parent.getVariable(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getFunction(name: string): FunctionRef | null {\r\n        if (this.functions.has(name)) {\r\n            return this.functions.get(name) ?? null;\r\n        }\r\n        if (this.parent) {\r\n            return this.parent.getFunction(name);\r\n        }\r\n        return null\r\n    }\r\n\r\n    createVariable(name: string, value: Data, node?: ASTVarNode) {\r\n        this.variables.set(name, new VarRef(name, value, node ?? null));\r\n    }\r\n\r\n    setVariable(name: string, value: Data, node?: ASTVarNode) {\r\n        const v = this.getVariable(name);\r\n        if (v !== null) {\r\n            v.value = value;\r\n        } else {\r\n            this.createVariable(name, value, node);\r\n        }\r\n    }\r\n\r\n    getVariableValue(name: string): Data | null {\r\n        const v = this.getVariable(name);\r\n        return v?.value ?? null;\r\n    }\r\n\r\n    clone(): ExecContext {\r\n        return new ExecContext(this);\r\n    }\r\n};\r\n","import { Node, Type } from \"../wgsl_ast.js\";\r\nimport { ExecContext } from \"./exec_context.js\";\r\nimport { TypeInfo } from \"../wgsl_reflect.js\";\r\nimport { Data } from \"../wgsl_ast.js\";\r\n\r\nexport class ExecInterface {\r\n    evalExpression(node: Node, context: ExecContext): Data | null {\r\n        return null;\r\n    }\r\n\r\n    getTypeInfo(type: Type | string): TypeInfo | null {\r\n        return null; \r\n    }\r\n\r\n    getVariableName(node: Node, context: ExecContext): string | null {\r\n        return \"\";\r\n    }\r\n}\r\n","import { CallExpr, Call, UnaryOperator, VariableExpr } from \"../wgsl_ast.js\";\r\nimport { Data, TypedData, TextureData, ScalarData, VectorData, MatrixData } from \"../wgsl_ast.js\";\r\nimport { ExecContext } from \"./exec_context.js\";\r\nimport { ExecInterface } from \"./exec_interface.js\";\r\nimport { ArrayInfo, TypeInfo } from \"../reflect/info.js\";\r\n\r\nexport class BuiltinFunctions {\r\n    exec: ExecInterface;\r\n\r\n    constructor(exec: ExecInterface) {\r\n        this.exec = exec;\r\n    }\r\n\r\n    getTypeInfo(type: string): TypeInfo | null {\r\n        return this.exec.getTypeInfo(type);\r\n    }\r\n\r\n    // Logical Built-in Functions\r\n    All(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        let isTrue = true;\r\n        if (value instanceof VectorData) {\r\n            value.data.forEach((x: any) => { if (!x) isTrue = false; });\r\n            return new ScalarData(isTrue ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n        }\r\n        throw new Error(`All() expects a vector argument. Line ${node.line}`);\r\n    }\r\n\r\n    Any(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            const res = value.data.some((v: any) => v);\r\n            return new ScalarData(res ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n        }\r\n        throw new Error(`Any() expects a vector argument. Line ${node.line}`);\r\n    }\r\n\r\n    Select(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // select(false, true, condition)\r\n        const condition = this.exec.evalExpression(node.args[2], context);\r\n        if (!(condition instanceof ScalarData)) {\r\n            throw new Error(`Select() expects a bool condition. Line ${node.line}`);\r\n        }\r\n        if (!condition.value) {\r\n            return this.exec.evalExpression(node.args[0], context);\r\n        } else {\r\n            return this.exec.evalExpression(node.args[1], context);\r\n        }\r\n    }\r\n\r\n    // Array Built-in Functions\r\n    ArrayLength(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let arrayArg = node.args[0];\r\n        // TODO: handle \"&\" operator\r\n        if (arrayArg instanceof UnaryOperator) {\r\n            arrayArg = (arrayArg as UnaryOperator).right;\r\n        }\r\n        const arrayData = this.exec.evalExpression(arrayArg, context);\r\n        if (arrayData instanceof TypedData && arrayData.typeInfo.size === 0) {\r\n            const ta = arrayData.typeInfo as ArrayInfo;\r\n            const count = arrayData.buffer.byteLength / ta.stride;\r\n            return new ScalarData(count, this.getTypeInfo(\"u32\"));\r\n        }\r\n        return new ScalarData(arrayData.typeInfo.size, this.getTypeInfo(\"u32\"));\r\n    }\r\n\r\n    // Numeric Built-in Functions\r\n    Abs(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.abs(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.abs(s.value), s.typeInfo);\r\n    }\r\n\r\n    Acos(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.acos(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.acos(s.value), value.typeInfo);\r\n    }\r\n\r\n    Acosh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.acosh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.acosh(s.value), value.typeInfo);\r\n    }\r\n\r\n    Asin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.asin(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.asin(s.value), value.typeInfo);\r\n    }\r\n\r\n    Asinh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.asinh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.asinh(s.value), value.typeInfo);\r\n    }\r\n\r\n    Atan(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.atan(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.atan(s.value), value.typeInfo);\r\n    }\r\n\r\n    Atanh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.atanh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.atanh(s.value), value.typeInfo);\r\n    }\r\n\r\n    Atan2(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const y = this.exec.evalExpression(node.args[0], context);\r\n        const x = this.exec.evalExpression(node.args[1], context);\r\n        if (y instanceof VectorData && x instanceof VectorData) {\r\n            return new VectorData(y.data.map((v: number, i: number) => Math.atan2(v, x.data[i])), y.typeInfo);\r\n        }\r\n        const ys = y as ScalarData;\r\n        const xs = x as ScalarData;\r\n        return new ScalarData(Math.atan2(ys.value, xs.value), y.typeInfo);\r\n    }\r\n\r\n    Ceil(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.ceil(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.ceil(s.value), value.typeInfo);\r\n    }\r\n\r\n    _clamp(value: number, min: number, max: number): number {\r\n        return Math.min(Math.max(value, min), max);\r\n    }\r\n\r\n    Clamp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const min = this.exec.evalExpression(node.args[1], context);\r\n        const max = this.exec.evalExpression(node.args[2], context);\r\n        if (value instanceof VectorData && min instanceof VectorData && max instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number, i: number) => this._clamp(v, min.data[i], max.data[i])), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        const minS = min as ScalarData;\r\n        const maxS = max as ScalarData\r\n        return new ScalarData(this._clamp(s.value, minS.value, maxS.value), value.typeInfo);\r\n    }\r\n\r\n    Cos(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.cos(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.cos(s.value), value.typeInfo);\r\n    }\r\n\r\n    Cosh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.cosh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.cos(s.value), value.typeInfo);\r\n    }\r\n\r\n    CountLeadingZeros(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.clz32(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.clz32(s.value), value.typeInfo);\r\n    }\r\n\r\n    _countOneBits(value: number): number {\r\n        let count = 0;\r\n        while (value !== 0) {\r\n            if (value & 1) {\r\n                count++;\r\n            }\r\n            value >>= 1;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    CountOneBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._countOneBits(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._countOneBits(s.value), value.typeInfo);\r\n    }\r\n\r\n    _countTrailingZeros(value: number): number {\r\n        if (value === 0) {\r\n            return 32; // Special case for 0\r\n        }\r\n        let count = 0;\r\n        while ((value & 1) === 0) {\r\n            value >>= 1;\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    CountTrailingZeros(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._countTrailingZeros(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._countTrailingZeros(s.value), value.typeInfo);\r\n    }\r\n\r\n    Cross(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            if (l.data.length !== 3 || r.data.length !== 3) {\r\n                console.error(`Cross() expects 3D vectors. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            const lv = l.data;\r\n            const rv = r.data;\r\n            return new VectorData([\r\n                lv[1] * rv[2] - rv[1] * lv[2],\r\n                lv[2] * rv[0] - rv[2] * lv[0],\r\n                lv[0] * rv[1] - rv[0] * lv[1],\r\n            ], l.typeInfo);\r\n        }\r\n        console.error(`Cross() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Degrees(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const radToDeg = 180.0 / Math.PI;\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v * radToDeg), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value * radToDeg, this.getTypeInfo(\"f32\"));\r\n    }\r\n\r\n    Determinant(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const m = this.exec.evalExpression(node.args[0], context);\r\n        if (m instanceof MatrixData) {\r\n            const mv = m.data;\r\n            const mt = m.typeInfo.getTypeName();\r\n            const isHalf = mt.endsWith(\"h\");\r\n            const formatType = isHalf ? this.getTypeInfo(\"f16\") : this.getTypeInfo(\"f32\");\r\n            if (mt === \"mat2x2\" || mt === \"mat2x2f\" || mt === \"mat2x2h\") {\r\n                return new ScalarData(mv[0] * mv[3] - mv[1] * mv[2], formatType);\r\n            } else if (mt === \"mat2x3\" || mt === \"mat2x3f\" || mt === \"mat2x3h\") {\r\n                return new ScalarData(mv[0] * (mv[4] * mv[8] - mv[5] * mv[7]) -\r\n                        mv[1] * (mv[3] * mv[8] - mv[5] * mv[6]) + mv[2] * (mv[3] * mv[7] - mv[4] * mv[6]), formatType);\r\n            } else if (mt === \"mat2x4\" || mt === \"mat2x4f\" || mt === \"mat2x4h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat3x2\" || mt === \"mat3x2f\" || mt === \"mat3x2h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat3x3\" || mt === \"mat3x3f\" || mt === \"mat3x3h\") {\r\n                return new ScalarData(mv[0] * (mv[4] * mv[8] - mv[5] * mv[7]) -\r\n                        mv[1] * (mv[3] * mv[8] - mv[5] * mv[6]) + mv[2] * (mv[3] * mv[7] - mv[4] * mv[6]), formatType);\r\n            } else if (mt === \"mat3x4\" || mt === \"mat3x4f\" || mt === \"mat3x4h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat4x2\" || mt === \"mat4x2f\" || mt === \"mat4x2h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat4x3\" || mt === \"mat4x3f\" || mt === \"mat4x3h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat4x4\" || mt === \"mat4x4f\" || mt === \"mat4x4h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            }\r\n        }\r\n        console.error(`Determinant expects a matrix argument. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Distance(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            let sum = 0;\r\n            for (let i = 0; i < l.data.length; ++i) {\r\n                sum += (l.data[i] - r.data[i]) * (l.data[i] - r.data[i]);\r\n            }\r\n            return new ScalarData(Math.sqrt(sum), this.getTypeInfo(\"f32\"));\r\n        }\r\n        const ls = l as ScalarData;\r\n        const rs = r as ScalarData;\r\n        return new ScalarData(Math.abs(ls.value - rs.value), l.typeInfo);\r\n    }\r\n\r\n    _dot(e1: Int32Array | Uint32Array | Float32Array, e2: Int32Array | Uint32Array | Float32Array) {\r\n        let dot = 0;\r\n        for (let i = 0; i < e1.length; ++i) {\r\n            dot += e2[i] * e1[i];\r\n        }\r\n        return dot;\r\n    }\r\n\r\n    Dot(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            return new ScalarData(this._dot(l.data, r.data), this.getTypeInfo(\"f32\"));\r\n        }\r\n        console.error(`Dot() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Dot4U8Packed(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dot4U8Packed. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Dot4I8Packed(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dot4I8Packed. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Exp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.exp(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.exp(s.value), value.typeInfo);\r\n    }\r\n\r\n    Exp2(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.pow(2, v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.pow(2, s.value), value.typeInfo);\r\n    }\r\n\r\n    ExtractBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const offset = this.exec.evalExpression(node.args[1], context);\r\n        const count = this.exec.evalExpression(node.args[2], context);\r\n        if (offset.typeInfo.name !== \"u32\" && offset.typeInfo.name !== \"x32\") {\r\n            console.error(`ExtractBits() expects an i32 offset argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n        if (count.typeInfo.name !== \"u32\" && count.typeInfo.name !== \"x32\") {\r\n            console.error(`ExtractBits() expects an i32 count argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const o = (offset as ScalarData).value;\r\n        const c = (count as ScalarData).value;\r\n\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => (v >> o) & ((1 << c) - 1)), value.typeInfo);\r\n        }\r\n\r\n        if (value.typeInfo.name !== \"i32\" && value.typeInfo.name !== \"x32\") {\r\n            console.error(`ExtractBits() expects an i32 argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n        const v = (value as ScalarData).value;\r\n        return new ScalarData((v >> o) & ((1 << c) - 1), this.getTypeInfo(\"i32\"));\r\n    }\r\n\r\n    FaceForward(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const e1 = this.exec.evalExpression(node.args[0], context);\r\n        const e2 = this.exec.evalExpression(node.args[1], context);\r\n        const n = this.exec.evalExpression(node.args[2], context);\r\n        if (e1 instanceof VectorData && e2 instanceof VectorData && n instanceof VectorData) {\r\n            const dot = this._dot(e2.data, n.data);\r\n            if (dot < 0) {\r\n                return new VectorData(Array.from(e1.data), e1.typeInfo);\r\n            }\r\n            return new VectorData(e1.data.map((v: number) => -v), e1.typeInfo);\r\n        }\r\n        console.error(`FaceForward() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _firstLeadingBit(s: number): number {\r\n        if (s === 0) {\r\n            return -1;\r\n        }\r\n        return 31 - Math.clz32(s);  // clz32: count leading zeros\r\n    }\r\n\r\n    FirstLeadingBit(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._firstLeadingBit(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._firstLeadingBit(s.value), value.typeInfo);\r\n    }\r\n\r\n    _firstTrailingBit(s: number): number {\r\n        if (s === 0) {\r\n            return -1;\r\n        }\r\n        return Math.log2(s & -s); // n & -n isolates the lowest set bit.  Math.log2 gives its position.\r\n    }\r\n\r\n    FirstTrailingBit(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._firstTrailingBit(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._firstTrailingBit(s.value), value.typeInfo);\r\n    }\r\n\r\n    Floor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.floor(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.floor(s.value), value.typeInfo);\r\n    }\r\n\r\n    Fma(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const a = this.exec.evalExpression(node.args[0], context);\r\n        const b = this.exec.evalExpression(node.args[1], context);\r\n        const c = this.exec.evalExpression(node.args[2], context);\r\n        if (a instanceof VectorData && b instanceof VectorData && c instanceof VectorData) {\r\n            if (a.data.length !== b.data.length || a.data.length !== c.data.length) {\r\n                console.error(`Fma() expects vectors of the same length. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            return new VectorData(a.data.map((v: number, i: number) => v * b.data[i] + c.data[i]), a.typeInfo);\r\n        }\r\n        const av = a as ScalarData;\r\n        const bv = b as ScalarData;\r\n        const cv = c as ScalarData;\r\n        return new ScalarData(av.value * bv.value + cv.value, av.typeInfo);\r\n    }\r\n\r\n    Fract(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v - Math.floor(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value - Math.floor(s.value), value.typeInfo);\r\n    }\r\n\r\n    Frexp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: frexp. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    InsertBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const insert = this.exec.evalExpression(node.args[1], context);\r\n        const offset = this.exec.evalExpression(node.args[2], context);\r\n        const count = this.exec.evalExpression(node.args[3], context);\r\n\r\n        if (offset.typeInfo.name !== \"u32\" && offset.typeInfo.name !== \"x32\") {\r\n            console.error(`InsertBits() expects an i32 offset argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const o = (offset as ScalarData).value;\r\n        const c = (count as ScalarData).value;\r\n        const mask = ((1 << c) - 1) << o;\r\n        const invMask = ~mask;\r\n\r\n        if (value instanceof VectorData && insert instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number, i: number) => {\r\n                return (v & invMask) | ((insert.data[i] << o) & mask);\r\n            }), value.typeInfo);\r\n        }\r\n        const v = (value as ScalarData).value;\r\n        const i = (insert as ScalarData).value;\r\n        return new ScalarData((v & invMask) | ((i << o) & mask), value.typeInfo);\r\n    }\r\n\r\n    InverseSqrt(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => 1 / Math.sqrt(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(1 / Math.sqrt(s.value), value.typeInfo);\r\n    }\r\n\r\n    Ldexp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: ldexp. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Length(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            let sum = 0;\r\n            value.data.forEach((v: number) => { sum += v * v; });\r\n            return new ScalarData(Math.sqrt(sum), this.getTypeInfo(\"f32\"));\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.abs(s.value), value.typeInfo);\r\n    }\r\n\r\n    Log(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.log(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.log(s.value), value.typeInfo);\r\n    }\r\n\r\n    Log2(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.log2(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData\r\n        return new ScalarData(Math.log2(s.value), value.typeInfo);\r\n    }\r\n\r\n    Max(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            return new VectorData(l.data.map((v: number, i: number) => Math.max(v, r.data[i])), l.typeInfo);\r\n        }\r\n        const ls = l as ScalarData;\r\n        const rs = r as ScalarData;\r\n        return new ScalarData(Math.max(ls.value, rs.value), l.typeInfo);\r\n    }\r\n\r\n    Min(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            return new VectorData(l.data.map((v: number, i: number) => Math.min(v, r.data[i])), l.typeInfo);\r\n        }\r\n        const ls = l as ScalarData;\r\n        const rs = r as ScalarData;\r\n        return new ScalarData(Math.min(ls.value, rs.value), l.typeInfo);\r\n    }\r\n\r\n    Mix(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const x = this.exec.evalExpression(node.args[0], context);\r\n        const y = this.exec.evalExpression(node.args[1], context);\r\n        const a = this.exec.evalExpression(node.args[2], context);\r\n        if (x instanceof VectorData && y instanceof VectorData && a instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => x.data[i] * (1 - a.data[i]) + y.data[i] * a.data[i]), x.typeInfo);\r\n        }\r\n        const xs = x as ScalarData;\r\n        const ys = y as ScalarData;\r\n        const as = a as ScalarData;\r\n        return new ScalarData(xs.value * (1 - as.value) + ys.value * as.value, x.typeInfo);\r\n    }\r\n\r\n    Modf(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const x = this.exec.evalExpression(node.args[0], context);\r\n        const y = this.exec.evalExpression(node.args[1], context);\r\n        if (x instanceof VectorData && y instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => v % y.data[i]), x.typeInfo);\r\n        }\r\n        const xs = x as ScalarData;\r\n        const ys = y as ScalarData;\r\n        return new ScalarData(xs.value % ys.value, x.typeInfo);\r\n    }\r\n\r\n    Normalize(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            const length = (this.Length(node, context) as ScalarData).value;\r\n            return new VectorData(value.data.map((v: number) => v / length), value.typeInfo);\r\n        }\r\n        console.error(`Normalize() expects a vector argument. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Pow(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const x = this.exec.evalExpression(node.args[0], context);\r\n        const y = this.exec.evalExpression(node.args[1], context);\r\n        if (x instanceof VectorData && y instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => Math.pow(v, y.data[i])), x.typeInfo);\r\n        }\r\n        const xs = x as ScalarData;\r\n        const ys = y as ScalarData;\r\n        return new ScalarData(Math.pow(xs.value, ys.value), x.typeInfo);\r\n    }\r\n\r\n    QuantizeToF16(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // TODO: actually quantize the f32 to f16\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value, value.typeInfo);\r\n    }\r\n\r\n    Radians(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v * Math.PI / 180), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value * Math.PI / 180, this.getTypeInfo(\"f32\"));\r\n    }\r\n\r\n    Reflect(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // e1 - 2 * dot(e2, e1) * e2\r\n        let e1 = this.exec.evalExpression(node.args[0], context);\r\n        let e2 = this.exec.evalExpression(node.args[1], context);\r\n        if (e1 instanceof VectorData && e2 instanceof VectorData) {\r\n            const dot = this._dot(e1.data, e2.data);\r\n            return new VectorData(e1.data.map((v: number, i: number) => v - 2 * dot * e2.data[i]), e1.typeInfo);\r\n        }\r\n        console.error(`Reflect() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Refract(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let e1 = this.exec.evalExpression(node.args[0], context);\r\n        let e2 = this.exec.evalExpression(node.args[1], context);\r\n        let e3 = this.exec.evalExpression(node.args[2], context);\r\n        if (e1 instanceof VectorData && e2 instanceof VectorData && e3 instanceof ScalarData) {\r\n            const dot = this._dot(e2.data, e1.data);\r\n            return new VectorData(e1.data.map((v: number, i: number) => {\r\n                const k = 1.0 - e3.value * e3.value * (1.0 - dot * dot);\r\n                if (k < 0) {\r\n                    return 0;\r\n                }\r\n                const sqrtK = Math.sqrt(k);\r\n                return e3.value * v - (e3.value * dot + sqrtK) * e2.data[i];\r\n            }), e1.typeInfo);\r\n        }\r\n\r\n        console.error(`Refract() expects vector arguments and a scalar argument. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    ReverseBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: reverseBits. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Round(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.round(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.round(s.value), value.typeInfo);\r\n    }\r\n\r\n    Saturate(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.min(Math.max(v, 0), 1)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.min(Math.max(s.value, 0), 1), value.typeInfo);\r\n    }\r\n\r\n    Sign(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sign(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sign(s.value), value.typeInfo);\r\n    }\r\n\r\n    Sin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sin(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sin(s.value), value.typeInfo);\r\n    }\r\n\r\n    Sinh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sinh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sinh(s.value), value.typeInfo);\r\n    }\r\n\r\n    _smoothstep(edge0: number, edge1: number, x: number): number {\r\n        const t = Math.min(Math.max((x - edge0) / (edge1 - edge0), 0), 1);\r\n        return t * t * (3 - 2 * t);\r\n    }\r\n\r\n    SmoothStep(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const edge0 = this.exec.evalExpression(node.args[0], context);\r\n        const edge1 = this.exec.evalExpression(node.args[1], context);\r\n        const x = this.exec.evalExpression(node.args[2], context);\r\n        if (x instanceof VectorData && edge0 instanceof VectorData && edge1 instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => this._smoothstep(edge0.data[i], edge1.data[i], v)), x.typeInfo);\r\n        }\r\n        const e0 = edge0 as ScalarData;\r\n        const e1 = edge1 as ScalarData;\r\n        const xS = x as ScalarData;\r\n        return new ScalarData(this._smoothstep(e0.value, e1.value, xS.value), x.typeInfo);\r\n    }\r\n\r\n    Sqrt(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sqrt(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sqrt(s.value), value.typeInfo);\r\n    }\r\n\r\n    Step(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const edge = this.exec.evalExpression(node.args[0], context);\r\n        const x = this.exec.evalExpression(node.args[1], context);\r\n        if (x instanceof VectorData && edge instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => v < edge.data[i] ? 0 : 1), x.typeInfo);\r\n        }\r\n        const e = edge as ScalarData;\r\n        const s = x as ScalarData;\r\n        return new ScalarData(s.value < e.value ? 0 : 1, e.typeInfo);\r\n    }\r\n\r\n    Tan(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.tan(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.tan(s.value), value.typeInfo);\r\n    }\r\n\r\n    Tanh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.tanh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.tanh(s.value), value.typeInfo);\r\n    }\r\n\r\n    _getTransposeType(t: TypeInfo): TypeInfo {\r\n        const tname = t.getTypeName();\r\n        if (tname === \"mat2x2f\" || tname === \"mat2x2h\") {\r\n            return t;\r\n        } else if (tname === \"mat2x3f\") {\r\n            return this.getTypeInfo(\"mat3x2f\");\r\n        } else if (tname === \"mat2x3h\") {\r\n            return this.getTypeInfo(\"mat3x2h\");\r\n        } else if (tname === \"mat2x4f\") {\r\n            return this.getTypeInfo(\"mat4x2f\");\r\n        } else if (tname === \"mat2x4h\") {\r\n            return this.getTypeInfo(\"mat4x2h\");\r\n        } else if (tname === \"mat3x2f\") {\r\n            return this.getTypeInfo(\"mat2x3f\");\r\n        } else if (tname === \"mat3x2h\") {\r\n            return this.getTypeInfo(\"mat2x3h\");\r\n        } else if (tname === \"mat3x3f\" || tname === \"mat3x3h\") {\r\n            return t;\r\n        } else if (tname === \"mat3x4f\") {\r\n            return this.getTypeInfo(\"mat4x3f\");\r\n        } else if (tname === \"mat3x4h\") {\r\n            return this.getTypeInfo(\"mat4x3h\");\r\n        } else if (tname === \"mat4x2f\") {\r\n            return this.getTypeInfo(\"mat2x4f\");\r\n        } else if (tname === \"mat4x2h\") {\r\n            return this.getTypeInfo(\"mat2x4h\");\r\n        } else if (tname === \"mat4x3f\") {\r\n            return this.getTypeInfo(\"mat3x4f\");\r\n        } else if (tname === \"mat4x3h\") {\r\n            return this.getTypeInfo(\"mat3x4h\");\r\n        } else if (tname === \"mat4x4f\" || tname === \"mat4x4h\") {\r\n            return t;\r\n        }\r\n\r\n        console.error(`Invalid matrix type ${tname}`);\r\n        return t;\r\n    }\r\n\r\n    Transpose(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const m = this.exec.evalExpression(node.args[0], context);\r\n        if (!(m instanceof MatrixData)) {\r\n            console.error(`Transpose() expects a matrix argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const ttype = this._getTransposeType(m.typeInfo);\r\n\r\n        if (m.typeInfo.name === \"mat2x2\" || m.typeInfo.name === \"mat2x2f\" || m.typeInfo.name === \"mat2x2h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[2], mv[1], mv[3]], ttype);\r\n        } else if (m.typeInfo.name === \"mat2x3\" || m.typeInfo.name === \"mat2x3f\" || m.typeInfo.name === \"mat2x3h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[3], mv[6], mv[1], mv[4], mv[7]], ttype);\r\n        } else if (m.typeInfo.name === \"mat2x4\" || m.typeInfo.name === \"mat2x4f\" || m.typeInfo.name === \"mat2x4h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[12], mv[1], mv[5], mv[9], mv[13]], ttype);\r\n        } else if (m.typeInfo.name === \"mat3x2\" || m.typeInfo.name === \"mat3x2f\" || m.typeInfo.name === \"mat3x2h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[3], mv[1], mv[4], mv[2], mv[5]], ttype);\r\n        } else if (m.typeInfo.name === \"mat3x3\" || m.typeInfo.name === \"mat3x3f\" || m.typeInfo.name === \"mat3x3h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[3], mv[6], mv[1], mv[4], mv[7], mv[2], mv[5], mv[8]], ttype);\r\n        } else if (m.typeInfo.name === \"mat3x4\" || m.typeInfo.name === \"mat3x4f\" || m.typeInfo.name === \"mat3x4h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[12], mv[1], mv[5], mv[9], mv[13], mv[2], mv[6], mv[10], mv[14]], ttype);\r\n        } else if (m.typeInfo.name === \"mat4x2\" || m.typeInfo.name === \"mat4x2f\" || m.typeInfo.name === \"mat4x2h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[1], mv[5], mv[2], mv[6]], ttype);\r\n        } else if (m.typeInfo.name === \"mat4x3\" || m.typeInfo.name === \"mat4x3f\" || m.typeInfo.name === \"mat4x3h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[1], mv[5], mv[9], mv[2], mv[6], mv[10]], ttype);\r\n        } else if (m.typeInfo.name === \"mat4x4\" || m.typeInfo.name === \"mat4x4f\" || m.typeInfo.name === \"mat4x4h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[12],\r\n                                   mv[1], mv[5], mv[9], mv[13],\r\n                                   mv[2], mv[6], mv[10], mv[14],\r\n                                   mv[3], mv[7], mv[11], mv[15]], ttype);\r\n        }\r\n\r\n        console.error(`Invalid matrix type ${m.typeInfo.name}`);\r\n        return null;\r\n    }\r\n\r\n    Trunc(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.trunc(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData\r\n        return new ScalarData(Math.trunc(s.value), value.typeInfo);\r\n    }\r\n\r\n    // Derivative Built-in Functions\r\n    Dpdx(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dpdx. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    DpdxCoarse(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dpdxCoarse. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    DpdxFine(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdxFine\");\r\n        return null;\r\n    }\r\n\r\n    Dpdy(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdy\");\r\n        return null;\r\n    }\r\n\r\n    DpdyCoarse(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdyCoarse\");\r\n        return null;\r\n    }\r\n\r\n    DpdyFine(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdyFine\");\r\n        return null;\r\n    }\r\n\r\n    Fwidth(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: fwidth\");\r\n        return null;\r\n    }\r\n\r\n    FwidthCoarse(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: fwidthCoarse\");\r\n        return null;\r\n    }\r\n\r\n    FwidthFine(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: fwidthFine\");\r\n        return null;\r\n    }\r\n\r\n    // Texture Built-in Functions\r\n    TextureDimensions(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        const level = node.args.length > 1 ? (this.exec.evalExpression(node.args[1], context) as ScalarData).value : 0;\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                if (level < 0 || level >= texture.mipLevelCount) {\r\n                    console.error(`Invalid mip level for textureDimensions. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                const textureSize = texture.getMipLevelSize(level);\r\n\r\n                const dimension = texture.dimension;\r\n\r\n                if (dimension === \"1d\") {\r\n                    return new ScalarData(textureSize[0], this.getTypeInfo(\"u32\"));\r\n                } else if (dimension === \"3d\") {\r\n                    return new VectorData(textureSize, this.getTypeInfo(\"vec3u\"));\r\n                } else if (dimension === \"2d\") {\r\n                    return new VectorData(textureSize.slice(0, 2), this.getTypeInfo(\"vec2u\"));\r\n                } else {\r\n                    console.error(`Invalid texture dimension ${dimension} not found. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureDimensions. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureGather(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureGather\");\r\n        return null;\r\n    }\r\n\r\n    TextureGatherCompare(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureGatherCompare\");\r\n        return null;\r\n    }\r\n\r\n    TextureLoad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        const uv = this.exec.evalExpression(node.args[1], context);\r\n        const level = node.args.length > 2 ? (this.exec.evalExpression(node.args[2], context) as ScalarData).value : 0;\r\n\r\n        // TODO: non-vec2 UVs, for non-2D textures\r\n        if (!(uv instanceof VectorData) || uv.data.length !== 2) {\r\n            console.error(`Invalid UV argument for textureLoad. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                const x = Math.floor(uv.data[0]);\r\n                const y = Math.floor(uv.data[1]);\r\n                if (x < 0 || x >= texture.width || y < 0 || y >= texture.height) {\r\n                    console.error(`Texture ${textureName} out of bounds. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                const texel = texture.getPixel(x, y, 0, level);\r\n                if (texel === null) {\r\n                    console.error(`Invalid texture format for textureLoad. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                return new VectorData(texel, this.getTypeInfo(\"vec4f\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        console.error(`Invalid texture argument for textureLoad. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureNumLayers(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                return new ScalarData(texture.depthOrArrayLayers, this.getTypeInfo(\"u32\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureNumLayers. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureNumLevels(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                return new ScalarData(texture.mipLevelCount, this.getTypeInfo(\"u32\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureNumLevels. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureNumSamples(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                return new ScalarData(texture.sampleCount, this.getTypeInfo(\"u32\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureNumSamples. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureSample(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSample\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleBias(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleBias\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleCompare(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleCompare\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleCompareLevel(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleCompareLevel\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleGrad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleGrad\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleLevel(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleLevel\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleBaseClampToEdge(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleBaseClampToEdge\");\r\n        return null;\r\n    }\r\n\r\n    TextureStore(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        const uv = this.exec.evalExpression(node.args[1], context);\r\n        const index = (node.args.length === 4) ? (this.exec.evalExpression(node.args[2], context) as ScalarData).value : 0;\r\n        const value = (node.args.length === 4) ? (this.exec.evalExpression(node.args[3], context) as VectorData).data :\r\n            (this.exec.evalExpression(node.args[2], context) as VectorData).data;\r\n\r\n        if (value.length !== 4) {\r\n            console.error(`Invalid value argument for textureStore. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        // TODO: non-vec2 UVs, for non-2D textures\r\n        if (!(uv instanceof VectorData) || uv.data.length !== 2) {\r\n            console.error(`Invalid UV argument for textureStore. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                const textureSize = texture.getMipLevelSize(0);\r\n                const x = Math.floor(uv.data[0]);\r\n                const y = Math.floor(uv.data[1]);\r\n                if (x < 0 || x >= textureSize[0] || y < 0 || y >= textureSize[1]) {\r\n                    console.error(`Texture ${textureName} out of bounds. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                texture.setPixel(x, y, 0, index, Array.from(value));\r\n\r\n                return null;\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        console.error(`Invalid texture argument for textureStore. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    // Atomic Built-in Functions\r\n    AtomicLoad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n        return currentValue;\r\n    }\r\n\r\n    AtomicStore(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    AtomicAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value += value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicSub(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value -= value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicMax(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = Math.max(currentValue.value, value.value);\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicMin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = Math.min(currentValue.value, value.value);\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicAnd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = currentValue.value & value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicOr(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = currentValue.value | value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicXor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = currentValue.value ^ value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicExchange(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicCompareExchangeWeak(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: atomicCompareExchangeWeak\");\r\n        return null;\r\n    }\r\n\r\n    // Data Packing Built-in Functions\r\n    Pack4x8snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4x8snorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack4x8unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4x8unorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack4xI8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4xI8\");\r\n        return null;\r\n    }\r\n\r\n    Pack4xU8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4xU8\");\r\n        return null;\r\n    }\r\n\r\n    Pack4x8Clamp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4x8Clamp\");\r\n        return null;\r\n    }\r\n\r\n    Pack4xU8Clamp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4xU8Clamp\");\r\n        return null;\r\n    }\r\n\r\n    Pack2x16snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack2x16snorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack2x16unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack2x16unorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack2x16float(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack2x16float\");\r\n        return null;\r\n    }\r\n\r\n    // Data Unpacking Built-in Functions\r\n    Unpack4x8snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4x8snorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack4x8unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4x8unorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack4xI8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4xI8\");\r\n        return null;\r\n    }\r\n\r\n    Unpack4xU8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4xU8\");\r\n        return null;\r\n    }\r\n\r\n    Unpack2x16snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack2x16snorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack2x16unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack2x16unorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack2x16float(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack2x16float\");\r\n        return null;\r\n    }\r\n\r\n    // Synchronization Functions\r\n    StorageBarrier(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    TextureBarrier(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    WorkgroupBarrier(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    WorkgroupUniformLoad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    // Subgroup Functions\r\n    SubgroupAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAdd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupExclusiveAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupExclusiveAdd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupInclusiveAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupInclusiveAdd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupAll(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAll\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupAnd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAnd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupAny(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAny\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupBallot(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupBallot\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupBroadcast(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupBroadcast\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupBroadcastFirst(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupBroadcastFirst\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupElect(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupElect\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupMax(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupMax\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupMin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupMin\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupMul(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupMul\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupExclusiveMul(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupExclusiveMul\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupInclusiveMul(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupInclusiveMul\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupOr(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupOr\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffle(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffle\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffleDown(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffleDown\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffleUp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffleUp\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffleXor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffleXor\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupXor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupXor\");\r\n        return null;\r\n    }\r\n\r\n    // Quad Functions\r\n    QuadBroadcast(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadBroadcast\");\r\n        return null;\r\n    }\r\n\r\n    QuadSwapDiagonal(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadSwapDiagonal\");\r\n        return null;\r\n    }\r\n\r\n    QuadSwapX(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadSwapX\");\r\n        return null;\r\n    }\r\n\r\n    QuadSwapY(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadSwapY\");\r\n        return null;\r\n    }\r\n}\r\n","import { TypeInfo } from '../reflect/info';\r\n\r\nexport const VectorTypeSize = {\r\n    \"vec2\": 2, \"vec2f\": 2, \"vec2i\": 2, \"vec2u\": 2, \"vec2b\": 2, \"vec2h\": 2,\r\n    \"vec3\": 3, \"vec3f\": 3, \"vec3i\": 3, \"vec3u\": 3, \"vec3b\": 3, \"vec3h\": 3,\r\n    \"vec4\": 4, \"vec4f\": 4, \"vec4i\": 4, \"vec4u\": 4, \"vec4b\": 4, \"vec4h\": 4\r\n};\r\n\r\nexport const MatrixTypeSize = {\r\n    \"mat2x2\": [2, 2, 4], \"mat2x2f\": [2, 2, 4], \"mat2x2h\": [2, 2, 4],\r\n    \"mat2x3\": [2, 3, 6], \"mat2x3f\": [2, 3, 6], \"mat2x3h\": [2, 3, 6],\r\n    \"mat2x4\": [2, 4, 8], \"mat2x4f\": [2, 4, 8], \"mat2x4h\": [2, 4, 8],\r\n    \"mat3x2\": [3, 2, 6], \"mat3x2f\": [3, 2, 6], \"mat3x2h\": [3, 2, 6],\r\n    \"mat3x3\": [3, 3, 9], \"mat3x3f\": [3, 3, 9], \"mat3x3h\": [3, 3, 9],\r\n    \"mat3x4\": [3, 4, 12], \"mat3x4f\": [3, 4, 12], \"mat3x4h\": [3, 4, 12],\r\n    \"mat4x2\": [4, 2, 8], \"mat4x2f\": [4, 2, 8], \"mat4x2h\": [4, 2, 8],\r\n    \"mat4x3\": [4, 3, 12], \"mat4x3f\": [4, 3, 12], \"mat4x3h\": [4, 3, 12],\r\n    \"mat4x4\": [4, 4, 16], \"mat4x4f\": [4, 4, 16], \"mat4x4h\": [4, 4, 16]\r\n};\r\n\r\nexport const MatrixTransposeType = {\r\n    \"mat2x2\": \"mat2x2\", \"mat2x2f\": \"mat2x2f\", \"mat2x2h\": \"mat2x2h\",\r\n    \"mat2x3\": \"mat3x2\", \"mat2x3f\": \"mat3x2f\", \"mat2x3h\": \"mat3x2h\",\r\n    \"mat2x4\": \"mat4x2\", \"mat2x4f\": \"mat4x2f\", \"mat2x4h\": \"mat4x2h\",\r\n    \"mat3x2\": \"mat2x3\", \"mat3x2f\": \"mat2x3f\", \"mat3x2h\": \"mat2x3h\",\r\n    \"mat3x3\": \"mat3x3\", \"mat3x3f\": \"mat3x3f\", \"mat3x3h\": \"mat3x3h\",\r\n    \"mat3x4\": \"mat4x3\", \"mat3x4f\": \"mat4x3f\", \"mat3x4h\": \"mat4x3h\",\r\n    \"mat4x2\": \"mat2x4\", \"mat4x2f\": \"mat2x4f\", \"mat4x2h\": \"mat2x4h\",\r\n    \"mat4x3\": \"mat4x3\", \"mat4x3f\": \"mat4x3f\", \"mat4x3h\": \"mat4x3h\",\r\n    \"mat4x4\": \"mat4x4\", \"mat4x4f\": \"mat4x4f\", \"mat4x4h\": \"mat4x4h\"\r\n};\r\n\r\nexport function matrixTranspose(matrix: number[], t: TypeInfo) {\r\n    if (MatrixTypeSize[t.name] === undefined) {\r\n        return null;\r\n    }\r\n\r\n    const cols = MatrixTypeSize[t.name][0];\r\n    const rows = MatrixTypeSize[t.name][1];\r\n    const result: number[] = [];\r\n\r\n    for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n            result[i * rows + j] = matrix[j * cols + i];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function matrixMultiply(matrixA: number[], t1: TypeInfo, matrixB: number[], t2: TypeInfo): number[] | null {\r\n  if (MatrixTypeSize[t1.name] === undefined || MatrixTypeSize[t2.name] === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const k = MatrixTypeSize[t1.name][0];\r\n  const r = MatrixTypeSize[t1.name][1];\r\n  const c = MatrixTypeSize[t2.name][0];\r\n  const k2 = MatrixTypeSize[t2.name][1];\r\n\r\n  if (k !== k2) {\r\n    return null;\r\n  }\r\n\r\n  const result: number[] = new Array(c * r);\r\n\r\n  for (let j = 0; j < r; j++) { // Iterate through columns of result\r\n    for (let i = 0; i < c; i++) { // Iterate through rows of result\r\n      let sum = 0;\r\n      for (let l = 0; l < k; l++) {\r\n        sum += matrixA[l * r + j] * matrixB[i * k + l]; // Access column-major elements\r\n      }\r\n      result[j * c + i] = sum; // Store in column-major order\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function matrixVectorMultiply(matrix: number[], t1: TypeInfo, vector: number[], t2: TypeInfo): number[] | null {\r\n  if (MatrixTypeSize[t1.name] === undefined || VectorTypeSize[t2.name] === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const cols = MatrixTypeSize[t1.name][0];\r\n  const rows = MatrixTypeSize[t1.name][1];\r\n  \r\n  if (cols !== vector.length) {\r\n    return null;\r\n  }\r\n\r\n  const resultVec = new Array(rows);\r\n  // Perform matrix-vector multiplication (column-major)\r\n  for (let i = 0; i < rows; i++) {\r\n    let sum = 0;\r\n    for (let j = 0; j < cols; j++) {\r\n      sum += matrix[j * rows + i] * vector[j]; // Access column-major element\r\n    }\r\n    resultVec[i] = sum;\r\n  }\r\n\r\n  return resultVec;\r\n}\r\n\r\nexport function vectorMatrixMultiply(vector: number[], t1: TypeInfo, matrix: number[], t2: TypeInfo): number[] | null {\r\n  if (VectorTypeSize[t1.name] === undefined || MatrixTypeSize[t2.name] === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const cols = MatrixTypeSize[t2.name][0];\r\n  const rows = MatrixTypeSize[t2.name][1];\r\n\r\n  if (rows !== vector.length) {\r\n    return null;\r\n  }\r\n\r\n  const result: number[] = [];\r\n  for (let j = 0; j < cols; j++) {\r\n    let sum = 0;\r\n    for (let i = 0; i < rows; i++) {\r\n      sum += vector[i] * matrix[i * cols + j];\r\n    }\r\n    result[j] = sum;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { Node, Type, TemplateType, Return, Break, Continue, Let, Var, Const,\r\n    If, For, While, Loop, Continuing, Assign, Increment, Struct, Override, ArrayType,\r\n    Call, Diagnostic, Alias, BinaryOperator, LiteralExpr, Expression,\r\n    VariableExpr, CallExpr, CreateExpr, ConstExpr, BitcastExpr, UnaryOperator,\r\n    ArrayIndex, StringExpr, Function, Switch, SwitchCase, Case, Default, DefaultSelector } from \"./wgsl_ast.js\";\r\nimport { Data, TypedData, TextureData, ScalarData, VectorData, MatrixData, PointerData, VoidData } from \"./wgsl_ast.js\";\r\nimport { Reflect } from \"./reflect/reflect.js\";\r\nimport { TypeInfo, StructInfo, ArrayInfo, TemplateInfo } from \"./reflect/info.js\";\r\nimport { ExecContext, FunctionRef } from \"./exec/exec_context.js\";\r\nimport { ExecInterface } from \"./exec/exec_interface.js\";\r\nimport { BuiltinFunctions } from \"./exec/builtin_functions.js\";\r\nimport { isArray, castScalar, castVector } from \"./utils/cast.js\";\r\nimport { matrixMultiply, matrixVectorMultiply, vectorMatrixMultiply, MatrixTypeSize, VectorTypeSize } from \"./utils/matrix.js\";\r\n\r\nexport class WgslExec extends ExecInterface {\r\n    ast: Node[];\r\n    context: ExecContext;\r\n    reflection: Reflect;\r\n    builtins: BuiltinFunctions;\r\n    typeInfo: Object;\r\n\r\n    constructor(ast?: Node[], context?: ExecContext) {\r\n        super();\r\n        this.ast = ast ?? [];\r\n        this.reflection = new Reflect();\r\n        this.reflection.updateAST(this.ast);\r\n\r\n        this.context = context?.clone() ?? new ExecContext();\r\n        this.builtins = new BuiltinFunctions(this);\r\n\r\n        this.typeInfo = {\r\n            \"bool\": this.getTypeInfo(Type.bool),\r\n            \"i32\": this.getTypeInfo(Type.i32),\r\n            \"u32\": this.getTypeInfo(Type.u32),\r\n            \"f32\": this.getTypeInfo(Type.f32),\r\n            \"f16\": this.getTypeInfo(Type.f16),\r\n            \"vec2f\": this.getTypeInfo(TemplateType.vec2f),\r\n            \"vec2u\": this.getTypeInfo(TemplateType.vec2u),\r\n            \"vec2i\": this.getTypeInfo(TemplateType.vec2i),\r\n            \"vec2h\": this.getTypeInfo(TemplateType.vec2h),\r\n            \"vec3f\": this.getTypeInfo(TemplateType.vec3f),\r\n            \"vec3u\": this.getTypeInfo(TemplateType.vec3u),\r\n            \"vec3i\": this.getTypeInfo(TemplateType.vec3i),\r\n            \"vec3h\": this.getTypeInfo(TemplateType.vec3h),\r\n            \"vec4f\": this.getTypeInfo(TemplateType.vec4f),\r\n            \"vec4u\": this.getTypeInfo(TemplateType.vec4u),\r\n            \"vec4i\": this.getTypeInfo(TemplateType.vec4i),\r\n            \"vec4h\": this.getTypeInfo(TemplateType.vec4h),\r\n            \"mat2x2f\": this.getTypeInfo(TemplateType.mat2x2f),\r\n            \"mat2x3f\": this.getTypeInfo(TemplateType.mat2x3f),\r\n            \"mat2x4f\": this.getTypeInfo(TemplateType.mat2x4f),\r\n            \"mat3x2f\": this.getTypeInfo(TemplateType.mat3x2f),\r\n            \"mat3x3f\": this.getTypeInfo(TemplateType.mat3x3f),\r\n            \"mat3x4f\": this.getTypeInfo(TemplateType.mat3x4f),\r\n            \"mat4x2f\": this.getTypeInfo(TemplateType.mat4x2f),\r\n            \"mat4x3f\": this.getTypeInfo(TemplateType.mat4x3f),\r\n            \"mat4x4f\": this.getTypeInfo(TemplateType.mat4x4f),\r\n        };\r\n    }\r\n\r\n    getVariableValue(name: string): number | number[] | null {\r\n        const v = this.context.getVariable(name)?.value ?? null;\r\n        if (v === null) {\r\n            return null;\r\n        }\r\n        if (v instanceof ScalarData) {\r\n            return v.value;\r\n        }\r\n        if (v instanceof VectorData) {\r\n            return Array.from(v.data);\r\n        }\r\n        if (v instanceof MatrixData) {\r\n            return Array.from(v.data);\r\n        }\r\n        if (v instanceof TypedData) {\r\n            if (v.typeInfo instanceof ArrayInfo) {\r\n                if (v.typeInfo.format.name === \"u32\") {\r\n                    return Array.from(new Uint32Array(v.buffer, v.offset, v.typeInfo.count));\r\n                } else if (v.typeInfo.format.name === \"i32\") {\r\n                    return Array.from(new Int32Array(v.buffer, v.offset, v.typeInfo.count));\r\n                } else if (v.typeInfo.format.name === \"f32\") {\r\n                    return Array.from(new Float32Array(v.buffer, v.offset, v.typeInfo.count));\r\n                }\r\n            }\r\n        }\r\n        console.error(`Unsupported return variable type ${v.typeInfo.name}`);\r\n        return null;\r\n    }\r\n\r\n    execute(config?: Object): void {\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            this._setOverrides(config[\"constants\"], this.context);\r\n        }\r\n\r\n        this._execStatements(this.ast, this.context);\r\n    }\r\n\r\n    dispatchWorkgroups(kernel: string, dispatchCount: number | number[], bindGroups: Object, config?: Object): void {\r\n        const context = this.context.clone();\r\n\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            this._setOverrides(config[\"constants\"], context);\r\n        }\r\n\r\n        this._execStatements(this.ast, context);\r\n\r\n        const f = context.getFunction(kernel);\r\n        if (!f) {\r\n            console.error(`Function ${kernel} not found`);\r\n            return;\r\n        }\r\n\r\n        if (typeof dispatchCount === \"number\") {\r\n            dispatchCount = [dispatchCount, 1, 1];\r\n        } else if (dispatchCount.length === 0) {\r\n            console.error(`Invalid dispatch count`);\r\n            return;\r\n        } else if (dispatchCount.length === 1) {\r\n            dispatchCount = [dispatchCount[0], 1, 1];\r\n        } else if (dispatchCount.length === 2) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], 1];\r\n        } else if (dispatchCount.length > 3) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], dispatchCount[2]];\r\n        }\r\n\r\n        const width = dispatchCount[0];\r\n        const height = dispatchCount[1];\r\n        const depth = dispatchCount[2];\r\n\r\n        const vec3u = this.getTypeInfo(\"vec3u\");\r\n        context.setVariable(\"@num_workgroups\", new VectorData(dispatchCount, vec3u));\r\n\r\n        const kernelRefl = this.reflection.getFunctionInfo(kernel);\r\n        if (kernelRefl === null) {\r\n            console.error(`Function ${kernel} not found in reflection data`);\r\n        }\r\n\r\n        for (const set in bindGroups) {\r\n            for (const binding in bindGroups[set]) {\r\n                const entry = bindGroups[set][binding];\r\n\r\n                context.variables.forEach((v) => {\r\n                    const node = v.node;\r\n                    if (node?.attributes) {\r\n                        let b = null;\r\n                        let s = null;\r\n                        for (const attr of node.attributes) {\r\n                            if (attr.name === \"binding\") {\r\n                                b = attr.value;\r\n                            } else if (attr.name === \"group\") {\r\n                                s = attr.value;\r\n                            }\r\n                        }\r\n                        if (binding == b && set == s) {\r\n                            let found = false;\r\n                            for (const resource of kernelRefl.resources) {\r\n                                if (resource.name === v.name && resource.group === parseInt(set) && resource.binding === parseInt(binding)) {\r\n                                    found = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (found) {\r\n                                if (entry.texture !== undefined && entry.descriptor !== undefined) {\r\n                                    // Texture\r\n                                    const textureData = new TextureData(entry.texture, this.getTypeInfo(node.type), entry.descriptor,\r\n                                            entry.texture.view ?? null);\r\n                                    v.value = textureData;\r\n                                } else if (entry.uniform !== undefined) {\r\n                                    // Uniform buffer\r\n                                    v.value = new TypedData(entry.uniform, this.getTypeInfo(node.type));\r\n                                } else {\r\n                                    // Storage buffer\r\n                                    v.value = new TypedData(entry, this.getTypeInfo(node.type));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let z = 0; z < depth; ++z) {\r\n            for (let y = 0; y < height; ++y) {\r\n                for (let x = 0; x < width; ++x) {\r\n                    context.setVariable(\"@workgroup_id\", new VectorData([x, y, z], this.getTypeInfo(\"vec3u\")));\r\n                    this._dispatchWorkgroup(f, [x, y, z], context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static _breakObj = new Data(new TypeInfo(\"BREAK\", null), null);\r\n    static _continueObj = new Data(new TypeInfo(\"CONTINUE\", null), null);\r\n\r\n    execStatement(stmt: Node, context: ExecContext): Data | null {\r\n        if (stmt instanceof Return) {\r\n            return this.evalExpression(stmt.value, context);\r\n        } else if (stmt instanceof Break) {\r\n            if (stmt.condition) {\r\n                const c = this.evalExpression(stmt.condition, context);\r\n                if (!(c instanceof ScalarData)) {\r\n                    throw new Error(`Invalid break-if condition`);\r\n                }\r\n                if (!c.value) {\r\n                    return null;\r\n                }\r\n            }\r\n            return WgslExec._breakObj;\r\n        } else if (stmt instanceof Continue) {\r\n            return WgslExec._continueObj;\r\n        } else if (stmt instanceof Let) {\r\n            this._let(stmt, context);\r\n        } else if (stmt instanceof Var) {\r\n            this._var(stmt, context);\r\n        } else if (stmt instanceof Const) {\r\n            this._const(stmt, context);\r\n        } else if (stmt instanceof Function) {\r\n            this._function(stmt, context);\r\n        } else if (stmt instanceof If) {\r\n            return this._if(stmt, context);\r\n        } else if (stmt instanceof Switch) {\r\n            return this._switch(stmt, context);\r\n        } else if (stmt instanceof For) {\r\n            return this._for(stmt, context);\r\n        } else if (stmt instanceof While) {\r\n            return this._while(stmt, context);\r\n        } else if (stmt instanceof Loop) {\r\n            return this._loop(stmt, context);\r\n        } else if (stmt instanceof Continuing) {\r\n            const subContext = context.clone();\r\n            subContext.currentFunctionName = context.currentFunctionName;\r\n            return this._execStatements(stmt.body, subContext);\r\n        } else if (stmt instanceof Assign) {\r\n            this._assign(stmt, context);\r\n        } else if (stmt instanceof Increment) {\r\n            this._increment(stmt, context);\r\n        } else if (stmt instanceof Struct) {\r\n            return null;\r\n        } else if (stmt instanceof Override) {\r\n            const name = stmt.name;\r\n            if (context.getVariable(name) === null) {\r\n                context.setVariable(name, new ScalarData(0, this.getTypeInfo(\"u32\")));\r\n                //console.error(`Override constant ${name} not found. Line ${stmt.line}`);\r\n            }\r\n        } else if (stmt instanceof Call) {\r\n            this._call(stmt, context);\r\n        } else if (stmt instanceof Diagnostic) {\r\n            return null; // Nothing to do here.\r\n        } else if (stmt instanceof Alias) {\r\n            return null; // Nothing to do here.\r\n        } else {\r\n            console.error(`Invalid statement type.`, stmt, `Line ${stmt.line}`);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    evalExpression(node: Node, context: ExecContext): Data | null {\r\n        if (node instanceof BinaryOperator) {\r\n            return this._evalBinaryOp(node, context);\r\n        } else if (node instanceof LiteralExpr) {\r\n            return this._evalLiteral(node, context);\r\n        } else if (node instanceof VariableExpr) {\r\n            return this._evalVariable(node, context);\r\n        } else if (node instanceof CallExpr) {\r\n            return this._evalCall(node, context);\r\n        } else if (node instanceof CreateExpr) {\r\n            return this._evalCreate(node, context);\r\n        } else if (node instanceof ConstExpr) {\r\n            return this._evalConst(node, context);\r\n        } else if (node instanceof BitcastExpr) {\r\n            return this._evalBitcast(node, context);\r\n        } else if (node instanceof UnaryOperator) {\r\n            return this._evalUnaryOp(node, context);\r\n        }\r\n        console.error(`Invalid expression type`, node, `Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    getTypeInfo(type: Type | string): TypeInfo | null {\r\n        if (type instanceof Type) {\r\n            const t = this.reflection.getTypeInfo(type as Type);\r\n            if (t !== null) {\r\n                return t;\r\n            }\r\n        }\r\n\r\n        let t = this.typeInfo[type as string] ?? null;\r\n        if (t !== null) {\r\n            return t;\r\n        }\r\n\r\n        t = this.reflection.getTypeInfoByName(type as string);\r\n        return t;\r\n    }\r\n\r\n    _setOverrides(constants: Object, context: ExecContext): void {\r\n        for (const k in constants) {\r\n            const v = constants[k];\r\n            const override = this.reflection.getOverrideInfo(k);\r\n            if (override !== null) {\r\n                if (override.type === null) {\r\n                    override.type = this.getTypeInfo(\"u32\");\r\n                }\r\n                if (override.type.name === \"u32\" || override.type.name === \"i32\" || override.type.name === \"f32\" || override.type.name === \"f16\") {\r\n                    context.setVariable(k, new ScalarData(v, override.type));\r\n                } else if (override.type.name === \"bool\") {\r\n                    context.setVariable(k, new ScalarData(v ? 1 : 0, override.type));\r\n                } else if (override.type.name === \"vec2\" || override.type.name === \"vec3\" || override.type.name === \"vec4\" ||\r\n                    override.type.name === \"vec2f\" || override.type.name === \"vec3f\" || override.type.name === \"vec4f\" ||\r\n                    override.type.name === \"vec2i\" || override.type.name === \"vec3i\" || override.type.name === \"vec4i\" ||\r\n                    override.type.name === \"vec2u\" || override.type.name === \"vec3u\" || override.type.name === \"vec4u\" ||\r\n                    override.type.name === \"vec2h\" || override.type.name === \"vec3h\" || override.type.name === \"vec4h\") {\r\n                    context.setVariable(k, new VectorData(v, override.type));\r\n                } else {\r\n                    console.error(`Invalid constant type for ${k}`);\r\n                }\r\n            } else {\r\n                console.error(`Override ${k} does not exist in the shader.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    _dispatchWorkgroup(f: FunctionRef, workgroup_id: number[], context: ExecContext): void {\r\n        const workgroupSize = [1, 1, 1];\r\n        for (const attr of f.node.attributes) {\r\n            if (attr.name === \"workgroup_size\") {\r\n                if (attr.value.length > 0) {\r\n                    // The value could be an override constant\r\n                    const v = context.getVariableValue(attr.value[0]);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[0] = v.value;\r\n                    } else {\r\n                        workgroupSize[0] = parseInt(attr.value[0]);\r\n                    }\r\n                }\r\n                if (attr.value.length > 1) {\r\n                    const v = context.getVariableValue(attr.value[1]);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[1] = v.value;\r\n                    } else {\r\n                        workgroupSize[1] = parseInt(attr.value[1]);\r\n                    }\r\n                }\r\n                if (attr.value.length > 2) {\r\n                    const v = context.getVariableValue(attr.value[2]);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[2] = v.value;\r\n                    } else {\r\n                        workgroupSize[2] = parseInt(attr.value[2]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const vec3u = this.getTypeInfo(\"vec3u\");\r\n        const u32 = this.getTypeInfo(\"u32\");\r\n        context.setVariable(\"@workgroup_size\", new VectorData(workgroupSize, vec3u));\r\n\r\n        const width = workgroupSize[0];\r\n        const height = workgroupSize[1];\r\n        const depth = workgroupSize[2];\r\n\r\n        for (let z = 0, li = 0; z < depth; ++z) {\r\n            for (let y = 0; y < height; ++y) {\r\n                for (let x = 0; x < width; ++x, ++li) {\r\n                    const local_invocation_id = [x, y, z];\r\n                    const global_invocation_id = [\r\n                        x + workgroup_id[0] * workgroupSize[0],\r\n                        y + workgroup_id[1] * workgroupSize[1],\r\n                        z + workgroup_id[2] * workgroupSize[2]];\r\n\r\n                    context.setVariable(\"@local_invocation_id\", new VectorData(local_invocation_id, vec3u));\r\n                    context.setVariable(\"@global_invocation_id\", new VectorData(global_invocation_id, vec3u));\r\n                    context.setVariable(\"@local_invocation_index\", new ScalarData(li, u32));\r\n\r\n                    this._dispatchExec(f, context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _dispatchExec(f: FunctionRef, context: ExecContext): void {\r\n        // Update any built-in input args.\r\n        // TODO: handle input structs.\r\n        for (const arg of f.node.args) {\r\n            for (const attr of arg.attributes) {\r\n                if (attr.name === \"builtin\") {\r\n                    const globalName = `@${attr.value}`;\r\n                    const globalVar = context.getVariable(globalName);\r\n                    if (globalVar !== undefined) {\r\n                        context.variables.set(arg.name, globalVar);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._execStatements(f.node.body, context);\r\n    }\r\n\r\n    getVariableName(node: Node, context: ExecContext): string | null {\r\n        while (node instanceof UnaryOperator) {\r\n            node = node.right;\r\n        }\r\n\r\n        if (node instanceof VariableExpr) {\r\n            return (node as VariableExpr).name;\r\n        } else {\r\n            console.error(`Unknown variable type`, node, 'Line', node.line);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _execStatements(statements: Node[], context: ExecContext): Data | null {\r\n        for (const stmt of statements) {\r\n            // Block statements are declared as arrays of statements.\r\n            if (stmt instanceof Array) {\r\n                const subContext = context.clone();\r\n                const res = this._execStatements(stmt, subContext);\r\n                if (res) {\r\n                    return res;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            const res = this.execStatement(stmt, context);\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _call(node: Call, context: ExecContext): void {\r\n        const subContext = context.clone();\r\n        subContext.currentFunctionName = node.name;\r\n\r\n        const f = context.getFunction(node.name);\r\n        if (!f) {\r\n            if (node.isBuiltin) {\r\n                this._callBuiltinFunction(node, subContext);\r\n            } else {\r\n                const typeInfo = this.getTypeInfo(node.name);\r\n                if (typeInfo) {\r\n                    this._evalCreate(node, context);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n            const arg = f.node.args[ai];\r\n            const value = this.evalExpression(node.args[ai], subContext);\r\n            subContext.setVariable(arg.name, value, arg);\r\n        }\r\n\r\n        this._execStatements(f.node.body, subContext);\r\n    }\r\n\r\n    _increment(node: Increment, context: ExecContext): void {\r\n        const name = this.getVariableName(node.variable, context);\r\n        const v = context.getVariable(name);\r\n        if (!v) {\r\n            console.error(`Variable ${name} not found. Line ${node.line}`);\r\n            return;\r\n        }\r\n        if (node.operator === \"++\") {\r\n            if (v.value instanceof ScalarData) {\r\n                v.value.value++;\r\n            } else {\r\n                console.error(`Variable ${name} is not a scalar. Line ${node.line}`);\r\n            }\r\n        } else if (node.operator === \"--\") {\r\n            if (v.value instanceof ScalarData) {\r\n                v.value.value--;\r\n            } else {\r\n                console.error(`Variable ${name} is not a scalar. Line ${node.line}`);\r\n            }\r\n        } else {\r\n            console.error(`Unknown increment operator ${node.operator}. Line ${node.line}`);\r\n        }\r\n    }\r\n\r\n    _getVariableData(node: Node, context: ExecContext): Data | null {\r\n        if (node instanceof VariableExpr) {\r\n            const name = this.getVariableName(node, context);\r\n            const _var = context.getVariable(name);\r\n            if (_var === null) {\r\n                console.error(`Variable ${name} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            return _var.value.getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        if (node instanceof UnaryOperator) {\r\n            if (node.operator === \"*\") {\r\n                const refData = this._getVariableData(node.right, context);\r\n                if (!(refData instanceof PointerData)) {\r\n                    console.error(`Variable ${node.right} is not a pointer. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                return refData.reference.getSubData(this, node.postfix, context);\r\n            } else if (node.operator === \"&\") {\r\n                const refData = this._getVariableData(node.right, context);\r\n                return new PointerData(refData);\r\n            } \r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _assign(node: Assign, context: ExecContext): void {\r\n        let v: Data | null = null;\r\n        let name: string = \"<var>\";\r\n\r\n        let postfix: Expression | null = null;\r\n\r\n        if (node.variable instanceof UnaryOperator) {\r\n            const varData = this._getVariableData(node.variable, context);\r\n            const assignValue = this.evalExpression(node.value, context);\r\n            const op = node.operator;\r\n\r\n            if (op === \"=\") {\r\n                if (varData instanceof ScalarData || varData instanceof VectorData || varData instanceof MatrixData) {\r\n                    if (assignValue instanceof ScalarData || assignValue instanceof VectorData || assignValue instanceof MatrixData &&\r\n                        varData.data.length === assignValue.data.length) {\r\n                        varData.data.set(assignValue.data);\r\n                        return;\r\n                    } else {\r\n                        console.error(`Invalid assignment. Line ${node.line}`);\r\n                    }\r\n                } else if (varData instanceof TypedData && assignValue instanceof TypedData) {\r\n                    if ((varData.buffer.byteLength - varData.offset) >= (assignValue.buffer.byteLength - assignValue.offset)) {\r\n                        if (varData.buffer.byteLength % 4 === 0) {\r\n                            new Uint32Array(varData.buffer, varData.offset, varData.typeInfo.size / 4).set(new Uint32Array(assignValue.buffer, assignValue.offset, assignValue.typeInfo.size / 4));\r\n                        } else {\r\n                            new Uint8Array(varData.buffer, varData.offset, varData.typeInfo.size).set(new Uint8Array(assignValue.buffer, assignValue.offset, assignValue.typeInfo.size));\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n                console.error(`Invalid assignment. Line ${node.line}`);\r\n                return null;\r\n            } else if (op === \"+=\") {\r\n                if (varData instanceof ScalarData || varData instanceof VectorData || varData instanceof MatrixData) {\r\n                    if (assignValue instanceof ScalarData || assignValue instanceof VectorData || assignValue instanceof MatrixData) {\r\n                        varData.data.set(assignValue.data.map((v: number, i: number) => varData.data[i] + v));\r\n                        return;\r\n                    } else {\r\n                        console.error(`Invalid assignment . Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            } else if (op === \"-=\") {\r\n                if (varData instanceof ScalarData || varData instanceof VectorData || varData instanceof MatrixData) {\r\n                    if (assignValue instanceof ScalarData || assignValue instanceof VectorData || assignValue instanceof MatrixData) {\r\n                        varData.data.set(assignValue.data.map((v: number, i: number) => varData.data[i] - v));\r\n                        return;\r\n                    } else {\r\n                        console.error(`Invalid assignment. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (node.variable instanceof UnaryOperator) {\r\n            if (node.variable.operator === \"*\") {\r\n                name = this.getVariableName(node.variable.right, context);\r\n                const _var = context.getVariable(name);\r\n                if (_var && _var.value instanceof PointerData) {\r\n                    v = _var.value.reference;\r\n                } else {\r\n                    console.error(`Variable ${name} is not a pointer. Line ${node.line}`);\r\n                    return;\r\n                }\r\n\r\n                let postfix = node.variable.postfix;\r\n                if (!postfix) {\r\n                    let rNode = node.variable.right;\r\n                    while (rNode instanceof UnaryOperator) {\r\n                        if (rNode.postfix) {\r\n                            postfix = rNode.postfix;\r\n                            break;\r\n                        }\r\n                        rNode = rNode.right;\r\n                    }\r\n                }\r\n                if (postfix) {\r\n                    v = v.getSubData(this, postfix, context);\r\n                }\r\n            }\r\n        } else {\r\n            postfix = node.variable.postfix;\r\n            name = this.getVariableName(node.variable, context);\r\n            const _var = context.getVariable(name);\r\n            if (_var === null) {\r\n                console.error(`Variable ${name} not found. Line ${node.line}`);\r\n                return;\r\n            }\r\n            v = _var.value;\r\n        }\r\n\r\n        if (v instanceof PointerData) {\r\n            v = v.reference;\r\n        }\r\n\r\n        if (v === null) {\r\n            console.error(`Variable ${name} not found. Line ${node.line}`);\r\n            return;\r\n        }\r\n\r\n        const value = this.evalExpression(node.value, context);\r\n\r\n        const op = node.operator;\r\n        if (op !== \"=\") {\r\n            const currentValue = v.getSubData(this, postfix, context);\r\n\r\n            if (currentValue instanceof VectorData && value instanceof ScalarData) {\r\n                const cv = currentValue.data;\r\n                const v = value.value;\r\n\r\n                if (op === \"+=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] += v;\r\n                    }\r\n                } else if (op === \"-=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] -= v;\r\n                    }\r\n                } else if (op === \"*=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] *= v;\r\n                    }\r\n                } else if (op === \"/=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] /= v;\r\n                    }\r\n                } else if (op === \"%=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] %= v;\r\n                    }\r\n                } else if (op === \"&=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] &= v;\r\n                    }\r\n                } else if (op === \"|=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] |= v;\r\n                    }\r\n                } else if (op === \"^=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] ^= v;\r\n                    }\r\n                } else if (op === \"<<=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] <<= v;\r\n                    }\r\n                } else if (op === \">>=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] >>= v;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid operator ${op}. Line ${node.line}`);\r\n                }\r\n            } else if (currentValue instanceof VectorData && value instanceof VectorData) {\r\n                const cv = currentValue.data;\r\n                const v = value.data;\r\n                if (cv.length !== v.length) {\r\n                    console.error(`Vector length mismatch. Line ${node.line}`);\r\n                    return;\r\n                }\r\n\r\n                if (op === \"+=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] += v[i];\r\n                    }\r\n                } else if (op === \"-=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] -= v[i];\r\n                    }\r\n                } else if (op === \"*=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] *= v[i];\r\n                    }\r\n                } else if (op === \"/=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] /= v[i];\r\n                    }\r\n                } else if (op === \"%=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] %= v[i];\r\n                    }\r\n                } else if (op === \"&=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] &= v[i];\r\n                    }\r\n                } else if (op === \"|=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] |= v[i];\r\n                    }\r\n                } else if (op === \"^=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] ^= v[i];\r\n                    }\r\n                } else if (op === \"<<=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] <<= v[i];\r\n                    }\r\n                } else if (op === \">>=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] >>= v[i];\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid operator ${op}. Line ${node.line}`);\r\n                }\r\n            } else if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n                if (op === \"+=\") {\r\n                    currentValue.value += value.value;\r\n                } else if (op === \"-=\") {\r\n                    currentValue.value -= value.value;\r\n                } else if (op === \"*=\") {\r\n                    currentValue.value *= value.value;\r\n                } else if (op === \"/=\") {\r\n                    currentValue.value /= value.value;\r\n                } else if (op === \"%=\") {\r\n                    currentValue.value %= value.value;\r\n                } else if (op === \"&=\") {\r\n                    currentValue.value &= value.value;\r\n                } else if (op === \"|=\") {\r\n                    currentValue.value |= value.value;\r\n                } else if (op === \"^=\") {\r\n                    currentValue.value ^= value.value;\r\n                } else if (op === \"<<=\") {\r\n                    currentValue.value <<= value.value;\r\n                } else if (op === \">>=\") {\r\n                    currentValue.value >>= value.value;\r\n                } else {\r\n                    console.error(`Invalid operator ${op}. Line ${node.line}`);\r\n                }\r\n            } else {\r\n                console.error(`Invalid type for ${node.operator} operator. Line ${node.line}`);\r\n                return;\r\n            }\r\n\r\n            // If the variable is a TypedData, as in a struct or array, and we're assigning a\r\n            // sub portion of it, set the data in the original buffer.\r\n            if (v instanceof TypedData) {\r\n                v.setDataValue(this, currentValue, postfix, context);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (v instanceof TypedData) {\r\n            v.setDataValue(this, value, postfix, context);\r\n        } else if (postfix) {\r\n            if (!(v instanceof VectorData) && !(v instanceof MatrixData)) {\r\n                console.error(`Variable ${name} is not a vector or matrix. Line ${node.line}`);\r\n                return;\r\n            }\r\n\r\n            if (postfix instanceof ArrayIndex) {\r\n                const idx = (this.evalExpression(postfix.index, context) as ScalarData).value;\r\n\r\n                if (v instanceof VectorData) {\r\n                    if (value instanceof ScalarData) {\r\n                        v.data[idx] = value.value;\r\n                    } else {\r\n                        console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else if (v instanceof MatrixData) {\r\n                    const idx = (this.evalExpression(postfix.index, context) as ScalarData).value;\r\n                    if (idx < 0) {\r\n                        console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                    if (value instanceof VectorData) {\r\n                        const typeName = v.typeInfo.getTypeName();\r\n                        if (typeName === \"mat2x2\" || typeName === \"mat2x2f\" || typeName === \"mat2x2h\") {\r\n                            if (idx < 2 && value.data.length === 2) {\r\n                                v.data[idx * 2] = value.data[0];\r\n                                v.data[idx * 2 + 1] = value.data[1];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat2x3\" || typeName === \"mat2x3f\" || typeName === \"mat2x3h\") {\r\n                            if (idx < 2 && value.data.length === 3) {\r\n                                v.data[idx * 3] = value.data[0];\r\n                                v.data[idx * 3 + 1] = value.data[1];\r\n                                v.data[idx * 3 + 2] = value.data[2];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat2x4\" || typeName === \"mat2x4f\" || typeName === \"mat2x4h\") {\r\n                            if (idx < 2 && value.data.length === 4) {\r\n                                v.data[idx * 4] = value.data[0];\r\n                                v.data[idx * 4 + 1] = value.data[1];\r\n                                v.data[idx * 4 + 2] = value.data[2];\r\n                                v.data[idx * 4 + 3] = value.data[3];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat3x2\" || typeName === \"mat3x2f\" || typeName === \"mat3x2h\") {\r\n                            if (idx < 3 && value.data.length === 2) {\r\n                                v.data[idx * 2] = value.data[0];\r\n                                v.data[idx * 2 + 1] = value.data[1];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat3x3\" || typeName === \"mat3x3f\" || typeName === \"mat3x3h\") {\r\n                            if (idx < 3 && value.data.length === 3) {\r\n                                v.data[idx * 3] = value.data[0];\r\n                                v.data[idx * 3 + 1] = value.data[1];\r\n                                v.data[idx * 3 + 2] = value.data[2];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat3x4\" || typeName === \"mat3x4f\" || typeName === \"mat3x4h\") {\r\n                            if (idx < 3 && value.data.length === 4) {\r\n                                v.data[idx * 4] = value.data[0];\r\n                                v.data[idx * 4 + 1] = value.data[1];\r\n                                v.data[idx * 4 + 2] = value.data[2];\r\n                                v.data[idx * 4 + 3] = value.data[3];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat4x2\" || typeName === \"mat4x2f\" || typeName === \"mat4x2h\") {\r\n                            if (idx < 4 && value.data.length === 2) {\r\n                                v.data[idx * 2] = value.data[0];\r\n                                v.data[idx * 2 + 1] = value.data[1];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat4x3\" || typeName === \"mat4x3f\" || typeName === \"mat4x3h\") {\r\n                            if (idx < 4 && value.data.length === 3) {\r\n                                v.data[idx * 3] = value.data[0];\r\n                                v.data[idx * 3 + 1] = value.data[1];\r\n                                v.data[idx * 3 + 2] = value.data[2];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat4x4\" || typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n                            if (idx < 4 && value.data.length === 4) {\r\n                                v.data[idx * 4] = value.data[0];\r\n                                v.data[idx * 4 + 1] = value.data[1];\r\n                                v.data[idx * 4 + 2] = value.data[2];\r\n                                v.data[idx * 4 + 3] = value.data[3];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            } else if (postfix instanceof StringExpr) {\r\n                const member = postfix.value;\r\n                if (!(v instanceof VectorData)) {\r\n                    console.error(`Invalid assignment to ${member}. Variable ${name} is not a vector. Line ${node.line}`);\r\n                    return;\r\n                }\r\n                if (value instanceof ScalarData) {\r\n                    if (member.length > 1) {\r\n                        console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                    if (member === \"x\") {\r\n                        v.data[0] = value.value;\r\n                    } else if (member === \"y\") {\r\n                        if (v.data.length < 2) {\r\n                            console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                        v.data[1] = value.value;\r\n                    } else if (member === \"z\") {\r\n                        if (v.data.length < 3) {\r\n                            console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                        v.data[2] = value.value;\r\n                    } else if (member === \"w\") {\r\n                        if (v.data.length < 4) {\r\n                            console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                        v.data[3] = value.value;\r\n                    }\r\n                } else if (value instanceof VectorData) {\r\n                    if (member.length !== value.data.length) {\r\n                        console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                    for (let i = 0; i < member.length; ++i) {\r\n                        const m = member[i];\r\n                        if (m === \"x\" || m === \"r\") {\r\n                            v.data[0] = value.data[i];\r\n                        } else if (m === \"y\" || m === \"g\") {\r\n                            if (value.data.length < 2) {\r\n                                console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                            v.data[1] = value.data[i];\r\n                        } else if (m === \"z\" || m === \"b\") {\r\n                            if (value.data.length < 3) {\r\n                                console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                            v.data[2] = value.data[i];\r\n                        } else if (m === \"w\" || m === \"a\") {\r\n                            if (value.data.length < 4) {\r\n                                console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                            v.data[3] = value.data[i];\r\n                        } else {\r\n                            console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            }\r\n        } else {\r\n            if (v instanceof ScalarData && value instanceof ScalarData) {\r\n                v.value = value.value;\r\n            } else if (v instanceof VectorData && value instanceof VectorData) {\r\n                v.data.set(value.data);\r\n            } else if (v instanceof MatrixData && value instanceof MatrixData) {\r\n                v.data.set(value.data);\r\n            } else {\r\n                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n            }\r\n            //v.value = value;\r\n        }\r\n        return;\r\n    }\r\n\r\n    _function(node: Function, context: ExecContext): void {\r\n        const f = new FunctionRef(node);\r\n        context.functions.set(node.name, f);\r\n    }\r\n\r\n    _const(node: Const, context: ExecContext): void {\r\n        let value = null;\r\n        if (node.value !== null) {\r\n            value = this.evalExpression(node.value, context);\r\n        }\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _let(node: Let, context: ExecContext): void {\r\n        let value: Data | null = null;\r\n        if (node.value !== null) {\r\n            value = this.evalExpression(node.value, context);\r\n            if (value === null) {\r\n                console.error(`Invalid value for variable ${node.name}. Line ${node.line}`);\r\n                return;\r\n            }\r\n            if (!(node.value instanceof UnaryOperator)) {\r\n                value = value.clone();\r\n            }\r\n        } else {\r\n            const typeName = node.type.name;\r\n            if (typeName === \"f32\" || typeName === \"i32\" || typeName === \"u32\" ||\r\n                typeName === \"bool\" || typeName === \"f16\" ||\r\n                typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\" ||\r\n                typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n                typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n                typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\" ||\r\n                typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n                typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\" ||\r\n                typeName === \"mat2x2\" || typeName === \"mat2x3\" || typeName === \"mat2x4\" ||\r\n                typeName === \"mat3x2\" || typeName === \"mat3x3\" || typeName === \"mat3x4\" ||\r\n                typeName === \"mat4x2\" || typeName === \"mat4x3\" || typeName === \"mat4x4\" ||\r\n                typeName === \"mat2x2f\" || typeName === \"mat2x3f\" || typeName === \"mat2x4f\" ||\r\n                typeName === \"mat3x2f\" || typeName === \"mat3x3f\" || typeName === \"mat3x4f\" ||\r\n                typeName === \"mat4x2f\" || typeName === \"mat4x3f\" || typeName === \"mat4x4f\" ||\r\n                typeName === \"mat2x2h\" || typeName === \"mat2x3h\" || typeName === \"mat2x4h\" ||\r\n                typeName === \"mat3x2h\" || typeName === \"mat3x3h\" || typeName === \"mat3x4h\" ||\r\n                typeName === \"mat4x2h\" || typeName === \"mat4x3h\" || typeName === \"mat4x4h\" ||\r\n                typeName === \"array\") {\r\n                const defType = new CreateExpr(node.type, []);\r\n                value = this._evalCreate(defType, context);\r\n            }\r\n        }\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _var(node: Var, context: ExecContext): void {\r\n        let value = null;\r\n        if (node.value !== null) {\r\n            value = this.evalExpression(node.value, context);\r\n            if (value === null) {\r\n                console.error(`Invalid value for variable ${node.name}. Line ${node.line}`);\r\n                return;\r\n            }\r\n            if (!(node.value instanceof UnaryOperator)) {\r\n                value = value.clone();\r\n            }\r\n        } else {\r\n            if (node.type === null) {\r\n                console.error(`Variable ${node.name} has no type. Line ${node.line}`);\r\n                return;\r\n            }\r\n\r\n            const typeName = node.type.name;\r\n            if (typeName === \"f32\" || typeName === \"i32\" || typeName === \"u32\" ||\r\n                typeName === \"bool\" || typeName === \"f16\" ||\r\n                typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\" ||\r\n                typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n                typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n                typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\" ||\r\n                typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n                typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\" ||\r\n                typeName === \"mat2x2\" || typeName === \"mat2x3\" || typeName === \"mat2x4\" ||\r\n                typeName === \"mat3x2\" || typeName === \"mat3x3\" || typeName === \"mat3x4\" ||\r\n                typeName === \"mat4x2\" || typeName === \"mat4x3\" || typeName === \"mat4x4\" ||\r\n                typeName === \"mat2x2f\" || typeName === \"mat2x3f\" || typeName === \"mat2x4f\" ||\r\n                typeName === \"mat3x2f\" || typeName === \"mat3x3f\" || typeName === \"mat3x4f\" ||\r\n                typeName === \"mat4x2f\" || typeName === \"mat4x3f\" || typeName === \"mat4x4f\" ||\r\n                typeName === \"mat2x2h\" || typeName === \"mat2x3h\" || typeName === \"mat2x4h\" ||\r\n                typeName === \"mat3x2h\" || typeName === \"mat3x3h\" || typeName === \"mat3x4h\" ||\r\n                typeName === \"mat4x2h\" || typeName === \"mat4x3h\" || typeName === \"mat4x4h\" ||\r\n                node.type instanceof ArrayType || node.type instanceof Struct || node.type instanceof TemplateType) {\r\n                const defType = new CreateExpr(node.type, []);\r\n                value = this._evalCreate(defType, context);\r\n            }\r\n        }\r\n\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _switch(node: Switch, context: ExecContext) : Data | null {\r\n        context = context.clone();\r\n        const condition = this.evalExpression(node.condition, context);\r\n        if (!(condition instanceof ScalarData)) {\r\n            console.error(`Invalid if condition. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        let defaultCase: SwitchCase | null = null;\r\n\r\n        for (const c of node.cases) {\r\n            if (c instanceof Case) {\r\n                for (const selector of c.selectors) {\r\n                    if (selector instanceof DefaultSelector) {\r\n                        defaultCase = c;\r\n                        continue;\r\n                    }\r\n\r\n                    const selectorValue = this.evalExpression(selector, context);\r\n                    if (!(selectorValue instanceof ScalarData)) {\r\n                        console.error(`Invalid case selector. Line ${node.line}`);\r\n                        return null;\r\n                    }\r\n\r\n                    if (selectorValue.value === condition.value) {\r\n                        return this._execStatements(c.body, context);\r\n                    }\r\n                }\r\n            } else if (c instanceof Default) {\r\n                defaultCase = c;\r\n            }\r\n        }\r\n\r\n        if (defaultCase) {\r\n            return this._execStatements(defaultCase.body, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _if(node: If, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n        const condition = this.evalExpression(node.condition, context);\r\n        if (!(condition instanceof ScalarData)) {\r\n            console.error(`Invalid if condition. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (condition.value) {\r\n            return this._execStatements(node.body, context);\r\n        }\r\n\r\n        for (const e of node.elseif) {\r\n            const condition = this.evalExpression(e.condition, context);\r\n            if (!(condition instanceof ScalarData)) {\r\n                console.error(`Invalid if condition. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            if (condition.value) {\r\n                return this._execStatements(e.body, context);\r\n            }\r\n        }\r\n\r\n        if (node.else) {\r\n            return this._execStatements(node.else, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _getScalarValue(v: Data | null): number {\r\n        if (v instanceof ScalarData) {\r\n            return v.value;\r\n        }\r\n        console.error(`Expected scalar value.`, v);\r\n        return 0;\r\n    }\r\n\r\n    _for(node: For, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n        this.execStatement(node.init, context);\r\n        while (this._getScalarValue(this.evalExpression(node.condition, context))) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res === WgslExec._breakObj) {\r\n                break;\r\n            }\r\n            if (res !== null && res !== WgslExec._continueObj) {\r\n                return res;\r\n            }\r\n            this.execStatement(node.increment, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _loop(node: Loop, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n\r\n        while (true) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res === WgslExec._breakObj) {\r\n                break;\r\n            } else if (res === WgslExec._continueObj) {\r\n                if (node.continuing) {\r\n                    const cres = this._execStatements(node.continuing.body, context);\r\n                    if (cres === WgslExec._breakObj) {\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (res !== null) {\r\n                return res;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _while(node: While, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n        while (this._getScalarValue(this.evalExpression(node.condition, context))) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res === WgslExec._breakObj) {\r\n                break;\r\n            } else if (res === WgslExec._continueObj) {\r\n                continue;\r\n            } else if (res !== null) {\r\n                return res;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _evalBitcast(node: BitcastExpr, context: ExecContext): Data | null {\r\n        const value = this.evalExpression(node.value, context);\r\n        const type = node.type;\r\n\r\n        if (value instanceof ScalarData) {\r\n            const v = castScalar(value.value, value.typeInfo.name, type.name);\r\n            return new ScalarData(v, this.getTypeInfo(type));\r\n        }\r\n\r\n        if (value instanceof VectorData) {\r\n            const fromType = value.typeInfo.getTypeName();\r\n            let fromCast = \"\";\r\n            if (fromType.endsWith(\"f\")) {\r\n                fromCast = \"f32\";\r\n            } else if (fromType.endsWith(\"i\")) {\r\n                fromCast = \"i32\";\r\n            } else if (fromType.endsWith(\"u\")) {\r\n                fromCast = \"u32\";\r\n            } else if (fromType.endsWith(\"b\")) {\r\n                fromCast = \"bool\";\r\n            } else if (fromType.endsWith(\"h\")) {\r\n                fromCast = \"f16\";\r\n            } else {\r\n                console.error(`Unknown vector type ${fromType}. Line ${node.line}`);\r\n                return null;\r\n            }\r\n\r\n            const toType = type.getTypeName();\r\n            let toCast = \"\";\r\n            if (toType.endsWith(\"f\")) {\r\n                toCast = \"f32\";\r\n            } else if (toType.endsWith(\"i\")) {\r\n                toCast = \"i32\";\r\n            } else if (toType.endsWith(\"u\")) {\r\n                toCast = \"u32\";\r\n            } else if (toType.endsWith(\"b\")) {\r\n                toCast = \"bool\";\r\n            } else if (toType.endsWith(\"h\")) {\r\n                toCast = \"f16\";\r\n            } else {\r\n                console.error(`Unknown vector type ${toCast}. Line ${node.line}`);\r\n                return null;\r\n            }\r\n\r\n            const v = castVector(Array.from(value.data), fromCast, toCast);\r\n            return new VectorData(v, this.getTypeInfo(type));\r\n        }\r\n\r\n        console.error(`TODO: bitcast for ${value.typeInfo.name}. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalConst(node: ConstExpr, context: ExecContext): Data | null {\r\n        const data = context.getVariableValue(node.name).clone();\r\n        return data.getSubData(this, node.postfix, context);\r\n    }\r\n\r\n    _evalCreate(node: CreateExpr | CallExpr | Call, context: ExecContext): Data | null {\r\n        if (node instanceof CreateExpr) {\r\n            if (node.type === null) {\r\n                return VoidData.void;\r\n            }\r\n\r\n            const typeName = node.type.getTypeName();\r\n\r\n            switch (typeName) {\r\n                // Constructor Built-in Functions\r\n                // Value Constructor Built-in Functions\r\n                case \"bool\":\r\n                case \"i32\":\r\n                case \"u32\":\r\n                case \"f32\":\r\n                case \"f16\":\r\n                    return this._callConstructorValue(node, context);\r\n                case \"vec2\":\r\n                case \"vec3\":\r\n                case \"vec4\":\r\n                case \"vec2f\":\r\n                case \"vec3f\":\r\n                case \"vec4f\":\r\n                case \"vec2h\":\r\n                case \"vec3h\":\r\n                case \"vec4h\":\r\n                case \"vec2i\":\r\n                case \"vec3i\":\r\n                case \"vec4i\":\r\n                case \"vec2u\":\r\n                case \"vec3u\":\r\n                case \"vec4u\":\r\n                case \"vec2b\":\r\n                case \"vec3b\":\r\n                case \"vec4b\":\r\n                    return this._callConstructorVec(node, context);\r\n                case \"mat2x2\":\r\n                case \"mat2x2f\":\r\n                case \"mat2x2h\":\r\n                case \"mat2x3\":\r\n                case \"mat2x3f\":\r\n                case \"mat2x3h\":\r\n                case \"mat2x4\":\r\n                case \"mat2x4f\":\r\n                case \"mat2x4h\":\r\n                case \"mat3x2\":\r\n                case \"mat3x2f\":\r\n                case \"mat3x2h\":\r\n                case \"mat3x3\":\r\n                case \"mat3x3f\":\r\n                case \"mat3x3h\":\r\n                case \"mat3x4\":\r\n                case \"mat3x4f\":\r\n                case \"mat3x4h\":\r\n                case \"mat4x2\":\r\n                case \"mat4x2f\":\r\n                case \"mat4x2h\":\r\n                case \"mat4x3\":\r\n                case \"mat4x3f\":\r\n                case \"mat4x3h\":\r\n                case \"mat4x4\":\r\n                case \"mat4x4f\":\r\n                case \"mat4x4h\":\r\n                    return this._callConstructorMatrix(node, context);\r\n            }\r\n        }\r\n\r\n        const typeName = (node instanceof CreateExpr) ? node.type.name : node.name;\r\n        const typeInfo = (node instanceof CreateExpr) ? this.getTypeInfo(node.type) : this.getTypeInfo(node.name);\r\n        if (typeInfo === null) {\r\n            console.error(`Unknown type ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (typeInfo.size === 0) {\r\n            return null;\r\n        }\r\n\r\n        const data = new TypedData(new ArrayBuffer(typeInfo.size), typeInfo, 0);\r\n\r\n        // Assign the values in node.args to the data.\r\n        if (typeInfo instanceof StructInfo) {\r\n            if (node.args) {\r\n                for (let i = 0; i < node.args.length; ++i) {\r\n                    const memberInfo = typeInfo.members[i];\r\n                    const arg = node.args[i];\r\n                    const value = this.evalExpression(arg, context);\r\n                    data.setData(this, value, memberInfo.type, memberInfo.offset, context);\r\n                }\r\n            }\r\n        } else if (typeInfo instanceof ArrayInfo) {\r\n            let offset = 0;\r\n            if (node.args) {\r\n                for (let i = 0; i < node.args.length; ++i) {\r\n                    const arg = node.args[i];\r\n                    const value = this.evalExpression(arg, context);\r\n                    if (typeInfo.format === null) {\r\n                        if (value.typeInfo?.name === \"x32\") {\r\n                            typeInfo.format = this.getTypeInfo(\"i32\");\r\n                        } else {\r\n                            typeInfo.format = value.typeInfo;\r\n                        }\r\n                    }\r\n                    data.setData(this, value, typeInfo.format, offset, context);\r\n                    offset += typeInfo.stride;\r\n                }\r\n            }\r\n        } else {\r\n            console.error(`Unknown type \"${typeName}\". Line ${node.line}`);\r\n        }\r\n\r\n        if (node instanceof CreateExpr) {\r\n            return data.getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    _evalLiteral(node: LiteralExpr, context: ExecContext): Data | null {\r\n        const typeInfo = this.getTypeInfo(node.type);\r\n        const typeName = typeInfo.name;\r\n        if (typeName === \"x32\" || typeName === \"u32\" || typeName === \"f32\" || typeName === \"f16\" ||\r\n            typeName === \"i32\" || typeName === \"bool\") {\r\n            const data = new ScalarData(node.scalarValue, typeInfo);\r\n            return data;\r\n        }\r\n        if (typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\" ||\r\n            typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n            typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n            typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n            typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\") {\r\n            return this._callConstructorVec(node, context);\r\n        }\r\n        if (typeName === \"mat2x2\" || typeName === \"mat2x3\" || typeName === \"mat2x4\" ||\r\n            typeName === \"mat3x2\" || typeName === \"mat3x3\" || typeName === \"mat3x4\" ||\r\n            typeName === \"mat4x2\" || typeName === \"mat4x3\" || typeName === \"mat4x4\" ||\r\n            typeName === \"mat2x2f\" || typeName === \"mat2x3f\" || typeName === \"mat2x4f\" ||\r\n            typeName === \"mat3x2f\" || typeName === \"mat3x3f\" || typeName === \"mat3x4f\" ||\r\n            typeName === \"mat4x2f\" || typeName === \"mat4x3f\" || typeName === \"mat4x4f\" ||\r\n            typeName === \"mat2x2h\" || typeName === \"mat2x3h\" || typeName === \"mat2x4h\" ||\r\n            typeName === \"mat3x2h\" || typeName === \"mat3x3h\" || typeName === \"mat3x4h\" ||\r\n            typeName === \"mat4x2h\" || typeName === \"mat4x3h\" || typeName === \"mat4x4h\") {\r\n            return this._callConstructorMatrix(node, context);\r\n        }\r\n        return node.value;\r\n    }\r\n\r\n    _evalVariable(node: VariableExpr, context: ExecContext): Data | null {\r\n        const value = context.getVariableValue(node.name);\r\n        if (value === null) {\r\n            return value;\r\n        }\r\n        return value.getSubData(this, node.postfix, context);\r\n    }\r\n\r\n    static _priority = new Map<string, number>([[\"f32\", 0], [\"f16\", 1], [\"u32\", 2], [\"i32\", 3], [\"x32\", 3]]);\r\n    _maxFormatTypeInfo(x: TypeInfo[]): TypeInfo | null {\r\n        let t = x[0];\r\n        if (t.name === \"f32\") {\r\n            return t;\r\n        }\r\n        for (let i = 1; i < x.length; ++i) {\r\n            const tv = WgslExec._priority.get(t.name);\r\n            const xv = WgslExec._priority.get(x[i].name);\r\n            if (xv < tv) {\r\n                t = x[i];\r\n            }\r\n        }\r\n\r\n        if (t.name === \"x32\") {\r\n            return this.getTypeInfo(\"i32\");\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    _evalUnaryOp(node: UnaryOperator, context: ExecContext): Data | null {\r\n        const _r = this.evalExpression(node.right, context);\r\n\r\n        if (node.operator === \"&\") { \r\n            return new PointerData(_r);\r\n        } else if (node.operator === \"*\") {\r\n            if (_r instanceof PointerData) {\r\n                return _r.reference.getSubData(this, node.postfix, context);\r\n            }\r\n            console.error(`Invalid dereference. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const r = _r instanceof ScalarData ? _r.value : \r\n            _r instanceof VectorData ? Array.from(_r.data) : null;\r\n\r\n        switch (node.operator) {\r\n            case \"+\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => +x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(+rn, t);\r\n            }\r\n            case \"-\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => -x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(-rn, t);\r\n            }\r\n            case \"!\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => !x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(!rn ? 1 : 0, t);\r\n            }\r\n            case \"~\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ~x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(~rn, t);\r\n            }\r\n        }\r\n        console.error(`Invalid unary operator ${node.operator}. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalBinaryOp(node: BinaryOperator, context: ExecContext): Data | null {\r\n        const _l = this.evalExpression(node.left, context);\r\n        const _r = this.evalExpression(node.right, context);\r\n\r\n        const l = _l instanceof ScalarData ? _l.value : \r\n            _l instanceof VectorData ? Array.from(_l.data) :\r\n            _l instanceof MatrixData ? Array.from(_l.data) : null;\r\n        const r = _r instanceof ScalarData ? _r.value : \r\n            _r instanceof VectorData ? Array.from(_r.data) : \r\n            _r instanceof MatrixData ? Array.from(_r.data) :\r\n            null;\r\n\r\n        switch (node.operator) {\r\n            case \"+\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x + ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x + rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln + x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln + rn, t);\r\n            }\r\n            case \"-\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x - ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x - rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln - x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln - rn, t);\r\n            }\r\n            case \"*\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n\r\n                    if (_l instanceof MatrixData && _r instanceof MatrixData) {\r\n                        const result = matrixMultiply(la, _l.typeInfo, ra, _r.typeInfo);\r\n                        if (result === null) {\r\n                            console.error(`Matrix multiplication failed. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        const colsB = MatrixTypeSize[_r.typeInfo.name][0];\r\n                        const rowsA = MatrixTypeSize[_l.typeInfo.name][1];\r\n                        const type = this.getTypeInfo(`mat${colsB}x${rowsA}f`);\r\n                        return new MatrixData(result, type);\r\n                    } else if (_l instanceof MatrixData && _r instanceof VectorData) {\r\n                        const result = matrixVectorMultiply(la, _l.typeInfo, ra, _r.typeInfo);\r\n                        if (result === null) {\r\n                            console.error(`Matrix vector multiplication failed. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        return new VectorData(result, _r.typeInfo);\r\n                    } else if (_l instanceof VectorData && _r instanceof MatrixData) {\r\n                        const result = vectorMatrixMultiply(la, _l.typeInfo, ra, _r.typeInfo);\r\n                        if (result === null) {\r\n                            console.error(`Matrix vector multiplication failed. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        return new VectorData(result, _l.typeInfo);\r\n                    } else {\r\n                        if (la.length !== ra.length) {\r\n                            console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        const result = la.map((x: number, i: number) => x * ra[i]);\r\n                        return new VectorData(result, _l.typeInfo);\r\n                    }\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x * rn);\r\n                    if (_l instanceof MatrixData) {\r\n                        return new MatrixData(result, _l.typeInfo);\r\n                    }\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln * x);\r\n                    if (_r instanceof MatrixData) {\r\n                        return new MatrixData(result, _r.typeInfo);\r\n                    }\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln * rn, t);\r\n            }\r\n            case \"%\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x % ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x % rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln % x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln % rn, t);\r\n            }\r\n            case \"/\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x / ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x / rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln / x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln / rn, t);\r\n            }\r\n            case \"&\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x & ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x & rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln & x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln & rn, t);\r\n            }\r\n            case \"|\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x | ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x | rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln | x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln | rn, t);\r\n            }\r\n            case \"^\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x ^ ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x ^ rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln ^ x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln ^ rn, t);\r\n            }\r\n            case \"<<\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x << ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x << rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln << x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln << rn, t);\r\n            }\r\n            case \">>\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x >> ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x >> rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln >> x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln >> rn, t);\r\n            }\r\n            case \">\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x > ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x > rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln > x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln > rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"<\":\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x < ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x < rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln < x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln < rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            case \"==\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x === ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x == rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln == x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln === rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"!=\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x !== ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x !== rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln !== x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln !== rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \">=\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x >= ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x >= rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln >= x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln >= rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"<=\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x <= ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x <= rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln <= x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln <= rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"&&\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x && ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x && rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln && x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln && rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"||\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x || ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x || rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln || x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln || rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n        }\r\n        console.error(`Unknown operator ${node.operator}. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalCall(node: CallExpr, context: ExecContext): Data | null {\r\n        if (node.cachedReturnValue !== null) {\r\n            return node.cachedReturnValue;\r\n        }\r\n\r\n        const subContext = context.clone();\r\n        subContext.currentFunctionName = node.name;\r\n\r\n        const f = context.getFunction(node.name);\r\n        if (!f) {\r\n            if (node.isBuiltin) {\r\n                return this._callBuiltinFunction(node, subContext);\r\n            }\r\n\r\n            const typeInfo = this.getTypeInfo(node.name);\r\n            if (typeInfo) {\r\n                return this._evalCreate(node, context);\r\n            }\r\n\r\n            console.error(`Unknown function \"${node.name}\". Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n            const arg = f.node.args[ai];\r\n            const value = this.evalExpression(node.args[ai], subContext);\r\n            subContext.createVariable(arg.name, value, arg);\r\n        }\r\n\r\n        return this._execStatements(f.node.body, subContext);\r\n    }\r\n\r\n    _callBuiltinFunction(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        switch (node.name) {\r\n            // Logical Built-in Functions\r\n            case \"all\":\r\n                return this.builtins.All(node, context);\r\n            case \"any\":\r\n                return this.builtins.Any(node, context);\r\n            case \"select\":\r\n                return this.builtins.Select(node, context);\r\n\r\n            // Array Built-in Functions\r\n            case \"arrayLength\":\r\n                return this.builtins.ArrayLength(node, context);\r\n\r\n            // Numeric Built-in Functions\r\n            case \"abs\":\r\n                return this.builtins.Abs(node, context);\r\n            case \"acos\":\r\n                return this.builtins.Acos(node, context);\r\n            case \"acosh\":\r\n                return this.builtins.Acosh(node, context);\r\n            case \"asin\":\r\n                return this.builtins.Asin(node, context);\r\n            case \"asinh\":\r\n                return this.builtins.Asinh(node, context);\r\n            case \"atan\":\r\n                return this.builtins.Atan(node, context);\r\n            case \"atanh\":\r\n                return this.builtins.Atanh(node, context);\r\n            case \"atan2\":\r\n                return this.builtins.Atan2(node, context);\r\n            case \"ceil\":\r\n                return this.builtins.Ceil(node, context);\r\n            case \"clamp\":\r\n                return this.builtins.Clamp(node, context);\r\n            case \"cos\":\r\n                return this.builtins.Cos(node, context);\r\n            case \"cosh\":\r\n                return this.builtins.Cosh(node, context);\r\n            case \"countLeadingZeros\":\r\n                return this.builtins.CountLeadingZeros(node, context);\r\n            case \"countOneBits\":\r\n                return this.builtins.CountOneBits(node, context);\r\n            case \"countTrailingZeros\":\r\n                return this.builtins.CountTrailingZeros(node, context);\r\n            case \"cross\":\r\n                return this.builtins.Cross(node, context);\r\n            case \"degrees\":\r\n                return this.builtins.Degrees(node, context);\r\n            case \"determinant\":\r\n                return this.builtins.Determinant(node, context);\r\n            case \"distance\":\r\n                return this.builtins.Distance(node, context);\r\n            case \"dot\":\r\n                return this.builtins.Dot(node, context);\r\n            case \"dot4U8Packed\":\r\n                return this.builtins.Dot4U8Packed(node, context);\r\n            case \"dot4I8Packed\":\r\n                return this.builtins.Dot4I8Packed(node, context);\r\n            case \"exp\":\r\n                return this.builtins.Exp(node, context);\r\n            case \"exp2\":\r\n                return this.builtins.Exp2(node, context);\r\n            case \"extractBits\":\r\n                return this.builtins.ExtractBits(node, context);\r\n            case \"faceForward\":\r\n                return this.builtins.FaceForward(node, context);\r\n            case \"firstLeadingBit\":\r\n                return this.builtins.FirstLeadingBit(node, context);\r\n            case \"firstTrailingBit\":\r\n                return this.builtins.FirstTrailingBit(node, context);\r\n            case \"floor\":\r\n                return this.builtins.Floor(node, context);\r\n            case \"fma\":\r\n                return this.builtins.Fma(node, context);\r\n            case \"fract\":\r\n                return this.builtins.Fract(node, context);\r\n            case \"frexp\":\r\n                return this.builtins.Frexp(node, context);\r\n            case \"insertBits\":\r\n                return this.builtins.InsertBits(node, context);\r\n            case \"inverseSqrt\":\r\n                return this.builtins.InverseSqrt(node, context);\r\n            case \"ldexp\":\r\n                return this.builtins.Ldexp(node, context);\r\n            case \"length\":\r\n                return this.builtins.Length(node, context);\r\n            case \"log\":\r\n                return this.builtins.Log(node, context);\r\n            case \"log2\":\r\n                return this.builtins.Log2(node, context);\r\n            case \"max\":\r\n                return this.builtins.Max(node, context);\r\n            case \"min\":\r\n                return this.builtins.Min(node, context);\r\n            case \"mix\":\r\n                return this.builtins.Mix(node, context);\r\n            case \"modf\":\r\n                return this.builtins.Modf(node, context);\r\n            case \"normalize\":\r\n                return this.builtins.Normalize(node, context);\r\n            case \"pow\":\r\n                return this.builtins.Pow(node, context);\r\n            case \"quantizeToF16\":\r\n                return this.builtins.QuantizeToF16(node, context);\r\n            case \"radians\":\r\n                return this.builtins.Radians(node, context);\r\n            case \"reflect\":\r\n                return this.builtins.Reflect(node, context);\r\n            case \"refract\":\r\n                return this.builtins.Refract(node, context);\r\n            case \"reverseBits\":\r\n                return this.builtins.ReverseBits(node, context);\r\n            case \"round\":\r\n                return this.builtins.Round(node, context);\r\n            case \"saturate\":\r\n                return this.builtins.Saturate(node, context);\r\n            case \"sign\":\r\n                return this.builtins.Sign(node, context);\r\n            case \"sin\":\r\n                return this.builtins.Sin(node, context);\r\n            case \"sinh\":\r\n                return this.builtins.Sinh(node, context);\r\n            case \"smoothstep\":\r\n                return this.builtins.SmoothStep(node, context);\r\n            case \"sqrt\":\r\n                return this.builtins.Sqrt(node, context);\r\n            case \"step\":\r\n                return this.builtins.Step(node, context);\r\n            case \"tan\":\r\n                return this.builtins.Tan(node, context);\r\n            case \"tanh\":\r\n                return this.builtins.Tanh(node, context);\r\n            case \"transpose\":\r\n                return this.builtins.Transpose(node, context);\r\n            case \"trunc\":\r\n                return this.builtins.Trunc(node, context);\r\n\r\n            // Derivative Built-in Functions\r\n            case \"dpdx\":\r\n                return this.builtins.Dpdx(node, context);\r\n            case \"dpdxCoarse\":\r\n                return this.builtins.DpdxCoarse(node, context);\r\n            case \"dpdxFine\":\r\n                return this.builtins.DpdxFine(node, context);\r\n            case \"dpdy\":\r\n                return this.builtins.Dpdy(node, context);\r\n            case \"dpdyCoarse\":\r\n                return this.builtins.DpdyCoarse(node, context);\r\n            case \"dpdyFine\":\r\n                return this.builtins.DpdyFine(node, context);\r\n            case \"fwidth\":\r\n                return this.builtins.Fwidth(node, context);\r\n            case \"fwidthCoarse\":\r\n                return this.builtins.FwidthCoarse(node, context);\r\n            case \"fwidthFine\":\r\n                return this.builtins.FwidthFine(node, context);\r\n\r\n            // Texture Built-in Functions\r\n            case \"textureDimensions\":\r\n                return this.builtins.TextureDimensions(node, context);\r\n            case \"textureGather\":\r\n                return this.builtins.TextureGather(node, context);\r\n            case \"textureGatherCompare\":\r\n                return this.builtins.TextureGatherCompare(node, context);\r\n            case \"textureLoad\":\r\n                return this.builtins.TextureLoad(node, context);\r\n            case \"textureNumLayers\":\r\n                return this.builtins.TextureNumLayers(node, context);\r\n            case \"textureNumLevels\":\r\n                return this.builtins.TextureNumLevels(node, context);\r\n            case \"textureNumSamples\":\r\n                return this.builtins.TextureNumSamples(node, context);\r\n            case \"textureSample\":\r\n                return this.builtins.TextureSample(node, context);\r\n            case \"textureSampleBias\":\r\n                return this.builtins.TextureSampleBias(node, context);\r\n            case \"textureSampleCompare\":\r\n                return this.builtins.TextureSampleCompare(node, context);\r\n            case \"textureSampleCompareLevel\":\r\n                return this.builtins.TextureSampleCompareLevel(node, context);\r\n            case \"textureSampleGrad\":\r\n                return this.builtins.TextureSampleGrad(node, context);\r\n            case \"textureSampleLevel\":\r\n                return this.builtins.TextureSampleLevel(node, context);\r\n            case \"textureSampleBaseClampToEdge\":\r\n                return this.builtins.TextureSampleBaseClampToEdge(node, context);\r\n            case \"textureStore\":\r\n                return this.builtins.TextureStore(node, context);\r\n\r\n            // Atomic Built-in Functions\r\n            case \"atomicLoad\":\r\n                return this.builtins.AtomicLoad(node, context);\r\n            case \"atomicStore\":\r\n                return this.builtins.AtomicStore(node, context);\r\n            case \"atomicAdd\":\r\n                return this.builtins.AtomicAdd(node, context);\r\n            case \"atomicSub\":\r\n                return this.builtins.AtomicSub(node, context);\r\n            case \"atomicMax\":\r\n                return this.builtins.AtomicMax(node, context);\r\n            case \"atomicMin\":\r\n                return this.builtins.AtomicMin(node, context);\r\n            case \"atomicAnd\":\r\n                return this.builtins.AtomicAnd(node, context);\r\n            case \"atomicOr\":\r\n                return this.builtins.AtomicOr(node, context);\r\n            case \"atomicXor\":\r\n                return this.builtins.AtomicXor(node, context);\r\n            case \"atomicExchange\":\r\n                return this.builtins.AtomicExchange(node, context);\r\n            case \"atomicCompareExchangeWeak\":\r\n                return this.builtins.AtomicCompareExchangeWeak(node, context);\r\n\r\n            // Data Packing Built-in Functions\r\n            case \"pack4x8snorm\":\r\n                return this.builtins.Pack4x8snorm(node, context);\r\n            case \"pack4x8unorm\":\r\n                return this.builtins.Pack4x8unorm(node, context);\r\n            case \"pack4xI8\":\r\n                return this.builtins.Pack4xI8(node, context);\r\n            case \"pack4xU8\":\r\n                return this.builtins.Pack4xU8(node, context);\r\n            case \"pack4x8Clamp\":\r\n                return this.builtins.Pack4x8Clamp(node, context);\r\n            case \"pack4xU8Clamp\":\r\n                return this.builtins.Pack4xU8Clamp(node, context);\r\n            case \"pack2x16snorm\":\r\n                return this.builtins.Pack2x16snorm(node, context);\r\n            case \"pack2x16unorm\":\r\n                return this.builtins.Pack2x16unorm(node, context);\r\n            case \"pack2x16float\":\r\n                return this.builtins.Pack2x16float(node, context);\r\n\r\n            // Data Unpacking Built-in Functions\r\n            case \"unpack4x8snorm\":\r\n                return this.builtins.Unpack4x8snorm(node, context);\r\n            case \"unpack4x8unorm\":\r\n                return this.builtins.Unpack4x8unorm(node, context);\r\n            case \"unpack4xI8\":\r\n                return this.builtins.Unpack4xI8(node, context);\r\n            case \"unpack4xU8\":\r\n                return this.builtins.Unpack4xU8(node, context);\r\n            case \"unpack2x16snorm\":\r\n                return this.builtins.Unpack2x16snorm(node, context);\r\n            case \"unpack2x16unorm\":\r\n                return this.builtins.Unpack2x16unorm(node, context);\r\n            case \"unpack2x16float\":\r\n                return this.builtins.Unpack2x16float(node, context);\r\n\r\n            // Synchronization Built-in Functions\r\n            case \"storageBarrier\":\r\n                return this.builtins.StorageBarrier(node, context);\r\n            case \"textureBarrier\":\r\n                return this.builtins.TextureBarrier(node, context);\r\n            case \"workgroupBarrier\":\r\n                return this.builtins.WorkgroupBarrier(node, context);\r\n            case \"workgroupUniformLoad\":\r\n                return this.builtins.WorkgroupUniformLoad(node, context);\r\n\r\n            // Subgroup Built-in Functions\r\n            case \"subgroupAdd\":\r\n                return this.builtins.SubgroupAdd(node, context);\r\n            case \"subgroupExclusiveAdd\":\r\n                return this.builtins.SubgroupExclusiveAdd(node, context);\r\n            case \"subgroupInclusiveAdd\":\r\n                return this.builtins.SubgroupInclusiveAdd(node, context);\r\n            case \"subgroupAll\":\r\n                return this.builtins.SubgroupAll(node, context);\r\n            case \"subgroupAnd\":\r\n                return this.builtins.SubgroupAnd(node, context);\r\n            case \"subgroupAny\":\r\n                return this.builtins.SubgroupAny(node, context);\r\n            case \"subgroupBallot\":\r\n                return this.builtins.SubgroupBallot(node, context);\r\n            case \"subgroupBroadcast\":\r\n                return this.builtins.SubgroupBroadcast(node, context);\r\n            case \"subgroupBroadcastFirst\":\r\n                return this.builtins.SubgroupBroadcastFirst(node, context);\r\n            case \"subgroupElect\":\r\n                return this.builtins.SubgroupElect(node, context);\r\n            case \"subgroupMax\":\r\n                return this.builtins.SubgroupMax(node, context);\r\n            case \"subgroupMin\":\r\n                return this.builtins.SubgroupMin(node, context);\r\n            case \"subgroupMul\":\r\n                return this.builtins.SubgroupMul(node, context);\r\n            case \"subgroupExclusiveMul\":\r\n                return this.builtins.SubgroupExclusiveMul(node, context);\r\n            case \"subgroupInclusiveMul\":\r\n                return this.builtins.SubgroupInclusiveMul(node, context);\r\n            case \"subgroupOr\":\r\n                return this.builtins.SubgroupOr(node, context);\r\n            case \"subgroupShuffle\":\r\n                return this.builtins.SubgroupShuffle(node, context);\r\n            case \"subgroupShuffleDown\":\r\n                return this.builtins.SubgroupShuffleDown(node, context);\r\n            case \"subgroupShuffleUp\":\r\n                return this.builtins.SubgroupShuffleUp(node, context);\r\n            case \"subgroupShuffleXor\":\r\n                return this.builtins.SubgroupShuffleXor(node, context);\r\n            case \"subgroupXor\":\r\n                return this.builtins.SubgroupXor(node, context);\r\n\r\n            // Quad Operations\r\n            case \"quadBroadcast\":\r\n                return this.builtins.QuadBroadcast(node, context);\r\n            case \"quadSwapDiagonal\":\r\n                return this.builtins.QuadSwapDiagonal(node, context);\r\n            case \"quadSwapX\":\r\n                return this.builtins.QuadSwapX(node, context);\r\n            case \"quadSwapY\":\r\n                return this.builtins.QuadSwapY(node, context);\r\n        }\r\n\r\n        const f = context.getFunction(node.name);\r\n        if (f) {\r\n            const subContext = context.clone();\r\n            for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n                const arg = f.node.args[ai];\r\n                const value = this.evalExpression(node.args[ai], subContext);\r\n                subContext.setVariable(arg.name, value, arg);\r\n            }\r\n            return this._execStatements(f.node.body, subContext);\r\n        }\r\n\r\n        //console.error(`Function ${node.name} not found. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _callConstructorValue(node: CreateExpr, context: ExecContext): Data | null {\r\n        if (!node.args || node.args.length === 0) {\r\n            return new ScalarData(0, this.getTypeInfo(node.type));\r\n        }\r\n        const v = this.evalExpression(node.args[0], context);\r\n        v.typeInfo = this.getTypeInfo(node.type);\r\n        return v.getSubData(this, node.postfix, context).clone();\r\n    }\r\n\r\n    _callConstructorVec(node: CreateExpr | LiteralExpr, context: ExecContext): Data | null {\r\n        const typeInfo = this.getTypeInfo(node.type);\r\n        const typeName = node.type.getTypeName();\r\n\r\n        const count = VectorTypeSize[typeName];\r\n        if (count === undefined) {\r\n            console.error(`Invalid vec constructor ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const values: number[] = [];\r\n        if (node instanceof LiteralExpr) {\r\n            if (node.isVector) {\r\n                const a = node.vectorValue;\r\n                for (const v of a) {\r\n                    values.push(v);\r\n                }\r\n            } else {\r\n                values.push(node.scalarValue);\r\n            }\r\n        } else {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    const argValue = this.evalExpression(arg, context) ;\r\n                    if (argValue instanceof VectorData) {\r\n                        const vd = argValue.data;\r\n                        for (let i = 0; i < vd.length; ++i) {\r\n                            let e = vd[i];\r\n                            values.push(e);\r\n                        }\r\n                    } else if (argValue instanceof ScalarData) {\r\n                        let v = argValue.value;\r\n                        values.push(v);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (node.type instanceof TemplateType && node.type.format === null) {\r\n            node.type.format = TemplateType.f32; // TODO: get the format from the type of the arg.\r\n        }\r\n\r\n        if (values.length === 0) {\r\n            const values = new Array(count).fill(0);\r\n            return new VectorData(values, typeInfo).getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            while (values.length < count) {\r\n                values.push(values[0]);\r\n            }\r\n        }\r\n\r\n        if (values.length < count) {\r\n            console.error(`Invalid vec constructor. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const data = new VectorData(values.length > count ? values.slice(0, count) : values, typeInfo);\r\n        return data.getSubData(this, node.postfix, context);\r\n    }\r\n\r\n    _callConstructorMatrix(node: CreateExpr | LiteralExpr, context: ExecContext): Data | null {\r\n        const typeInfo = this.getTypeInfo(node.type);\r\n        const typeName = node.type.getTypeName();\r\n\r\n        const count = MatrixTypeSize[typeName];\r\n        if (count === undefined) {\r\n            console.error(`Invalid matrix constructor ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const values = [];\r\n        if (node instanceof LiteralExpr) {\r\n            if (node.isVector) {\r\n                const a = node.vectorValue;\r\n                for (const v of a) {\r\n                    values.push(v);\r\n                }\r\n            } else {\r\n                values.push(node.scalarValue);\r\n            }\r\n        } else {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    const argValue = this.evalExpression(arg, context) ;\r\n                    if (argValue instanceof VectorData) {\r\n                        values.push(...argValue.data);\r\n                    } else if (argValue instanceof ScalarData) {\r\n                        values.push(argValue.value);\r\n                    } else if (argValue instanceof MatrixData) {\r\n                        values.push(...argValue.data);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((typeInfo instanceof TemplateInfo) && typeInfo.format === null) {\r\n            typeInfo.format = this.getTypeInfo(\"f32\");\r\n        }\r\n\r\n        if (values.length === 0) {\r\n            const values = new Array(count[2]).fill(0);\r\n            return new MatrixData(values, typeInfo).getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        if (values.length !== count[2]) {\r\n            console.error(`Invalid matrix constructor. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        return new MatrixData(values, typeInfo).getSubData(this, node.postfix, context);\r\n    }\r\n}\r\n","import { Const, Alias, Struct } from \"../wgsl_ast.js\";\r\n\r\nexport class ParseContext {\r\n  constants: Map<string, Const> = new Map();\r\n  aliases: Map<string, Alias> = new Map();\r\n  structs: Map<string, Struct> = new Map();\r\n}\r\n","import { WgslScanner, Token, TokenType, TokenTypes } from \"./wgsl_scanner.js\";\r\nimport * as AST from \"./wgsl_ast.js\";\r\nimport { WgslExec } from \"./wgsl_exec.js\";\r\nimport { TemplateInfo } from \"./reflect/info.js\";\r\nimport { ScalarData } from \"./wgsl_ast.js\";\r\nimport { ParseContext } from \"./ast/parse_context.js\";\r\n\r\n/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).\r\nexport class WgslParser {\r\n  _tokens: Token[] = [];\r\n  _current: number = 0;\r\n  _currentLine: number = 1;\r\n  _deferArrayCountEval: Object[] = [];\r\n  _currentLoop: AST.Statement[] = [];\r\n  _context = new ParseContext();\r\n  _exec = new WgslExec();\r\n  _forwardTypeCount: number = 0;;\r\n\r\n  parse(tokensOrCode: Token[] | string): AST.Statement[] {\r\n    this._initialize(tokensOrCode);\r\n\r\n    this._deferArrayCountEval.length = 0;\r\n\r\n    const statements: AST.Statement[] = [];\r\n    while (!this._isAtEnd()) {\r\n      const statement = this._global_decl_or_directive();\r\n      if (!statement) {\r\n        break;\r\n      }\r\n      statements.push(statement);\r\n    }\r\n\r\n    // Since constants can be declared after they are used, and\r\n    // constants can be used to size arrays, defer calculating the\r\n    // size until after the shader has finished parsing.\r\n    if (this._deferArrayCountEval.length > 0) {\r\n      for (const arrayDecl of this._deferArrayCountEval) {\r\n        const arrayType = arrayDecl[\"arrayType\"];\r\n        const countNode = arrayDecl[\"countNode\"];\r\n\r\n        if (countNode instanceof AST.VariableExpr) {\r\n          const variable = countNode as AST.VariableExpr;\r\n          const name = variable.name;\r\n          const constant = this._context.constants.get(name);\r\n          if (constant) {\r\n            try {\r\n              const count = constant.constEvaluate(this._exec);\r\n              arrayType.count = count;\r\n            } catch (e) {\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this._deferArrayCountEval.length = 0;\r\n    }\r\n\r\n    if (this._forwardTypeCount > 0) {\r\n      for (const statement of statements) {\r\n        statement.search((node) => {\r\n          if (node instanceof AST.Member) {\r\n            node.type = this._forwardType(node.type);\r\n          } else if (node instanceof AST.PointerType) {\r\n            node.type = this._forwardType(node.type);\r\n          } else if (node instanceof AST.ArrayType) {\r\n            node.format = this._forwardType(node.format);\r\n          } else if (node instanceof AST.Var || node instanceof AST.Let || node instanceof AST.Const) {\r\n            node.type = this._forwardType(node.type);\r\n          } else if (node instanceof AST.Function) {\r\n            node.returnType = this._forwardType(node.returnType);\r\n          } else if (node instanceof AST.Argument) {\r\n            node.type = this._forwardType(node.type);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return statements;\r\n  }\r\n\r\n  _forwardType(t: AST.Type | null): AST.Type | null {\r\n    if (t instanceof AST.ForwardType) {\r\n      const ft = this._getType(t.name);\r\n      if (ft) {\r\n        return ft;\r\n      }\r\n    } else if (t instanceof AST.PointerType) {\r\n      t.type = this._forwardType(t.type);\r\n    } else if (t instanceof AST.ArrayType) {\r\n      t.format = this._forwardType(t.format);\r\n    }\r\n    return t;\r\n  }\r\n\r\n  _initialize(tokensOrCode: Token[] | string) {\r\n    if (tokensOrCode) {\r\n      if (typeof tokensOrCode == \"string\") {\r\n        const scanner = new WgslScanner(tokensOrCode);\r\n        this._tokens = scanner.scanTokens();\r\n      } else {\r\n        this._tokens = tokensOrCode;\r\n      }\r\n    } else {\r\n      this._tokens = [];\r\n    }\r\n    this._current = 0;\r\n  }\r\n\r\n  _updateNode<T extends AST.Node>(n: T, l?: number, token?: Token): T {\r\n    n.line = l ?? this._currentLine;\r\n    \r\n    // Capture position information from the provided token or the most recent token\r\n    const sourceToken = token || (this._current > 0 ? this._previous() : null);\r\n    if (sourceToken) {\r\n      n.start = sourceToken.start;\r\n      n.length = sourceToken.end - sourceToken.start;\r\n    }\r\n    \r\n    return n;\r\n  }\r\n\r\n  _error(token: Token, message: string | null): Object {\r\n    return {\r\n      token,\r\n      message,\r\n      toString: function () {\r\n        return `${message}`;\r\n      },\r\n    };\r\n  }\r\n\r\n  _isAtEnd(): boolean {\r\n    return (\r\n      this._current >= this._tokens.length ||\r\n      this._peek().type == TokenTypes.eof\r\n    );\r\n  }\r\n\r\n  _match(types: TokenType | TokenType[]): boolean {\r\n    if (types instanceof TokenType) {\r\n      if (this._check(types)) {\r\n        this._advance();\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0, l = types.length; i < l; ++i) {\r\n      const type = types[i];\r\n      if (this._check(type)) {\r\n        this._advance();\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _consume(types: TokenType | TokenType[], message: string | null): Token {\r\n    if (this._check(types)) {\r\n      return this._advance();\r\n    }\r\n    throw this._error(this._peek(), `${message}. Line:${this._currentLine}`);\r\n  }\r\n\r\n  _check(types: TokenType | TokenType[]): boolean {\r\n    if (this._isAtEnd()) {\r\n      return false;\r\n    }\r\n    const tk = this._peek();\r\n    if (types instanceof Array) {\r\n      const t = tk.type;\r\n      let hasNameType = false;\r\n      for (const type of types) {\r\n        if (t === type) {\r\n          return true;\r\n        }\r\n        if (type === TokenTypes.tokens.name) {\r\n          hasNameType =  true;\r\n        }\r\n      }\r\n      if (hasNameType) {\r\n        // ident can include any of the other keywords, so special case it.\r\n        const match = (TokenTypes.tokens.name.rule as RegExp).exec(tk.lexeme);\r\n        if (match && match.index == 0 && match[0] == tk.lexeme) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    if (tk.type === types) {\r\n      return true;\r\n    }\r\n\r\n    // ident can include any of the other keywords, so special case it.\r\n    if (types === TokenTypes.tokens.name) {\r\n      const match = (TokenTypes.tokens.name.rule as RegExp).exec(tk.lexeme);\r\n      return match && match.index == 0 && match[0] == tk.lexeme;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _advance(): Token {\r\n    this._currentLine = this._peek()?.line ?? -1;\r\n    if (!this._isAtEnd()) {\r\n      this._current++;\r\n    }\r\n    return this._previous();\r\n  }\r\n\r\n  _peek(): Token {\r\n    return this._tokens[this._current];\r\n  }\r\n\r\n  _previous(): Token {\r\n    return this._tokens[this._current - 1];\r\n  }\r\n\r\n  _global_decl_or_directive(): AST.Statement | null {\r\n    // semicolon\r\n    // global_variable_decl semicolon\r\n    // global_constant_decl semicolon\r\n    // type_alias semicolon\r\n    // struct_decl\r\n    // function_decl\r\n    // enable_directive\r\n\r\n    // Ignore any stand-alone semicolons\r\n    while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd());\r\n\r\n    if (this._match(TokenTypes.keywords.alias)) {\r\n      const type = this._type_alias();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([type]);\r\n      return type;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.diagnostic)) {\r\n      const directive = this._diagnostic();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([directive]);\r\n      return directive;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.requires)) {\r\n      const requires = this._requires_directive();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([requires]);\r\n      return requires;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.enable)) {\r\n      const enable = this._enable_directive();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([enable]);\r\n      return enable;\r\n    }\r\n\r\n    // The following statements have an optional attribute*\r\n    const attrs = this._attribute();\r\n\r\n    if (this._check(TokenTypes.keywords.var)) {\r\n      const _var = this._global_variable_decl();\r\n      if (_var != null) {\r\n        _var.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_var]);\r\n      return _var;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.override)) {\r\n      const _override = this._override_variable_decl();\r\n      if (_override != null) {\r\n        _override.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_override]);\r\n      return _override;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.let)) {\r\n      const _let = this._global_let_decl();\r\n      if (_let != null) {\r\n        _let.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_let]);\r\n      return _let;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.const)) {\r\n      const _const = this._global_const_decl();\r\n      if (_const != null) {\r\n        _const.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_const]);\r\n      return _const;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.struct)) {\r\n      const _struct = this._struct_decl();\r\n      if (_struct != null) {\r\n        _struct.attributes = attrs;\r\n      }\r\n      this._exec.reflection.updateAST([_struct]);\r\n      return _struct;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.fn)) {\r\n      const _fn = this._function_decl();\r\n      if (_fn != null) {\r\n        _fn.attributes = attrs;\r\n      }\r\n      this._exec.reflection.updateAST([_fn]);\r\n      return _fn;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _function_decl(): AST.Function | null {\r\n    // attribute* function_header compound_statement\r\n    // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\r\n    if (!this._match(TokenTypes.keywords.fn)) {\r\n      return null;\r\n    }\r\n\r\n    const startLine = this._currentLine;\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected function name.\"\r\n    ).toString();\r\n\r\n    this._consume(\r\n      TokenTypes.tokens.paren_left,\r\n      \"Expected '(' for function arguments.\"\r\n    );\r\n\r\n    const args: AST.Argument[] = [];\r\n    if (!this._check(TokenTypes.tokens.paren_right)) {\r\n      do {\r\n        if (this._check(TokenTypes.tokens.paren_right)) {\r\n          break;\r\n        }\r\n        const argAttrs = this._attribute();\r\n\r\n        const name = this._consume(\r\n          TokenTypes.tokens.name,\r\n          \"Expected argument name.\"\r\n        ).toString();\r\n\r\n        this._consume(\r\n          TokenTypes.tokens.colon,\r\n          \"Expected ':' for argument type.\"\r\n        );\r\n\r\n        const typeAttrs = this._attribute();\r\n        const type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n\r\n          args.push(this._updateNode(new AST.Argument(name, type, argAttrs)));\r\n        }\r\n      } while (this._match(TokenTypes.tokens.comma));\r\n    }\r\n\r\n    this._consume(\r\n      TokenTypes.tokens.paren_right,\r\n      \"Expected ')' after function arguments.\"\r\n    );\r\n\r\n    let _return: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.arrow)) {\r\n      const attrs = this._attribute();\r\n      _return = this._type_decl();\r\n      if (_return != null) {\r\n        _return.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    const body = this._compound_statement();\r\n\r\n    const endLine = this._currentLine;\r\n\r\n    return this._updateNode(new AST.Function(name, args, _return, body, startLine, endLine), startLine);\r\n  }\r\n\r\n  _compound_statement(): AST.Statement[] {\r\n    // brace_left statement* brace_right\r\n    const statements: AST.Statement[] = [];\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for block.\");\r\n    while (!this._check(TokenTypes.tokens.brace_right)) {\r\n      const statement = this._statement();\r\n      if (statement !== null) {\r\n        statements.push(statement as AST.Statement);\r\n      }\r\n    }\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for block.\");\r\n\r\n    return statements;\r\n  }\r\n\r\n  _statement(): AST.Statement | AST.Statement[] | null {\r\n    // semicolon\r\n    // return_statement semicolon\r\n    // if_statement\r\n    // switch_statement\r\n    // loop_statement\r\n    // for_statement\r\n    // func_call_statement semicolon\r\n    // variable_statement semicolon\r\n    // break_statement semicolon\r\n    // continue_statement semicolon\r\n    // continuing_statement compound_statement\r\n    // discard semicolon\r\n    // assignment_statement semicolon\r\n    // compound_statement\r\n    // increment_statement semicolon\r\n    // decrement_statement semicolon\r\n    // static_assert_statement semicolon\r\n\r\n    // Ignore any stand-alone semicolons\r\n    while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd());\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.if)) {\r\n      return this._if_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.switch)) {\r\n      return this._switch_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.loop)) {\r\n      return this._loop_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.for)) {\r\n      return this._for_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.while)) {\r\n      return this._while_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.continuing)) {\r\n      return this._continuing_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.static_assert)) {\r\n      return this._static_assert_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.tokens.brace_left)) {\r\n      return this._compound_statement();\r\n    }\r\n\r\n    let result: AST.Statement | null = null;\r\n    if (this._check(TokenTypes.keywords.return)) {\r\n      result = this._return_statement();\r\n    } else if (this._check([TokenTypes.keywords.var, TokenTypes.keywords.let, TokenTypes.keywords.const])) {\r\n      result = this._variable_statement();\r\n    } else if (this._match(TokenTypes.keywords.discard)) {\r\n      result = this._updateNode(new AST.Discard());\r\n    } else if (this._match(TokenTypes.keywords.break)) {\r\n      const breakStmt = this._updateNode(new AST.Break());\r\n      if (this._currentLoop.length > 0) {\r\n        const loop = this._currentLoop[this._currentLoop.length - 1];\r\n        breakStmt.loopId = loop.id;\r\n      } else {\r\n        // This break statement is not inside a loop.\r\n        //throw this._error(this._peek(), `Break statement must be inside a loop. Line: ${breakStmt.line}`);\r\n      }\r\n      result = breakStmt;\r\n      if (this._check(TokenTypes.keywords.if)) {\r\n        // break-if\r\n        this._advance();\r\n        breakStmt.condition = this._optional_paren_expression();\r\n      }\r\n    } else if (this._match(TokenTypes.keywords.continue)) {\r\n      const continueStmt = this._updateNode(new AST.Continue());\r\n      if (this._currentLoop.length > 0) {\r\n        const loop = this._currentLoop[this._currentLoop.length - 1];\r\n        continueStmt.loopId = loop.id;\r\n      } else {\r\n        // This continue statement is not inside a loop.\r\n        throw this._error(this._peek(), `Continue statement must be inside a loop. Line: ${continueStmt.line}`);\r\n      }\r\n      result = continueStmt;\r\n    } else {\r\n      result =\r\n        this._increment_decrement_statement() ||\r\n        this._func_call_statement() ||\r\n        this._assignment_statement();\r\n    }\r\n\r\n    if (result != null) {\r\n      this._consume(\r\n        TokenTypes.tokens.semicolon,\r\n        \"Expected ';' after statement.\"\r\n      );\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  _static_assert_statement(): AST.StaticAssert | null {\r\n    if (!this._match(TokenTypes.keywords.static_assert)) {\r\n      return null;\r\n    }\r\n    const line = this._currentLine;\r\n    const expression = this._optional_paren_expression();\r\n    return this._updateNode(new AST.StaticAssert(expression), line);\r\n  }\r\n\r\n  _while_statement(): AST.While | null {\r\n    if (!this._match(TokenTypes.keywords.while)) {\r\n      return null;\r\n    }\r\n\r\n    const whileLoop = this._updateNode(new AST.While(null, null));\r\n    this._currentLoop.push(whileLoop);\r\n\r\n    whileLoop.condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    whileLoop.body = this._compound_statement();\r\n\r\n    this._currentLoop.pop();\r\n\r\n    return whileLoop;\r\n  }\r\n\r\n  _continuing_statement(): AST.Continuing | null {\r\n    const loopId = this._currentLoop.length > 0 ? this._currentLoop[this._currentLoop.length - 1].id : -1;\r\n    if (!this._match(TokenTypes.keywords.continuing)) {\r\n      return null;\r\n    }\r\n    const line = this._currentLine;\r\n    const block = this._compound_statement();\r\n    return this._updateNode(new AST.Continuing(block, loopId), line);\r\n  }\r\n\r\n  _for_statement(): AST.For | null {\r\n    // for paren_left for_header paren_right compound_statement\r\n    if (!this._match(TokenTypes.keywords.for)) {\r\n      return null;\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\r\n\r\n    const forLoop = this._updateNode(new AST.For(null, null, null, null));\r\n\r\n    this._currentLoop.push(forLoop);\r\n\r\n    // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\r\n    forLoop.init = !this._check(TokenTypes.tokens.semicolon)\r\n      ? this._for_init()\r\n      : null;\r\n    this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n    forLoop.condition = !this._check(TokenTypes.tokens.semicolon)\r\n      ? this._short_circuit_or_expression()\r\n      : null;\r\n    this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n    forLoop.increment = !this._check(TokenTypes.tokens.paren_right)\r\n      ? this._for_increment()\r\n      : null;\r\n\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    forLoop.body = this._compound_statement();\r\n\r\n    this._currentLoop.pop();\r\n\r\n    return forLoop;\r\n  }\r\n\r\n  _for_init(): AST.Statement | null {\r\n    // (variable_statement assignment_statement func_call_statement)?\r\n    return (\r\n      this._variable_statement() ||\r\n      this._func_call_statement() ||\r\n      this._assignment_statement()\r\n    );\r\n  }\r\n\r\n  _for_increment(): AST.Statement | null {\r\n    // (assignment_statement func_call_statement increment_statement)?\r\n    return (\r\n      this._func_call_statement() ||\r\n      this._increment_decrement_statement() ||\r\n      this._assignment_statement()\r\n    );\r\n  }\r\n\r\n  _variable_statement(): AST.Var | AST.Let | AST.Const | null {\r\n    // variable_decl\r\n    // variable_decl equal short_circuit_or_expression\r\n    // let (ident variable_ident_decl) equal short_circuit_or_expression\r\n    // const (ident variable_ident_decl) equal short_circuit_or_expression\r\n    if (this._check(TokenTypes.keywords.var)) {\r\n      const _var = this._variable_decl();\r\n      if (_var === null) {\r\n        throw this._error(this._peek(), \"Variable declaration expected.\");\r\n      }\r\n      let value: AST.Expression | null = null;\r\n      if (this._match(TokenTypes.tokens.equal)) {\r\n        value = this._short_circuit_or_expression();\r\n      }\r\n\r\n      return this._updateNode(new AST.Var(\r\n        _var.name,\r\n        _var.type,\r\n        _var.storage,\r\n        _var.access,\r\n        value\r\n      ), _var.line);\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.let)) {\r\n      const line = this._currentLine;\r\n      const name = this._consume(\r\n        TokenTypes.tokens.name,\r\n        \"Expected name for let.\"\r\n      ).toString();\r\n      let type: AST.Type | null = null;\r\n      if (this._match(TokenTypes.tokens.colon)) {\r\n        const typeAttrs = this._attribute();\r\n        type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n        }\r\n      }\r\n      this._consume(TokenTypes.tokens.equal, \"Expected '=' for let.\");\r\n      const value = this._short_circuit_or_expression();\r\n      return this._updateNode(new AST.Let(name, type, null, null, value), line);\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.const)) {\r\n      const line = this._currentLine;\r\n      const name = this._consume(\r\n        TokenTypes.tokens.name,\r\n        \"Expected name for const.\"\r\n      ).toString();\r\n      let type: AST.Type | null = null;\r\n      if (this._match(TokenTypes.tokens.colon)) {\r\n        const typeAttrs = this._attribute();\r\n        type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n        }\r\n      }\r\n      this._consume(TokenTypes.tokens.equal, \"Expected '=' for const.\");\r\n      const value = this._short_circuit_or_expression();\r\n      if (type === null && value instanceof AST.LiteralExpr) {\r\n        type = value.type;\r\n      }\r\n      return this._updateNode(new AST.Const(name, type, null, null, value), line);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _increment_decrement_statement(): AST.Statement | null {\r\n    const savedPos = this._current;\r\n\r\n    const _var = this._unary_expression();\r\n    if (_var == null) {\r\n      return null;\r\n    }\r\n\r\n    if (!this._check(TokenTypes.increment_operators)) {\r\n      this._current = savedPos;\r\n      return null;\r\n    }\r\n\r\n    const token = this._consume(\r\n      TokenTypes.increment_operators,\r\n      \"Expected increment operator\"\r\n    );\r\n\r\n    return this._updateNode(new AST.Increment(\r\n      token.type === TokenTypes.tokens.plus_plus\r\n        ? AST.IncrementOperator.increment\r\n        : AST.IncrementOperator.decrement,\r\n      _var));\r\n  }\r\n\r\n  _assignment_statement(): AST.Assign | null {\r\n    // (unary_expression underscore) equal short_circuit_or_expression\r\n    let _var: AST.Expression | null = null;\r\n    const line = this._currentLine;\r\n\r\n    if (this._check(TokenTypes.tokens.brace_right)) {\r\n      return null;\r\n    }\r\n\r\n    let isUnderscore = this._match(TokenTypes.tokens.underscore);\r\n    if (!isUnderscore) {\r\n      _var = this._unary_expression();\r\n    }\r\n\r\n    if (!isUnderscore && _var == null) {\r\n      return null;\r\n    }\r\n\r\n    const type = this._consume(\r\n      TokenTypes.assignment_operators,\r\n      \"Expected assignment operator.\");\r\n\r\n    const value = this._short_circuit_or_expression();\r\n\r\n    return this._updateNode(new AST.Assign(\r\n      AST.AssignOperator.parse(type.lexeme),\r\n      _var as AST.Expression,\r\n      value), line);\r\n  }\r\n\r\n  _func_call_statement(): AST.Call | null {\r\n    // ident argument_expression_list\r\n    if (!this._check(TokenTypes.tokens.ident)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    const savedPos = this._current;\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected function name.\"\r\n    );\r\n    const args = this._argument_expression_list();\r\n\r\n    if (args === null) {\r\n      this._current = savedPos;\r\n      return null;\r\n    }\r\n\r\n    return this._updateNode(new AST.Call(name.lexeme, args), line);\r\n  }\r\n\r\n  _loop_statement(): AST.Loop | null {\r\n    // loop brace_left statement* continuing_statement? brace_right\r\n    if (!this._match(TokenTypes.keywords.loop)) {\r\n      return null;\r\n    }\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for loop.\");\r\n\r\n    const loop = this._updateNode(new AST.Loop([], null));\r\n    this._currentLoop.push(loop);\r\n\r\n    // statement*\r\n    let statement = this._statement();\r\n    while (statement !== null) {\r\n      if (Array.isArray(statement)) {\r\n        for (let s of statement) {\r\n          loop.body.push(s);\r\n        }\r\n      } else {\r\n        loop.body.push(statement);\r\n      }\r\n      // Keep continuing in the loop body statements so it can be\r\n      // executed in the stackframe of the body statements.\r\n      if (statement instanceof AST.Continuing) {\r\n        loop.continuing = statement;\r\n        // Continuing should be the last statement in the loop.\r\n        break;\r\n      }\r\n      statement = this._statement();\r\n    }\r\n\r\n    this._currentLoop.pop();\r\n\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for loop.\");\r\n\r\n    return loop;\r\n  }\r\n\r\n  _switch_statement(): AST.Switch | null {\r\n    // switch optional_paren_expression brace_left switch_body+ brace_right\r\n    if (!this._match(TokenTypes.keywords.switch)) {\r\n      return null;\r\n    }\r\n\r\n    const switchStmt = this._updateNode(new AST.Switch(null, []));\r\n\r\n    this._currentLoop.push(switchStmt);\r\n\r\n    switchStmt.condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for switch.\");\r\n    switchStmt.cases = this._switch_body();\r\n    if (switchStmt.cases == null || switchStmt.cases.length == 0) {\r\n      throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\r\n    }\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for switch.\");\r\n\r\n    this._currentLoop.pop();\r\n\r\n    return switchStmt;\r\n  }\r\n\r\n  _switch_body(): AST.SwitchCase[] {\r\n    // case case_selectors optional_colon brace_left case_body? brace_right\r\n    // default optional_colon brace_left case_body? brace_right\r\n    const cases: AST.SwitchCase[] = [];\r\n\r\n    let hasDefault = false;\r\n    while (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {\r\n      if (this._match(TokenTypes.keywords.case)) {\r\n        const selectors = this._case_selectors();\r\n        for (const selector of selectors) {\r\n          if (selector instanceof AST.DefaultSelector) {\r\n            if (hasDefault) {\r\n              throw this._error(this._previous(), \"Multiple default cases in switch statement.\");\r\n            }\r\n            hasDefault = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        this._match(TokenTypes.tokens.colon); // colon is optional\r\n\r\n        let attributes = null;\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n          attributes = this._attribute();\r\n        }\r\n\r\n        this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch case.\");\r\n\r\n        const body = this._case_body();\r\n\r\n        this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch case.\");\r\n\r\n        cases.push(this._updateNode(new AST.Case(selectors, body)));\r\n      }\r\n\r\n      if (this._match(TokenTypes.keywords.default)) {\r\n        if (hasDefault) {\r\n          throw this._error(this._previous(), \"Multiple default cases in switch statement.\");\r\n        }\r\n        this._match(TokenTypes.tokens.colon); // colon is optional\r\n\r\n        let attributes = null;\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n          attributes = this._attribute();\r\n        }\r\n\r\n        this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch default.\");\r\n\r\n        const body = this._case_body();\r\n\r\n        this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch default.\");\r\n\r\n        cases.push(this._updateNode(new AST.Default(body)));\r\n      }\r\n    }\r\n\r\n    return cases;\r\n  }\r\n\r\n  _case_selectors(): AST.Expression[] {\r\n    // case_selector (comma case_selector)* comma?\r\n    // case_selector: expression | default\r\n    const selectors = [];\r\n\r\n    if (this._match(TokenTypes.keywords.default)) {\r\n      selectors.push(this._updateNode(new AST.DefaultSelector()));\r\n    } else {\r\n      selectors.push(this._shift_expression());\r\n    }\r\n\r\n    while (this._match(TokenTypes.tokens.comma)) {\r\n      if (this._match(TokenTypes.keywords.default)) {\r\n        selectors.push(this._updateNode(new AST.DefaultSelector()));\r\n      } else {\r\n        selectors.push(this._shift_expression());\r\n      }\r\n    }\r\n\r\n    return selectors;\r\n  }\r\n\r\n  _case_body(): AST.Statement[] {\r\n    // statement case_body?\r\n    // fallthrough semicolon\r\n    if (this._match(TokenTypes.keywords.fallthrough)) {\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      return [];\r\n    }\r\n\r\n    let statement = this._statement();\r\n    if (statement == null) {\r\n      return [];\r\n    }\r\n\r\n    if (!(statement instanceof Array)) {\r\n      statement = [statement];\r\n    }\r\n\r\n    const nextStatement = this._case_body();\r\n    if (nextStatement.length == 0) {\r\n      return statement;\r\n    }\r\n\r\n    return [...statement, nextStatement[0]];\r\n  }\r\n\r\n  _if_statement(): AST.If | null {\r\n    // if optional_paren_expression compound_statement elseif_statement? else_statement?\r\n    if (!this._match(TokenTypes.keywords.if)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    const condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    const block = this._compound_statement();\r\n\r\n    let elseif: AST.ElseIf[] | null = [];\r\n    if (this._match_elseif()) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      elseif = this._elseif_statement(elseif);\r\n    }\r\n\r\n    let _else: AST.Statement[] | null = null;\r\n    if (this._match(TokenTypes.keywords.else)) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      _else = this._compound_statement();\r\n    }\r\n\r\n    return this._updateNode(new AST.If(condition, block, elseif, _else), line);\r\n  }\r\n\r\n  _match_elseif(): boolean {\r\n    if (this._tokens[this._current].type === TokenTypes.keywords.else &&\r\n      this._tokens[this._current + 1].type === TokenTypes.keywords.if) {\r\n      this._advance();\r\n      this._advance();\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _elseif_statement(elseif: AST.ElseIf[] = []): AST.ElseIf[] {\r\n    // else_if optional_paren_expression compound_statement elseif_statement?\r\n    const condition = this._optional_paren_expression();\r\n    const block = this._compound_statement();\r\n    elseif.push(this._updateNode(new AST.ElseIf(condition, block)));\r\n    if (this._match_elseif()) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      this._elseif_statement(elseif);\r\n    }\r\n    return elseif;\r\n  }\r\n\r\n  _return_statement(): AST.Return | null {\r\n    // return short_circuit_or_expression?\r\n    if (!this._match(TokenTypes.keywords.return)) {\r\n      return null;\r\n    }\r\n    const value = this._short_circuit_or_expression();\r\n    return this._updateNode(new AST.Return(value));\r\n  }\r\n\r\n  _short_circuit_or_expression(): AST.Expression {\r\n    // short_circuit_and_expression\r\n    // short_circuit_or_expression or_or short_circuit_and_expression\r\n    let expr = this._short_circuit_and_expr();\r\n    while (this._match(TokenTypes.tokens.or_or)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._short_circuit_and_expr()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _short_circuit_and_expr(): AST.Expression {\r\n    // inclusive_or_expression\r\n    // short_circuit_and_expression and_and inclusive_or_expression\r\n    let expr = this._inclusive_or_expression();\r\n    while (this._match(TokenTypes.tokens.and_and)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._inclusive_or_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _inclusive_or_expression(): AST.Expression {\r\n    // exclusive_or_expression\r\n    // inclusive_or_expression or exclusive_or_expression\r\n    let expr = this._exclusive_or_expression();\r\n    while (this._match(TokenTypes.tokens.or)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._exclusive_or_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _exclusive_or_expression(): AST.Expression {\r\n    // and_expression\r\n    // exclusive_or_expression xor and_expression\r\n    let expr = this._and_expression();\r\n    while (this._match(TokenTypes.tokens.xor)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._and_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _and_expression(): AST.Expression {\r\n    // equality_expression\r\n    // and_expression and equality_expression\r\n    let expr = this._equality_expression();\r\n    while (this._match(TokenTypes.tokens.and)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._equality_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _equality_expression(): AST.Expression {\r\n    // relational_expression\r\n    // relational_expression equal_equal relational_expression\r\n    // relational_expression not_equal relational_expression\r\n    const expr = this._relational_expression();\r\n    if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {\r\n      return this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._relational_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _relational_expression(): AST.Expression {\r\n    // shift_expression\r\n    // relational_expression less_than shift_expression\r\n    // relational_expression greater_than shift_expression\r\n    // relational_expression less_than_equal shift_expression\r\n    // relational_expression greater_than_equal shift_expression\r\n    let expr = this._shift_expression();\r\n    while (this._match([\r\n        TokenTypes.tokens.less_than,\r\n        TokenTypes.tokens.greater_than,\r\n        TokenTypes.tokens.less_than_equal,\r\n        TokenTypes.tokens.greater_than_equal,\r\n      ])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._shift_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _shift_expression(): AST.Expression {\r\n    // additive_expression\r\n    // shift_expression shift_left additive_expression\r\n    // shift_expression shift_right additive_expression\r\n    let expr = this._additive_expression();\r\n    while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._additive_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _additive_expression(): AST.Expression {\r\n    // multiplicative_expression\r\n    // additive_expression plus multiplicative_expression\r\n    // additive_expression minus multiplicative_expression\r\n    let expr = this._multiplicative_expression();\r\n    while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._multiplicative_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _multiplicative_expression(): AST.Expression {\r\n    // unary_expression\r\n    // multiplicative_expression star unary_expression\r\n    // multiplicative_expression forward_slash unary_expression\r\n    // multiplicative_expression modulo unary_expression\r\n    let expr = this._unary_expression();\r\n    while (this._match([\r\n        TokenTypes.tokens.star,\r\n        TokenTypes.tokens.forward_slash,\r\n        TokenTypes.tokens.modulo,\r\n      ])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._unary_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _unary_expression(): AST.Expression {\r\n    // singular_expression\r\n    // minus unary_expression\r\n    // bang unary_expression\r\n    // tilde unary_expression\r\n    // star unary_expression\r\n    // and unary_expression\r\n    if (this._match([\r\n        TokenTypes.tokens.minus,\r\n        TokenTypes.tokens.bang,\r\n        TokenTypes.tokens.tilde,\r\n        TokenTypes.tokens.star,\r\n        TokenTypes.tokens.and,\r\n      ])) {\r\n      return this._updateNode(new AST.UnaryOperator(\r\n        this._previous().toString(),\r\n        this._unary_expression()\r\n      ));\r\n    }\r\n    return this._singular_expression();\r\n  }\r\n\r\n  _singular_expression(): AST.Expression {\r\n    // primary_expression postfix_expression ?\r\n    const expr = this._primary_expression();\r\n    const p = this._postfix_expression();\r\n    if (p) {\r\n      expr.postfix = p;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _postfix_expression(): AST.Expression | null {\r\n    // bracket_left short_circuit_or_expression bracket_right postfix_expression?\r\n    if (this._match(TokenTypes.tokens.bracket_left)) {\r\n      const expr = this._short_circuit_or_expression();\r\n      this._consume(TokenTypes.tokens.bracket_right, \"Expected ']'.\");\r\n      const arrayIndex = this._updateNode(new AST.ArrayIndex(expr));\r\n      const p = this._postfix_expression();\r\n      if (p) {\r\n        arrayIndex.postfix = p;\r\n      }\r\n      return arrayIndex;\r\n    }\r\n\r\n    // period ident postfix_expression?\r\n    if (this._match(TokenTypes.tokens.period)) {\r\n      const name = this._consume(TokenTypes.tokens.name, \"Expected member name.\");\r\n      const p = this._postfix_expression();\r\n      const expr = this._updateNode(new AST.StringExpr(name.lexeme));\r\n      if (p) {\r\n        expr.postfix = p;\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _getStruct(name: string): AST.Type | null {\r\n    if (this._context.aliases.has(name)) {\r\n      const alias = this._context.aliases.get(name).type;\r\n      return alias;\r\n    }\r\n    if (this._context.structs.has(name)) {\r\n      const struct = this._context.structs.get(name);\r\n      return struct;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getType(name: string): AST.Type {\r\n    const struct = this._getStruct(name);\r\n    if (struct !== null) {\r\n      return struct;\r\n    }\r\n    switch (name) {\r\n      case \"void\":\r\n        return AST.Type.void;\r\n      case \"bool\":\r\n        return AST.Type.bool;\r\n      case \"i32\":\r\n        return AST.Type.i32;\r\n      case \"u32\":\r\n        return AST.Type.u32;\r\n      case \"f32\":\r\n        return AST.Type.f32;\r\n      case \"f16\":\r\n        return AST.Type.f16;\r\n      case \"vec2f\":\r\n        return AST.TemplateType.vec2f;\r\n      case \"vec3f\":\r\n        return AST.TemplateType.vec3f;\r\n      case \"vec4f\":\r\n        return AST.TemplateType.vec4f;\r\n      case \"vec2i\":\r\n        return AST.TemplateType.vec2i;\r\n      case \"vec3i\":\r\n        return AST.TemplateType.vec3i;\r\n      case \"vec4i\":\r\n        return AST.TemplateType.vec4i;\r\n      case \"vec2u\":\r\n        return AST.TemplateType.vec2u;\r\n      case \"vec3u\":\r\n        return AST.TemplateType.vec3u;\r\n      case \"vec4u\":\r\n        return AST.TemplateType.vec4u;\r\n      case \"vec2h\":\r\n        return AST.TemplateType.vec2h;\r\n      case \"vec3h\":\r\n        return AST.TemplateType.vec3h;\r\n      case \"vec4h\":\r\n        return AST.TemplateType.vec4h;\r\n      case \"mat2x2f\":\r\n        return AST.TemplateType.mat2x2f;\r\n      case \"mat2x3f\":\r\n        return AST.TemplateType.mat2x3f;\r\n      case \"mat2x4f\":\r\n        return AST.TemplateType.mat2x4f;\r\n      case \"mat3x2f\":\r\n        return AST.TemplateType.mat3x2f;\r\n      case \"mat3x3f\":\r\n        return AST.TemplateType.mat3x3f;\r\n      case \"mat3x4f\":\r\n        return AST.TemplateType.mat3x4f;\r\n      case \"mat4x2f\":\r\n        return AST.TemplateType.mat4x2f;\r\n      case \"mat4x3f\":\r\n        return AST.TemplateType.mat4x3f;\r\n      case \"mat4x4f\":\r\n        return AST.TemplateType.mat4x4f;\r\n      case \"mat2x2h\":\r\n        return AST.TemplateType.mat2x2h;\r\n      case \"mat2x3h\":\r\n        return AST.TemplateType.mat2x3h;\r\n      case \"mat2x4h\":\r\n        return AST.TemplateType.mat2x4h;\r\n      case \"mat3x2h\":\r\n        return AST.TemplateType.mat3x2h;\r\n      case \"mat3x3h\":\r\n        return AST.TemplateType.mat3x3h;\r\n      case \"mat3x4h\":\r\n        return AST.TemplateType.mat3x4h;\r\n      case \"mat4x2h\":\r\n        return AST.TemplateType.mat4x2h;\r\n      case \"mat4x3h\":\r\n        return AST.TemplateType.mat4x3h;\r\n      case \"mat4x4h\":\r\n        return AST.TemplateType.mat4x4h;\r\n\r\n      case \"mat2x2i\":\r\n        return AST.TemplateType.mat2x2i;\r\n      case \"mat2x3i\":\r\n        return AST.TemplateType.mat2x3i;\r\n      case \"mat2x4i\":\r\n        return AST.TemplateType.mat2x4i;\r\n      case \"mat3x2i\":\r\n        return AST.TemplateType.mat3x2i;\r\n      case \"mat3x3i\":\r\n        return AST.TemplateType.mat3x3i;\r\n      case \"mat3x4i\":\r\n        return AST.TemplateType.mat3x4i;\r\n      case \"mat4x2i\":\r\n        return AST.TemplateType.mat4x2i;\r\n      case \"mat4x3i\":\r\n        return AST.TemplateType.mat4x3i;\r\n      case \"mat4x4i\":\r\n        return AST.TemplateType.mat4x4i;\r\n\r\n      case \"mat2x2u\":\r\n        return AST.TemplateType.mat2x2u;\r\n      case \"mat2x3u\":\r\n        return AST.TemplateType.mat2x3u;\r\n      case \"mat2x4u\":\r\n        return AST.TemplateType.mat2x4u;\r\n      case \"mat3x2u\":\r\n        return AST.TemplateType.mat3x2u;\r\n      case \"mat3x3u\":\r\n        return AST.TemplateType.mat3x3u;\r\n      case \"mat3x4u\":\r\n        return AST.TemplateType.mat3x4u;\r\n      case \"mat4x2u\":\r\n        return AST.TemplateType.mat4x2u;\r\n      case \"mat4x3u\":\r\n        return AST.TemplateType.mat4x3u;\r\n      case \"mat4x4u\":\r\n        return AST.TemplateType.mat4x4u;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _validateTypeRange(value: number, type: AST.Type) {\r\n    if (type.name === \"i32\") {\r\n      if (value < -2147483648 || value > 2147483647) {\r\n        throw this._error(this._previous(), `Value out of range for i32: ${value}. Line: ${this._currentLine}.`);\r\n      }\r\n    } else if (type.name === \"u32\") {\r\n      if (value < 0 || value > 4294967295) {\r\n        throw this._error(this._previous(), `Value out of range for u32: ${value}. Line: ${this._currentLine}.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  _primary_expression(): AST.Expression {\r\n    // ident argument_expression_list?\r\n    if (this._match(TokenTypes.tokens.ident)) {\r\n      const name = this._previous().toString();\r\n      if (this._check(TokenTypes.tokens.paren_left)) {\r\n        const args = this._argument_expression_list();\r\n        const type = this._getType(name);\r\n        if (type !== null) {\r\n          return this._updateNode(new AST.CreateExpr(type, args));\r\n        }\r\n        return this._updateNode(new AST.CallExpr(name, args));\r\n      }\r\n      if (this._context.constants.has(name)) {\r\n        const c = this._context.constants.get(name);\r\n        return this._updateNode(new AST.ConstExpr(name, c.value));\r\n      }\r\n      return this._updateNode(new AST.VariableExpr(name));\r\n    }\r\n\r\n    // const_literal\r\n    if (this._match(TokenTypes.tokens.int_literal)) {\r\n      const token = this._previous();\r\n      const s = token.toString();\r\n      let type = s.endsWith(\"i\") || s.endsWith(\"i\") ? AST.Type.i32 :\r\n          s.endsWith(\"u\") || s.endsWith(\"U\") ? AST.Type.u32 : AST.Type.x32;\r\n      const i = parseInt(s);\r\n      this._validateTypeRange(i, type);\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(i, this._exec.getTypeInfo(type)), type), undefined, token);\r\n    } else if (this._match(TokenTypes.tokens.uint_literal)) {\r\n      const token = this._previous();\r\n      const u = parseInt(token.toString());\r\n      this._validateTypeRange(u, AST.Type.u32);\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(u, this._exec.getTypeInfo(AST.Type.u32)), AST.Type.u32), undefined, token);\r\n    } else if (this._match([TokenTypes.tokens.decimal_float_literal, TokenTypes.tokens.hex_float_literal])) {\r\n      const token = this._previous();\r\n      let fs = token.toString();\r\n      let isF16 = fs.endsWith(\"h\");\r\n      if (isF16) {\r\n        fs = fs.substring(0, fs.length - 1);\r\n      }\r\n      const f = parseFloat(fs);\r\n      this._validateTypeRange(f, isF16 ? AST.Type.f16 : AST.Type.f32);\r\n      const type = isF16 ? AST.Type.f16 : AST.Type.f32;\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(f, this._exec.getTypeInfo(type)), type), undefined, token);\r\n    } else if (this._match([TokenTypes.keywords.true, TokenTypes.keywords.false])) {\r\n      const token = this._previous();\r\n      let b = token.toString() === TokenTypes.keywords.true.rule;\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(b ? 1 : 0, this._exec.getTypeInfo(AST.Type.bool)), AST.Type.bool), undefined, token);\r\n    }\r\n\r\n    // paren_expression\r\n    if (this._check(TokenTypes.tokens.paren_left)) {\r\n      return this._paren_expression();\r\n    }\r\n\r\n    // bitcast less_than type_decl greater_than paren_expression\r\n    if (this._match(TokenTypes.keywords.bitcast)) {\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<'.\");\r\n      const type = this._type_decl();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\r\n      const value = this._paren_expression();\r\n      return this._updateNode(new AST.BitcastExpr(type, value));\r\n    }\r\n\r\n    // type_decl argument_expression_list\r\n    const type = this._type_decl();\r\n    const args = this._argument_expression_list();\r\n    return this._updateNode(new AST.CreateExpr(type, args));\r\n  }\r\n\r\n  _argument_expression_list(): AST.Expression[] | null {\r\n    // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\r\n    if (!this._match(TokenTypes.tokens.paren_left)) {\r\n      return null;\r\n    }\r\n\r\n    const args: AST.Expression[] = [];\r\n    do {\r\n      if (this._check(TokenTypes.tokens.paren_right)) {\r\n        break;\r\n      }\r\n      const arg = this._short_circuit_or_expression();\r\n      args.push(arg);\r\n    } while (this._match(TokenTypes.tokens.comma));\r\n    this._consume(\r\n      TokenTypes.tokens.paren_right,\r\n      \"Expected ')' for argument list\"\r\n    );\r\n\r\n    return args;\r\n  }\r\n\r\n  _optional_paren_expression(): AST.Expression {\r\n    // [paren_left] short_circuit_or_expression [paren_right]\r\n    this._match(TokenTypes.tokens.paren_left);\r\n    const expr = this._short_circuit_or_expression();\r\n    this._match(TokenTypes.tokens.paren_right);\r\n    return expr;\r\n  }\r\n\r\n  _paren_expression(): AST.Expression {\r\n    // paren_left short_circuit_or_expression paren_right\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\r\n    const expr = this._short_circuit_or_expression();\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\r\n    return expr;\r\n  }\r\n\r\n  _struct_decl(): AST.Struct | null {\r\n    // attribute* struct ident struct_body_decl\r\n    if (!this._match(TokenTypes.keywords.struct)) {\r\n      return null;\r\n    }\r\n\r\n    const startLine = this._currentLine;\r\n\r\n    const name = this._consume(TokenTypes.tokens.ident, \"Expected name for struct.\").toString();\r\n\r\n    // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for struct body.\");\r\n    const members: AST.Member[] = [];\r\n    while (!this._check(TokenTypes.tokens.brace_right)) {\r\n      // struct_member: attribute* variable_ident_decl\r\n      const memberAttrs = this._attribute();\r\n\r\n      const memberName = this._consume(TokenTypes.tokens.name, \"Expected variable name.\").toString();\r\n\r\n      this._consume(TokenTypes.tokens.colon, \"Expected ':' for struct member type.\");\r\n\r\n      const typeAttrs = this._attribute();\r\n      const memberType = this._type_decl();\r\n      if (memberType != null) {\r\n        memberType.attributes = typeAttrs;\r\n      }\r\n\r\n      if (!this._check(TokenTypes.tokens.brace_right)) {\r\n        this._consume(TokenTypes.tokens.comma, \"Expected ',' for struct member.\");\r\n      } else {\r\n        this._match(TokenTypes.tokens.comma); // trailing comma optional.\r\n      }\r\n\r\n      members.push(this._updateNode(new AST.Member(memberName, memberType, memberAttrs)));\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' after struct body.\");\r\n\r\n    const endLine = this._currentLine;\r\n\r\n    const structNode = this._updateNode(new AST.Struct(name, members, startLine, endLine), startLine);\r\n    this._context.structs.set(name, structNode);\r\n    return structNode;\r\n  }\r\n\r\n  _global_variable_decl(): AST.Var | null {\r\n    // attribute* variable_decl (equal const_expression)?\r\n    const _var = this._variable_decl();\r\n    if (!_var) {\r\n      return null;\r\n    }\r\n\r\n    if (this._match(TokenTypes.tokens.equal)) {\r\n      const expr = this._const_expression();\r\n      _var.value = expr;\r\n    }\r\n\r\n    if (_var.type !== null && _var.value instanceof AST.LiteralExpr) {\r\n      if (_var.value.type.name !== \"x32\") {\r\n        const t1 = _var.type.getTypeName();\r\n        const t2 = _var.value.type.getTypeName();\r\n        if (t1 !== t2) {\r\n          throw this._error(this._peek(), `Invalid cast from ${_var.value.type.name} to ${_var.type.name}. Line:${this._currentLine}`);\r\n        }\r\n      }\r\n      if (_var.value.isScalar) {\r\n        this._validateTypeRange(_var.value.scalarValue, _var.type);\r\n      }\r\n      _var.value.type = _var.type;\r\n    } else if (_var.type === null && _var.value instanceof AST.LiteralExpr) {\r\n      _var.type = _var.value.type.name === \"x32\" ? AST.Type.i32 : _var.value.type;\r\n      if (_var.value.isScalar) {\r\n        this._validateTypeRange(_var.value.scalarValue, _var.type);\r\n      }\r\n    }\r\n    return _var;\r\n  }\r\n\r\n  _override_variable_decl(): AST.Override | null {\r\n    // attribute* override_decl (equal const_expression)?\r\n    const _override = this._override_decl();\r\n    if (_override && this._match(TokenTypes.tokens.equal)) {\r\n      _override.value = this._const_expression();\r\n    }\r\n\r\n    return _override;\r\n  }\r\n\r\n  _global_const_decl(): AST.Const | null {\r\n    // attribute* const (ident variable_ident_decl) global_const_initializer?\r\n    if (!this._match(TokenTypes.keywords.const)) {\r\n      return null;\r\n    }\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.name,\r\n      \"Expected variable name\"\r\n    );\r\n\r\n    const line = this._currentLine;\r\n\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n    let value: AST.Expression | null = null;\r\n\r\n    this._consume(TokenTypes.tokens.equal, \"const declarations require an assignment\")\r\n\r\n    const valueExpr = this._short_circuit_or_expression();\r\n    try {\r\n      let type = [AST.Type.f32];\r\n      let constValue = valueExpr.constEvaluate(this._exec, type);\r\n\r\n      if (constValue instanceof ScalarData) {\r\n        this._validateTypeRange(constValue.value, type[0]);\r\n      }\r\n\r\n      if (type[0] instanceof AST.TemplateType && type[0].format === null &&\r\n        constValue.typeInfo instanceof TemplateInfo && constValue.typeInfo.format !== null) {\r\n        if (constValue.typeInfo.format.name === \"f16\") {\r\n          type[0].format = AST.Type.f16;\r\n        } else if (constValue.typeInfo.format.name === \"f32\") {\r\n          type[0].format = AST.Type.f32;\r\n        } else if (constValue.typeInfo.format.name === \"i32\") {\r\n          type[0].format = AST.Type.i32;\r\n        } else if (constValue.typeInfo.format.name === \"u32\") {\r\n          type[0].format = AST.Type.u32;\r\n        } else if (constValue.typeInfo.format.name === \"bool\") {\r\n          type[0].format = AST.Type.bool;\r\n        } else {\r\n          console.error(`TODO: impelement template format type ${constValue.typeInfo.format.name}`);\r\n        }\r\n      }\r\n\r\n      value = this._updateNode(new AST.LiteralExpr(constValue, type[0]));\r\n      this._exec.context.setVariable(name.toString(), constValue);\r\n    } catch {\r\n      value = valueExpr;\r\n    }\r\n\r\n    if (type !== null && value instanceof AST.LiteralExpr) {\r\n      if (value.type.name !== \"x32\") {\r\n        const t1 = type.getTypeName();\r\n        const t2 = value.type.getTypeName();\r\n        if (t1 !== t2) {\r\n          throw this._error(this._peek(), `Invalid cast from ${value.type.name} to ${type.name}. Line:${this._currentLine}`);\r\n        }\r\n      }\r\n      value.type = type;\r\n      if (value.isScalar) {\r\n        this._validateTypeRange(value.scalarValue, value.type);\r\n      }\r\n    } else if (type === null && value instanceof AST.LiteralExpr) {\r\n      type = value?.type ?? AST.Type.f32;\r\n      if (type === AST.Type.x32) {\r\n        type = AST.Type.i32;\r\n      }\r\n    }\r\n\r\n    const c = this._updateNode(new AST.Const(name.toString(), type, \"\", \"\", value), line);\r\n    this._context.constants.set(c.name, c);\r\n    return c;\r\n  }\r\n\r\n  _global_let_decl(): AST.Let | null {\r\n    // attribute* let (ident variable_ident_decl) global_const_initializer?\r\n    if (!this._match(TokenTypes.keywords.let)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.name,\r\n      \"Expected variable name\"\r\n    );\r\n\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    let value: AST.Expression | null = null;\r\n    if (this._match(TokenTypes.tokens.equal)) {\r\n      value = this._const_expression();\r\n    }\r\n\r\n    if (type !== null && value instanceof AST.LiteralExpr) {\r\n      if (value.type.name !== \"x32\") {\r\n        const t1 = type.getTypeName();\r\n        const t2 = value.type.getTypeName();\r\n        if (t1 !== t2) {\r\n          throw this._error(this._peek(), `Invalid cast from ${value.type.name} to ${type.name}. Line:${this._currentLine}`);\r\n        }\r\n      }\r\n      value.type = type;\r\n    } else if (type === null && value instanceof AST.LiteralExpr) {\r\n      type = value.type.name === \"x32\" ? AST.Type.i32 : value.type;\r\n    }\r\n\r\n    if (value instanceof AST.LiteralExpr) {\r\n      if (value.isScalar) {\r\n        this._validateTypeRange(value.scalarValue, type);\r\n      }\r\n    }\r\n    return this._updateNode(new AST.Let(name.toString(), type, \"\", \"\", value), line);\r\n  }\r\n\r\n  _const_expression(): AST.Expression {\r\n    // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\r\n    // const_literal\r\n    return this._short_circuit_or_expression();\r\n  }\r\n\r\n  _variable_decl(): AST.Var | null {\r\n    // var variable_qualifier? (ident variable_ident_decl)\r\n    if (!this._match(TokenTypes.keywords.var)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\r\n    let storage: string = \"\";\r\n    let access: string = \"\";\r\n    if (this._match(TokenTypes.tokens.less_than)) {\r\n      storage = this._consume(TokenTypes.storage_class, \"Expected storage_class.\").toString();\r\n      if (this._match(TokenTypes.tokens.comma))\r\n        access = this._consume(TokenTypes.access_mode, \"Expected access_mode.\").toString();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\r\n    }\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.name,\r\n      \"Expected variable name\"\r\n    );\r\n\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    return this._updateNode(new AST.Var(name.toString(), type, storage, access, null), line);\r\n  }\r\n\r\n  _override_decl(): AST.Override | null {\r\n    // override (ident variable_ident_decl)\r\n    if (!this._match(TokenTypes.keywords.override)) {\r\n      return null;\r\n    }\r\n\r\n    const name = this._consume(TokenTypes.tokens.name, \"Expected variable name\");\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    return this._updateNode(new AST.Override(name.toString(), type, null));\r\n  }\r\n\r\n  _diagnostic(): AST.Diagnostic | null {\r\n    // diagnostic(severity_control_name, diagnostic_rule_name)\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('\");\r\n    const severity = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected severity control name.\"\r\n    );\r\n    this._consume(TokenTypes.tokens.comma, \"Expected ','\");\r\n    const rule = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected diagnostic rule name.\"\r\n    );\r\n    let ruleMessage = rule.toString();\r\n    if (this._match(TokenTypes.tokens.period)) {\r\n      const message = this._consume(\r\n        TokenTypes.tokens.ident,\r\n        \"Expected diagnostic message.\"\r\n      );\r\n      ruleMessage += `.${message.toString()}`;\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\r\n    return this._updateNode(new AST.Diagnostic(severity.toString(), ruleMessage));\r\n  }\r\n\r\n  _enable_directive(): AST.Enable {\r\n    // enable ident semicolon\r\n    const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n    return this._updateNode(new AST.Enable(name.toString()));\r\n  }\r\n\r\n  _requires_directive(): AST.Requires {\r\n    // requires extension [, extension]* semicolon\r\n    const extensions: string[] = [this._consume(TokenTypes.tokens.ident, \"identity expected.\").toString()];\r\n    while (this._match(TokenTypes.tokens.comma)) {\r\n      const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n      extensions.push(name.toString());\r\n    }\r\n    return this._updateNode(new AST.Requires(extensions));\r\n  }\r\n\r\n  _type_alias(): AST.Alias {\r\n    // type ident equal type_decl\r\n    const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n    this._consume(TokenTypes.tokens.equal, \"Expected '=' for type alias.\");\r\n\r\n    let aliasType = this._type_decl();\r\n    if (aliasType === null) {\r\n      throw this._error(this._peek(), \"Expected Type for Alias.\");\r\n    }\r\n    if (this._context.aliases.has(aliasType.name)) {\r\n      aliasType = this._context.aliases.get(aliasType.name).type;\r\n    }\r\n\r\n    const aliasNode = this._updateNode(new AST.Alias(name.toString(), aliasType));\r\n    this._context.aliases.set(aliasNode.name, aliasNode);\r\n\r\n    return aliasNode;\r\n  }\r\n\r\n  _type_decl(): AST.Type | null {\r\n    // ident\r\n    // bool\r\n    // float32\r\n    // int32\r\n    // uint32\r\n    // vec2 less_than type_decl greater_than\r\n    // vec3 less_than type_decl greater_than\r\n    // vec4 less_than type_decl greater_than\r\n    // mat2x2 less_than type_decl greater_than\r\n    // mat2x3 less_than type_decl greater_than\r\n    // mat2x4 less_than type_decl greater_than\r\n    // mat3x2 less_than type_decl greater_than\r\n    // mat3x3 less_than type_decl greater_than\r\n    // mat3x4 less_than type_decl greater_than\r\n    // mat4x2 less_than type_decl greater_than\r\n    // mat4x3 less_than type_decl greater_than\r\n    // mat4x4 less_than type_decl greater_than\r\n    // atomic less_than type_decl greater_than\r\n    // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n    // array_type_decl\r\n    // texture_sampler_types\r\n\r\n    if (this._check([\r\n        TokenTypes.tokens.ident,\r\n        ...TokenTypes.texel_format,\r\n        TokenTypes.keywords.bool,\r\n        TokenTypes.keywords.f32,\r\n        TokenTypes.keywords.i32,\r\n        TokenTypes.keywords.u32,\r\n      ])) {\r\n      const type = this._advance();\r\n      const typeName = type.toString();\r\n      if (this._context.structs.has(typeName)) {\r\n        return this._context.structs.get(typeName);\r\n      }\r\n      if (this._context.aliases.has(typeName)) {\r\n        return this._context.aliases.get(typeName).type;\r\n      }\r\n\r\n      const t = this._getType(typeName);\r\n      // Don't \"forward declare\" built-in types\r\n      if (!t) {\r\n        const node = this._updateNode(new AST.ForwardType(typeName));\r\n        this._forwardTypeCount++;\r\n        return node;\r\n      }\r\n\r\n      return this._updateNode(new AST.Type(typeName));\r\n    }\r\n\r\n    // texture_sampler_types\r\n    let type = this._texture_sampler_types();\r\n    if (type) {\r\n      return type;\r\n    }\r\n\r\n    if (this._check(TokenTypes.template_types)) {\r\n      let type = this._advance().toString();\r\n      let format: AST.Type | null = null;\r\n      let access: string | null = null;\r\n      if (this._match(TokenTypes.tokens.less_than)) {\r\n        format = this._type_decl();\r\n        access = null;\r\n        if (this._match(TokenTypes.tokens.comma)) {\r\n          access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\r\n        }\r\n        this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for type.\");\r\n      }\r\n      const node = this._updateNode(new AST.TemplateType(type, format, access));\r\n      return node;\r\n    }\r\n\r\n    // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n    if (this._match(TokenTypes.keywords.ptr)) {\r\n      let pointer = this._previous().toString();\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<' for pointer.\");\r\n      const storage = this._consume(TokenTypes.storage_class, \"Expected storage_class for pointer\");\r\n      this._consume(TokenTypes.tokens.comma, \"Expected ',' for pointer.\");\r\n      const decl = this._type_decl();\r\n      let access: string | null = null;\r\n      if (this._match(TokenTypes.tokens.comma)) {\r\n        access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\r\n      }\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for pointer.\");\r\n      const node = this._updateNode(new AST.PointerType(pointer, storage.toString(), decl, access));\r\n      return node;\r\n    }\r\n\r\n    // The following type_decl's have an optional attribyte_list*\r\n    const attrs = this._attribute();\r\n\r\n    // attribute* array\r\n    // attribute* array less_than type_decl (comma element_count_expression)? greater_than\r\n    if (this._match(TokenTypes.keywords.array)) {\r\n      let format = null;\r\n      let countInt = -1;\r\n      const array = this._previous();\r\n      let countNode: AST.Expression | null = null;\r\n      if (this._match(TokenTypes.tokens.less_than)) {\r\n        format = this._type_decl();\r\n        if (this._context.aliases.has(format.name)) {\r\n          format = this._context.aliases.get(format.name).type;\r\n        }\r\n        let count: string = \"\";\r\n        if (this._match(TokenTypes.tokens.comma)) {\r\n          countNode = this._shift_expression();\r\n          // If we can't evaluate the node, defer evaluating it until after the shader has\r\n          // finished being parsed, because const statements can be declared **after** they\r\n          // are used.\r\n          try {\r\n            count = countNode.constEvaluate(this._exec).toString();\r\n            countNode = null;\r\n          } catch (e) {\r\n            count = \"1\";\r\n          }\r\n        }\r\n        this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for array.\");\r\n        countInt = count ? parseInt(count) : 0;\r\n      }\r\n      const arrayType = this._updateNode(new AST.ArrayType(array.toString(), attrs, format, countInt));\r\n      if (countNode) {\r\n        this._deferArrayCountEval.push({ arrayType, countNode });\r\n      }\r\n      return arrayType;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _texture_sampler_types(): AST.SamplerType | null {\r\n    // sampler_type\r\n    if (this._match(TokenTypes.sampler_type)) {\r\n      return this._updateNode(new AST.SamplerType(this._previous().toString(), null, null));\r\n    }\r\n\r\n    // depth_texture_type\r\n    if (this._match(TokenTypes.depth_texture_type)) {\r\n      return this._updateNode(new AST.SamplerType(this._previous().toString(), null, null));\r\n    }\r\n\r\n    // sampled_texture_type less_than type_decl greater_than\r\n    // multisampled_texture_type less_than type_decl greater_than\r\n    if (this._match(TokenTypes.sampled_texture_type) ||\r\n      this._match(TokenTypes.multisampled_texture_type)) {\r\n      const sampler = this._previous();\r\n      this._consume(\r\n        TokenTypes.tokens.less_than,\r\n        \"Expected '<' for sampler type.\"\r\n      );\r\n      const format = this._type_decl();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\r\n      return this._updateNode(new AST.SamplerType(sampler.toString(), format, null));\r\n    }\r\n\r\n    // storage_texture_type less_than texel_format comma access_mode greater_than\r\n    if (this._match(TokenTypes.storage_texture_type)) {\r\n      const sampler = this._previous();\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\r\n      const format = this._consume(TokenTypes.texel_format, \"Invalid texel format.\").toString();\r\n      this._consume(TokenTypes.tokens.comma, \"Expected ',' after texel format.\");\r\n      const access = this._consume(TokenTypes.access_mode, \"Expected access mode for storage texture type.\").toString();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\r\n      return this._updateNode(new AST.SamplerType(sampler.toString(), format, access));\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _attribute(): AST.Attribute[] | null {\r\n    // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\r\n    // attr ident\r\n\r\n    let attributes: AST.Attribute[] = [];\r\n\r\n    while (this._match(TokenTypes.tokens.attr)) {\r\n      const name = this._consume(\r\n        TokenTypes.attribute_name,\r\n        \"Expected attribute name\"\r\n      );\r\n      const attr = this._updateNode(new AST.Attribute(name.toString(), null));\r\n      if (this._match(TokenTypes.tokens.paren_left)) {\r\n        // literal_or_ident\r\n        attr.value = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\r\n        if (this._check(TokenTypes.tokens.comma)) {\r\n          this._advance();\r\n          do {\r\n            const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\r\n            if (!(attr.value instanceof Array)) {\r\n              attr.value = [attr.value as string];\r\n            }\r\n            attr.value.push(v);\r\n          } while (this._match(TokenTypes.tokens.comma));\r\n        }\r\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\r\n      }\r\n      attributes.push(attr);\r\n    }\r\n\r\n    if (attributes.length == 0) {\r\n      return null;\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n}\r\n","import { WgslParser } from \"./wgsl_parser.js\";\r\nimport { Reflect } from \"./reflect/reflect.js\";\r\n\r\nexport * from \"./reflect/info.js\";\r\n\r\nexport class WgslReflect extends Reflect {\r\n  constructor(code?: string) {\r\n    super();\r\n    if (code) {\r\n      this.update(code);\r\n    }\r\n  }\r\n\r\n  update(code: string): void {\r\n    const parser = new WgslParser();\r\n    const ast = parser.parse(code);\r\n    this.updateAST(ast);\r\n  }\r\n}\r\n","import { Node, CallExpr, Continue, Expression, Break } from \"../wgsl_ast.js\";\n\nexport class Command {\n    get line(): number { return -1; }\n}\n\nexport class StatementCommand extends Command {\n    node: Node;\n\n    constructor(node: Node) {\n        super();\n        this.node = node;\n    }\n\n    get line(): number { return this.node.line; }\n}\n\nexport class CallExprCommand extends Command {\n    node: CallExpr;\n    statement: Node;\n\n    constructor(node: CallExpr, statement: Node) {\n        super();\n        this.node = node;\n        this.statement = statement;\n    }\n\n    get line(): number { return this.statement.line; }\n}\n\nexport class ContinueTargetCommand extends Command {\n    id: number;\n\n    constructor(id: number) {\n        super();\n        this.id = id;\n    }\n}\n\nexport class BreakTargetCommand extends Command {\n    id: number;\n\n    constructor(id: number) {\n        super();\n        this.id = id;\n    }\n}\n\nexport class ContinueCommand extends Command {\n    id: number;\n    node: Continue;\n\n    constructor(id: number, node: Continue) {\n        super();\n        this.id = id;\n        this.node = node;\n    }\n\n    get line(): number { return this.node.line; }\n}\n\nexport class BreakCommand extends Command {\n    id: number;\n    condition: Expression | null;\n    node: Break;\n\n    constructor(id: number, condition: Expression | null, node: Break) {\n        super();\n        this.id = id;\n        this.condition = condition;\n        this.node = node;\n    }\n\n    get line(): number { return this.node.line; }\n}\n\n\nexport class GotoCommand extends Command {\n    condition: Node | null;\n    position: number;\n    lineNo: number = -1;\n\n    constructor(condition: Node | null, position: number, line: number) {\n        super();\n        this.condition = condition;\n        this.position = position;\n        this.lineNo = line;\n    }\n\n    get line(): number {\n        return this.condition?.line ?? this.lineNo;\n    }\n}\n\nexport class BlockCommand extends Command {\n    statements: Array<Node> = [];\n\n    constructor(statements: Array<Node>) {\n      super();\n      this.statements = statements;\n    }\n\n    get line(): number {\n      return this.statements.length > 0 ? this.statements[0].line : -1;\n    }\n}\n","import { Command } from \"./command.js\";\r\nimport { CallExpr } from \"../wgsl_ast.js\";\r\nimport { ExecContext } from \"./exec_context.js\";\r\n\r\nexport class StackFrame {\r\n    parent: StackFrame | null = null;\r\n    context: ExecContext;\r\n    commands: Command[] = [];\r\n    current: number = 0;\r\n    parentCallExpr: CallExpr | null = null;\r\n\r\n    constructor(context: ExecContext, parent?: StackFrame) {\r\n        this.context = context;\r\n        this.parent = parent ?? null;\r\n    }\r\n\r\n    get isAtEnd(): boolean { return this.current >= this.commands.length; }\r\n\r\n    getNextCommand(): Command | null {\r\n        if (this.current >= this.commands.length) {\r\n            return null;\r\n        }\r\n        const command = this.commands[this.current];\r\n        this.current++;\r\n        return command;\r\n    }\r\n\r\n    getCurrentCommand(): Command | null {\r\n        if (this.current >= this.commands.length) {\r\n            return null;\r\n        }\r\n        return this.commands[this.current];\r\n    }\r\n}\r\n","import { StackFrame } from \"./stack_frame.js\";\r\n\r\nexport class ExecStack {\r\n    states: StackFrame[] = [];\r\n\r\n    get isEmpty(): boolean { return this.states.length == 0; }\r\n\r\n    get last(): StackFrame | null { return this.states[this.states.length - 1] ?? null; }\r\n\r\n    pop(): void {\r\n        this.states.pop();\r\n    }\r\n}\r\n","import * as AST from \"./wgsl_ast.js\";\r\nimport { WgslExec } from \"./wgsl_exec.js\";\r\nimport { WgslParser } from \"./wgsl_parser.js\";\r\nimport { ExecContext, FunctionRef } from \"./exec/exec_context.js\";\r\nimport { Command, StatementCommand, CallExprCommand, GotoCommand, BlockCommand,\r\n        ContinueTargetCommand, ContinueCommand, BreakCommand, BreakTargetCommand } from \"./exec/command.js\";\r\nimport { StackFrame } from \"./exec/stack_frame.js\";\r\nimport { ExecStack } from \"./exec/exec_stack.js\";\r\nimport { ScalarData, VectorData, MatrixData, TextureData, TypedData, VoidData } from \"./wgsl_ast.js\";\r\n\r\ntype RuntimeStateCallbackType = () => void;\r\n\r\nexport class WgslDebug {\r\n    _code: string;\r\n    _exec: WgslExec;\r\n    _execStack: ExecStack;\r\n    _dispatchId: number[];\r\n    _runTimer: any = null;\r\n    breakpoints: Set<number> = new Set();\r\n    runStateCallback: RuntimeStateCallbackType | null = null;\r\n\r\n    constructor(code: string, runStateCallback?: RuntimeStateCallbackType) {\r\n        this._code = code;\r\n        const parser = new WgslParser();\r\n        const ast = parser.parse(code);\r\n        this._exec = new WgslExec(ast);\r\n        this.runStateCallback = runStateCallback ?? null\r\n    }\r\n\r\n    getVariableValue(name: string): number | number[] | null {\r\n        const context = this.context;\r\n        const v = context.getVariable(name)?.value ?? null;\r\n        if (v === null) {\r\n            return null;\r\n        }\r\n        if (v instanceof ScalarData) {\r\n            return v.value;\r\n        }\r\n        if (v instanceof VectorData) {\r\n            return Array.from(v.data);\r\n        }\r\n        if (v instanceof MatrixData) {\r\n            return Array.from(v.data);\r\n        }\r\n        console.error(`Unsupported return variable type ${v.typeInfo.name}`);\r\n        return null;\r\n    }\r\n\r\n    reset(): void {\r\n        this._exec = new WgslExec(this._exec.ast);\r\n        this.startDebug();\r\n    }\r\n\r\n    startDebug(): void {\r\n        this._execStack = new ExecStack();\r\n        const state = this._createState(this._exec.ast, this._exec.context);\r\n        this._execStack.states.push(state);\r\n    }\r\n\r\n    get context(): ExecContext {\r\n        const state = this.currentState;\r\n        if (state === null) {\r\n            return this._exec.context;\r\n        }\r\n        return state.context;\r\n    }\r\n\r\n    get currentState(): StackFrame | null {\r\n        while (true) {\r\n            if (this._execStack.isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            let state = this._execStack.last;\r\n            if (state === null) {\r\n                return null;\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return null;\r\n                }\r\n                state = this._execStack.last;\r\n            }\r\n\r\n            return state;\r\n        }\r\n    }\r\n\r\n    get currentCommand(): Command | null {\r\n        while (true) {\r\n            if (this._execStack.isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            let state = this._execStack.last;\r\n            if (state === null) {\r\n                return null;\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return null;\r\n                }\r\n                state = this._execStack.last;\r\n            }\r\n\r\n            const command = state.getCurrentCommand();\r\n            if (command === null) {\r\n                continue;\r\n            }\r\n\r\n            return command;\r\n        }\r\n    }\r\n\r\n    toggleBreakpoint(line: number) {\r\n        if (this.breakpoints.has(line)) {\r\n            this.breakpoints.delete(line);\r\n        } else {\r\n            this.breakpoints.add(line);\r\n        }\r\n    }\r\n\r\n    clearBreakpoints() {\r\n        this.breakpoints.clear();\r\n    }\r\n\r\n    get isRunning() {\r\n        return this._runTimer !== null;\r\n    }\r\n\r\n    run() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this._runTimer = setInterval(() => {\r\n            const command = this.currentCommand;\r\n            if (command) {\r\n                if (this.breakpoints.has(command.line)) {\r\n                    clearInterval(this._runTimer!);\r\n                    this._runTimer = null;\r\n                    if (this.runStateCallback !== null) {\r\n                        this.runStateCallback();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            if (!this.stepNext(true)) {\r\n                clearInterval(this._runTimer!);\r\n                this._runTimer = null;\r\n                if (this.runStateCallback !== null) {\r\n                    this.runStateCallback();\r\n                }\r\n            }\r\n        }, 0);\r\n        if (this.runStateCallback !== null) {\r\n            this.runStateCallback();\r\n        }\r\n    }\r\n\r\n    pause() {\r\n        if (this._runTimer !== null) {\r\n            clearInterval(this._runTimer);\r\n            this._runTimer = null;\r\n            if (this.runStateCallback !== null) {\r\n                this.runStateCallback();\r\n            }\r\n        }\r\n    }\r\n\r\n    _setOverrides(constants: Object, context: ExecContext): void {\r\n        for (const k in constants) {\r\n            const v = constants[k];\r\n            const override = this._exec.reflection.getOverrideInfo(k);\r\n            if (override !== null) {\r\n                if (override.type === null) {\r\n                    override.type = this._exec.getTypeInfo(\"u32\");\r\n                }\r\n                if (override.type.name === \"u32\" || override.type.name === \"i32\" || override.type.name === \"f32\" || override.type.name === \"f16\") {\r\n                    context.setVariable(k, new ScalarData(v, override.type));\r\n                } else if (override.type.name === \"bool\") {\r\n                    context.setVariable(k, new ScalarData(v ? 1 : 0, override.type));\r\n                } else if (override.type.name === \"vec2\" || override.type.name === \"vec3\" || override.type.name === \"vec4\" ||\r\n                    override.type.name === \"vec2f\" || override.type.name === \"vec3f\" || override.type.name === \"vec4f\" ||\r\n                    override.type.name === \"vec2i\" || override.type.name === \"vec3i\" || override.type.name === \"vec4i\" ||\r\n                    override.type.name === \"vec2u\" || override.type.name === \"vec3u\" || override.type.name === \"vec4u\" ||\r\n                    override.type.name === \"vec2h\" || override.type.name === \"vec3h\" || override.type.name === \"vec4h\") {\r\n                    context.setVariable(k, new VectorData(v, override.type));\r\n                } else {\r\n                    console.error(`Invalid constant type for ${k}`);\r\n                }\r\n            } else {\r\n                console.error(`Override ${k} does not exist in the shader.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    debugWorkgroup(kernel: string, dispatchId: number[], \r\n        dispatchCount: number | number[], bindGroups: Object, config?: Object): boolean {\r\n\r\n        this._execStack = new ExecStack();\r\n\r\n        const context = this._exec.context;\r\n        context.currentFunctionName = kernel;\r\n\r\n        this._dispatchId = dispatchId;\r\n\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            this._setOverrides(config[\"constants\"], context);\r\n        }\r\n\r\n        // Use this to debug the top level statements, otherwise call _execStatements.\r\n        /*const state = new _ExecState(this._exec.context);\r\n        this._execStack.states.push(state);\r\n        for (const statement of this._exec.ast) {\r\n            state.commands.push(new Command(CommandType.Statement, statement));\r\n        }*/\r\n        this._exec._execStatements(this._exec.ast, context);\r\n\r\n        const kernelFn = context.getFunction(kernel);\r\n        if (!kernelFn) {\r\n            console.error(`Function ${kernel} not found`);\r\n            return false;\r\n        }\r\n\r\n        const kernelRefl = this._exec.reflection.getFunctionInfo(kernel);\r\n\r\n        if (typeof dispatchCount === \"number\") {\r\n            dispatchCount = [dispatchCount, 1, 1];\r\n        } else if (dispatchCount.length === 0) {\r\n            console.error(`Invalid dispatch count`);\r\n            return false;\r\n        } else if (dispatchCount.length === 1) {\r\n            dispatchCount = [dispatchCount[0], 1, 1];\r\n        } else if (dispatchCount.length === 2) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], 1];\r\n        } else if (dispatchCount.length > 3) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], dispatchCount[2]];\r\n        }\r\n\r\n        const depth = dispatchCount[2];\r\n        const height = dispatchCount[1];\r\n        const width = dispatchCount[0];\r\n\r\n        const vec3u = this._exec.typeInfo[\"vec3u\"];\r\n        context.setVariable(\"@num_workgroups\", new VectorData(dispatchCount, vec3u));\r\n\r\n        for (const set in bindGroups) {\r\n            for (const binding in bindGroups[set]) {\r\n                const entry = bindGroups[set][binding];\r\n\r\n                context.variables.forEach((v) => {\r\n                    const node = v.node;\r\n                    if (node?.attributes) {\r\n                        let b = null;\r\n                        let s = null;\r\n                        for (const attr of node.attributes) {\r\n                            if (attr.name === \"binding\") {\r\n                                b = attr.value;\r\n                            } else if (attr.name === \"group\") {\r\n                                s = attr.value;\r\n                            }\r\n                        }\r\n                        if (binding == b && set == s) {\r\n                            let found = false;\r\n                            for (const resource of kernelRefl.resources) {\r\n                                if (resource.name === v.name && resource.group === parseInt(set) && resource.binding === parseInt(binding)) {\r\n                                    found = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (found) {\r\n                                if (entry.texture !== undefined && entry.descriptor !== undefined) {\r\n                                    // Texture\r\n                                    const textureData = new TextureData(entry.texture, this._exec.getTypeInfo(node.type), entry.descriptor,\r\n                                                                        entry.texture.view ?? null);\r\n                                    v.value = textureData;\r\n                                } else if (entry.uniform !== undefined) {\r\n                                    // Uniform buffer\r\n                                    v.value = new TypedData(entry.uniform, this._exec.getTypeInfo(node.type));\r\n                                } else {\r\n                                    // Storage buffer\r\n                                    v.value = new TypedData(entry, this._exec.getTypeInfo(node.type));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        let found = false;\r\n        for (let z = 0; z < depth && !found; ++z) {\r\n            for (let y = 0; y < height && !found; ++y) {\r\n                for (let x = 0; x < width && !found; ++x) {\r\n                    context.setVariable(\"@workgroup_id\", new VectorData([x, y, z], vec3u));\r\n                    if (this._dispatchWorkgroup(kernelFn, [x, y, z], context)) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    _shouldExecuteNextCommand(): boolean {\r\n        const command = this.currentCommand;\r\n        if (command === null) {\r\n            return false;\r\n        }\r\n        if (command instanceof GotoCommand) {\r\n            if (command.condition === null) {\r\n                return true;\r\n            }\r\n        } else if (command instanceof ContinueTargetCommand || command instanceof BreakTargetCommand) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    stepInto() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this.stepNext(true);\r\n    }\r\n\r\n    stepOver() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this.stepNext(false);\r\n    }\r\n\r\n    stepOut() {\r\n        const state = this.currentState;\r\n        if (state === null) {\r\n            return;\r\n        }\r\n        const parentState = state.parent;\r\n\r\n        if (this.isRunning) {\r\n            clearInterval(this._runTimer);\r\n            this._runTimer = null;\r\n        }\r\n\r\n        this._runTimer = setInterval(() => {\r\n            const command = this.currentCommand;\r\n            if (command) {\r\n                if (this.breakpoints.has(command.line)) {\r\n                    clearInterval(this._runTimer!);\r\n                    this._runTimer = null;\r\n                    if (this.runStateCallback !== null) {\r\n                        this.runStateCallback();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            if (!this.stepNext(true)) {\r\n                clearInterval(this._runTimer!);\r\n                this._runTimer = null;\r\n                if (this.runStateCallback !== null) {\r\n                    this.runStateCallback();\r\n                }\r\n            }\r\n\r\n            const state = this.currentState;\r\n            if (state === parentState) {\r\n                clearInterval(this._runTimer!);\r\n                this._runTimer = null;\r\n                if (this.runStateCallback !== null) {\r\n                    this.runStateCallback();\r\n                }\r\n            }\r\n        }, 0);\r\n        if (this.runStateCallback !== null) {\r\n            this.runStateCallback();\r\n        }\r\n    }\r\n\r\n    // Returns true if execution is not finished, false if execution is complete.\r\n    stepNext(stepInto = true): boolean {\r\n        if (!this._execStack) {\r\n            this._execStack = new ExecStack();\r\n            const state = this._createState(this._exec.ast, this._exec.context);\r\n            this._execStack.states.push(state);\r\n        }\r\n\r\n        while (true) {\r\n            if (this._execStack.isEmpty) {\r\n                return false;\r\n            }\r\n\r\n            let state = this._execStack.last;\r\n            if (state === null) {\r\n                return false;\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return false;\r\n                }\r\n                state = this._execStack.last;\r\n            }\r\n\r\n            const command = state!.getNextCommand();\r\n            if (command === null) {\r\n                continue;\r\n            }\r\n\r\n            if (stepInto && command instanceof CallExprCommand) {\r\n                const node = command.node;\r\n                const fn = state.context.getFunction(node.name);\r\n                if (!fn) {\r\n                    continue; // it's not a custom function, step over it\r\n                }\r\n                const fnState = this._createState(fn.node.body, state.context.clone(), state);\r\n\r\n                for (let ai = 0; ai < fn.node.args.length; ++ai) {\r\n                    const arg = fn.node.args[ai];\r\n                    const value = this._exec.evalExpression(node.args[ai], fnState.context);\r\n                    fnState.context.createVariable(arg.name, value, arg);\r\n                }\r\n\r\n                fnState.parentCallExpr = node;\r\n                this._execStack.states.push(fnState);\r\n                fnState.context.currentFunctionName = fn.name;\r\n\r\n                if (this._shouldExecuteNextCommand()) {\r\n                    continue;\r\n                }\r\n                return true;\r\n            } else if (command instanceof StatementCommand) {\r\n                const node = command.node;\r\n                if (stepInto && node instanceof AST.Call) {\r\n                    const fn = state.context.getFunction(node.name);\r\n                    // We want to step into custom functions, not directly execute them\r\n                    if (fn) {\r\n                        const fnState = this._createState(fn.node.body, state.context.clone(), state);\r\n\r\n                        for (let ai = 0; ai < fn.node.args.length; ++ai) {\r\n                            const arg = fn.node.args[ai];\r\n                            const value = this._exec.evalExpression(node.args[ai], fnState.context);\r\n                            fnState.context.createVariable(arg.name, value, arg);\r\n                        }\r\n\r\n                        this._execStack.states.push(fnState);\r\n                        fnState.context.currentFunctionName = fn.name;\r\n\r\n                        if (this._shouldExecuteNextCommand()) {\r\n                            continue;\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                const res = this._exec.execStatement(node, state.context);\r\n                if (res !== null && res !== undefined && !(res instanceof VoidData)) {\r\n                    let s = state;\r\n                    // Find the CallExpr to store the return value in.\r\n                    while (s) {\r\n                        if (s.parentCallExpr) {\r\n                            s.parentCallExpr.setCachedReturnValue(res);\r\n                            break;\r\n                        }\r\n                        s = s.parent;\r\n                    }\r\n                    if (s === null) {\r\n                        console.error(\"Could not find CallExpr to store return value in\");\r\n                    }\r\n                    if (this._shouldExecuteNextCommand()) {\r\n                        continue;\r\n                    }\r\n                    return true;\r\n                }\r\n            } else if (command instanceof ContinueTargetCommand) {\r\n                continue;\r\n            } else if (command instanceof BreakTargetCommand) {\r\n                continue;\r\n            } else if (command instanceof ContinueCommand) {\r\n                const targetId = command.id;\r\n                while (!this._execStack.isEmpty) {\r\n                    state = this._execStack.last;\r\n                    for (let i = state.commands.length - 1; i >= 0; --i) {\r\n                        const cmd = state.commands[i];\r\n                        if (cmd instanceof ContinueTargetCommand) {\r\n                            if (cmd.id === targetId) {\r\n                                state.current = i + 1;\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    // No Goto -1 found (loop), pop the current state and continue searching.\r\n                    this._execStack.pop();\r\n                }\r\n                // If we got here, we've reached the end of the stack and didn't find a -1.\r\n                // That means a continue was used outside of a loop, so we're done.\r\n                console.error(\"Continue statement used outside of a loop\");\r\n                return false;\r\n            } else if (command instanceof BreakCommand) {\r\n                const targetId = command.id;\r\n                // break-if conditional break \r\n                if (command.condition) {\r\n                    const res = this._exec.evalExpression(command.condition, state.context);\r\n                    if (!(res instanceof ScalarData)) {\r\n                        console.error(\"Condition must be a scalar\");\r\n                        return false;\r\n                    }\r\n                    // If the condition is false, then we should not the break.\r\n                    if (!res.value) {\r\n                        if (this._shouldExecuteNextCommand()) {\r\n                            continue;\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                while (!this._execStack.isEmpty) {\r\n                    state = this._execStack.last;\r\n                    for (let i = state.commands.length - 1; i >= 0; --i) {\r\n                        const cmd = state.commands[i];\r\n                        if (cmd instanceof BreakTargetCommand) {\r\n                            if (cmd.id === targetId) {\r\n                                state.current = i + 1;\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    // No Goto -2 found (loop), pop the current state and continue searching.\r\n                    this._execStack.pop();\r\n                }\r\n                // If we got here, we've reached the end of the stack and didn't find a BreakTarget.\r\n                // That means a break was used outside of a loop, so we're done.\r\n                console.error(\"Break statement used outside of a loop\");\r\n                return false;\r\n            } else if (command instanceof GotoCommand) {\r\n                if (command.condition) {\r\n                    const res = this._exec.evalExpression(command.condition, state.context);\r\n                    if (!(res instanceof ScalarData)) {\r\n                        console.error(\"Condition must be a scalar\");\r\n                        return false;\r\n                    }\r\n                    // If the GOTO condition value is true, then continue to the next command.\r\n                    // Otherwise, jump to the specified position.\r\n                    if (res.value) {\r\n                        if (this._shouldExecuteNextCommand()) {\r\n                            continue;\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n                state.current = command.position;\r\n                if (this._shouldExecuteNextCommand()) {\r\n                    continue;\r\n                }\r\n                return true;\r\n            } else if (command instanceof BlockCommand) {\r\n                const blockState = this._createState(command.statements, state.context.clone(), state);\r\n                this._execStack.states.push(blockState);\r\n                continue; // step into the first statement of the block\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (this._shouldExecuteNextCommand()) {\r\n                continue;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    _dispatchWorkgroup(f: FunctionRef, workgroup_id: number[], context: ExecContext): boolean {\r\n        const workgroupSize = [1, 1, 1];\r\n        for (const attr of f.node.attributes) {\r\n            if (attr.name === \"workgroup_size\") {\r\n                if (Array.isArray(attr.value)) {\r\n                    if (attr.value.length > 0) {\r\n                        // The value could be an override constant\r\n                        const v = context.getVariableValue(attr.value[0]);\r\n                        if (v instanceof ScalarData) {\r\n                            workgroupSize[0] = v.value;\r\n                        } else {\r\n                            workgroupSize[0] = parseInt(attr.value[0]);\r\n                        }\r\n                    }\r\n                    if (attr.value.length > 1) {\r\n                        const v = context.getVariableValue(attr.value[1]);\r\n                        if (v instanceof ScalarData) {\r\n                            workgroupSize[1] = v.value;\r\n                        } else {\r\n                            workgroupSize[1] = parseInt(attr.value[1]);\r\n                        }\r\n                    }\r\n                    if (attr.value.length > 2) {\r\n                        const v = context.getVariableValue(attr.value[2]);\r\n                        if (v instanceof ScalarData) {\r\n                            workgroupSize[2] = v.value;\r\n                        } else {\r\n                            workgroupSize[2] = parseInt(attr.value[2]);\r\n                        }\r\n                    }\r\n                } else {\r\n                    const v = context.getVariableValue(attr.value);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[0] = v.value;\r\n                    } else if (v instanceof VectorData) {\r\n                        workgroupSize[0] = v.data[0];\r\n                        workgroupSize[1] = v.data.length > 1 ? v.data[1] : 1;\r\n                        workgroupSize[2] = v.data.length > 2 ? v.data[2] : 1;\r\n                    } else {\r\n                        workgroupSize[0] = parseInt(attr.value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const vec3u = this._exec.typeInfo[\"vec3u\"];\r\n        const u32 = this._exec.typeInfo[\"u32\"];\r\n        context.setVariable(\"@workgroup_size\", new VectorData(workgroupSize, vec3u));\r\n\r\n        const width = workgroupSize[0];\r\n        const height = workgroupSize[1];\r\n        const depth = workgroupSize[2];\r\n\r\n        let found = false;\r\n        for (let z = 0, li = 0; z < depth && !found; ++z) {\r\n            for (let y = 0; y < height && !found; ++y) {\r\n                for (let x = 0; x < width && !found; ++x, ++li) {\r\n                    const local_invocation_id = [x, y, z];\r\n                    const global_invocation_id = [\r\n                        x + workgroup_id[0] * workgroupSize[0],\r\n                        y + workgroup_id[1] * workgroupSize[1],\r\n                        z + workgroup_id[2] * workgroupSize[2]];\r\n\r\n                    context.setVariable(\"@local_invocation_id\", new VectorData(local_invocation_id, vec3u));\r\n                    context.setVariable(\"@global_invocation_id\", new VectorData(global_invocation_id, vec3u));\r\n                    context.setVariable(\"@local_invocation_index\", new ScalarData(li, u32));\r\n\r\n                    if (global_invocation_id[0] === this._dispatchId[0] &&\r\n                        global_invocation_id[1] === this._dispatchId[1] &&\r\n                        global_invocation_id[2] === this._dispatchId[2]) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (found) {\r\n            this._dispatchExec(f, context);\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    _dispatchExec(f: FunctionRef, context: ExecContext) {\r\n        // Update any built-in input args.\r\n        // TODO: handle input structs.\r\n        for (const arg of f.node.args) {\r\n            for (const attr of arg.attributes) {\r\n                if (attr.name === \"builtin\") {\r\n                    const globalName = `@${attr.value}`;\r\n                    const globalVar = context.getVariable(globalName);\r\n                    if (globalVar !== null) {\r\n                        context.variables.set(arg.name, globalVar);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const state = this._createState(f.node.body, context);\r\n        this._execStack.states.push(state);\r\n    }\r\n\r\n    _createState(ast: AST.Node[], context: ExecContext, parent?: StackFrame): StackFrame {\r\n        const state = new StackFrame(context, parent ?? null);\r\n\r\n        for (const statement of ast) {\r\n            // A statement may have expressions that include function calls.\r\n            // Gather all of the internal function calls from the statement.\r\n            // We can then include them as commands to step through, storing their\r\n            // values with the call node so that when it is evaluated, it uses that\r\n            // already computed value. This allows us to step into the function\r\n            if (statement instanceof AST.Let ||\r\n                statement instanceof AST.Var ||\r\n                statement instanceof AST.Const ||\r\n                statement instanceof AST.Assign) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.value, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Call) {\r\n                const functionCalls = [];\r\n                for (const arg of statement.args) {\r\n                    this._collectFunctionCalls(arg, functionCalls);\r\n                }\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Return) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.value, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Increment) {\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Function) {\r\n                const f = new FunctionRef(statement);\r\n                state.context.functions.set(statement.name, f);\r\n                continue;\r\n            } else if (statement instanceof AST.If) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.condition, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n\r\n                let conditionCmd = new GotoCommand(statement.condition, 0, statement.line);\r\n                state.commands.push(conditionCmd);\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                }\r\n                const gotoEnd = new GotoCommand(null, 0, statement.line);\r\n                state.commands.push(gotoEnd);\r\n\r\n                for (const elseIf of statement.elseif) {\r\n                    conditionCmd.position = state.commands.length;\r\n\r\n                    const functionCalls = [];\r\n                    this._collectFunctionCalls(elseIf.condition, functionCalls);\r\n                    for (const call of functionCalls) {\r\n                        state.commands.push(new CallExprCommand(call, statement));\r\n                    }\r\n\r\n                    conditionCmd = new GotoCommand(elseIf.condition, 0, elseIf.line);\r\n                    state.commands.push(conditionCmd);\r\n                    if (elseIf.body.length > 0) {\r\n                        state.commands.push(new BlockCommand(elseIf.body));\r\n                    }\r\n                    state.commands.push(gotoEnd);\r\n                }\r\n\r\n                conditionCmd.position = state.commands.length;\r\n                if (statement.else) {\r\n                    state.commands.push(new BlockCommand(statement.else));\r\n                }\r\n\r\n                gotoEnd.position = state.commands.length;\r\n            } else if (statement instanceof AST.Switch) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.condition, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n\r\n                let defaultCase: AST.SwitchCase | null = null;\r\n                for (const c of statement.cases) {\r\n                    if (c instanceof AST.Default) {\r\n                        defaultCase = c;\r\n                        break;\r\n                    } else if (c instanceof AST.Case) {\r\n                        for (const selector of c.selectors) {\r\n                            if (selector instanceof AST.DefaultSelector) {\r\n                                defaultCase = c;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const gotoEndCommands: GotoCommand[] = [];\r\n\r\n                for (const c of statement.cases) {\r\n                    if (c === defaultCase) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!(c instanceof AST.Case)) {\r\n                        continue;\r\n                    }\r\n\r\n                    let lastCondition = null;\r\n                    for (const selector of c.selectors) {\r\n                        let conditionExpr = new AST.BinaryOperator(\"==\", statement.condition, selector);\r\n                        if (lastCondition) {\r\n                            conditionExpr = new AST.BinaryOperator(\"||\", lastCondition, conditionExpr);\r\n                        }\r\n                        lastCondition = conditionExpr;\r\n                    }\r\n\r\n                    const gotoCommand = new GotoCommand(lastCondition, 0, c.line);\r\n                    state.commands.push(gotoCommand);\r\n\r\n                    if (c.body.length > 0) {\r\n                        state.commands.push(new BlockCommand(c.body));\r\n                    }\r\n\r\n                    const gotoEndCommand = new GotoCommand(null, 0, c.line);\r\n                    gotoEndCommands.push(gotoEndCommand);\r\n                    state.commands.push(gotoEndCommand);\r\n\r\n                    gotoCommand.position = state.commands.length;\r\n                }\r\n\r\n                if (defaultCase) {\r\n                    state.commands.push(new BlockCommand(defaultCase.body));\r\n                }\r\n\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n\r\n                const commandPos = state.commands.length;\r\n                for (let i = 0; i < gotoEndCommands.length; ++i) {\r\n                    gotoEndCommands[i].position = commandPos;\r\n                }\r\n            } else if (statement instanceof AST.While) {\r\n                const functionCalls = [];\r\n                state.commands.push(new ContinueTargetCommand(statement.id));\r\n                this._collectFunctionCalls(statement.condition, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                const conditionCmd = new GotoCommand(statement.condition, 0, statement.line);\r\n                state.commands.push(conditionCmd);\r\n                let lastLine = statement.line;\r\n\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                    lastLine = statement.body[statement.body.length - 1].line;\r\n                }\r\n\r\n                state.commands.push(new GotoCommand(statement.condition, 0, lastLine));\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n                conditionCmd.position = state.commands.length;\r\n            } else if (statement instanceof AST.For) {\r\n                if (statement.init) {\r\n                    state.commands.push(new StatementCommand(statement.init));\r\n                }\r\n\r\n                let conditionPos = state.commands.length;\r\n\r\n                if (statement.increment === null) {\r\n                    state.commands.push(new ContinueTargetCommand(statement.id));\r\n                }\r\n                let conditionCmd = null;\r\n                if (statement.condition) {\r\n                    const functionCalls = [];\r\n                    this._collectFunctionCalls(statement.condition!, functionCalls);\r\n                    for (const call of functionCalls) {\r\n                        state.commands.push(new CallExprCommand(call, statement));\r\n                    }\r\n                    conditionCmd = new GotoCommand(statement.condition, 0, statement.line);\r\n                    state.commands.push(conditionCmd);\r\n                }\r\n\r\n                let lastLine = statement.line;\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                    lastLine = statement.body[statement.body.length - 1].line;\r\n                }\r\n\r\n                if (statement.increment) {\r\n                    state.commands.push(new ContinueTargetCommand(statement.id));\r\n                    state.commands.push(new StatementCommand(statement.increment));\r\n                }\r\n                state.commands.push(new GotoCommand(null, conditionPos, lastLine));\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n                conditionCmd.position = state.commands.length;\r\n            } else if (statement instanceof AST.Loop) {\r\n                let loopStartPos = state.commands.length;\r\n                if (!statement.continuing) {\r\n                    state.commands.push(new ContinueTargetCommand(statement.id));\r\n                }\r\n                let lastLine = statement.line;\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                    lastLine = statement.body[statement.body.length - 1].line;\r\n                }\r\n                state.commands.push(new GotoCommand(null, loopStartPos, lastLine));\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n            } else if (statement instanceof AST.Continuing) {\r\n                state.commands.push(new ContinueTargetCommand(statement.loopId));\r\n                state.commands.push(new BlockCommand(statement.body));\r\n            } else if (statement instanceof AST.Continue) {\r\n                state.commands.push(new ContinueCommand(statement.loopId, statement));\r\n            } else if (statement instanceof AST.Break) {\r\n                state.commands.push(new BreakCommand(statement.loopId, statement.condition, statement));\r\n            } else if (statement instanceof AST.StaticAssert) {\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Struct) {\r\n                // nothing to do\r\n            } else {\r\n                console.error(`TODO: statement type ${statement.constructor.name}`);\r\n            }\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n    _collectFunctionCalls(node: AST.Expression, functionCalls: AST.CallExpr[]) {\r\n        if (node instanceof AST.CallExpr) {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    this._collectFunctionCalls(arg, functionCalls);\r\n                }\r\n            }\r\n            // Only collect custom function calls, not built-in functions.\r\n            if (!node.isBuiltin) {\r\n                functionCalls.push(node);\r\n            }\r\n        } else if (node instanceof AST.BinaryOperator) {\r\n            this._collectFunctionCalls(node.left, functionCalls);\r\n            this._collectFunctionCalls(node.right, functionCalls);\r\n        } else if (node instanceof AST.UnaryOperator) {\r\n            this._collectFunctionCalls(node.right, functionCalls);\r\n        } else if (node instanceof AST.CreateExpr) {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    this._collectFunctionCalls(arg, functionCalls);\r\n                }\r\n            }\r\n        } else if (node instanceof AST.BitcastExpr) {\r\n            this._collectFunctionCalls(node.value, functionCalls);\r\n        } else if (node instanceof AST.ArrayIndex) {\r\n            this._collectFunctionCalls(node.index, functionCalls);\r\n        } else if (AST.LiteralExpr) {\r\n            // nothing to do\r\n        } else {\r\n            console.error(`TODO: expression type ${node.constructor.name}`);\r\n        }\r\n    }\r\n}\r\n"],"names":["TypeInfo","constructor","name","attributes","this","size","isArray","isStruct","isTemplate","isPointer","getTypeName","MemberInfo","type","offset","align","members","format","count","stride","StructInfo","super","startLine","endLine","inUse","ArrayInfo","PointerInfo","TemplateInfo","access","ResourceType","VariableInfo","group","binding","resourceType","relations","AliasInfo","InputInfo","locationType","location","interpolation","OutputInfo","OverrideInfo","id","ArgumentInfo","FunctionInfo","stage","inputs","outputs","arguments","returnType","resources","overrides","calls","Set","EntryFunctions","vertex","fragment","compute","float16ToFloat32","float16","s","e","f","Math","pow","NaN","Infinity","float32View","Float32Array","int32View","Int32Array","buffer","float16View","Uint16Array","float32ToFloat16","float32","f32","sign","exponent","fraction","shift","uint32","Uint32Array","uint32ToFloat32","float11ToFloat32","f11","u32","getTexturePixel","imageData","x","y","z","mipLevel","height","bytesPerRow","texelByteSize","pixelValue","value","uintValue","gi","bi","f10","float10ToFloat32","numChannels","i","setPixelValue","Int16Array","f16","TextureFormatInfo","r8unorm","bytesPerBlock","blockWidth","blockHeight","isCompressed","channels","r8snorm","r8uint","r8sint","rg8unorm","rg8snorm","rg8uint","rg8sint","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","r16uint","r16sint","r16float","rg16uint","rg16sint","rg16float","rgba16uint","rgba16sint","rgba16float","r32uint","r32sint","r32float","rg32uint","rg32sint","rg32float","rgba32uint","rgba32sint","rgba32float","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","stencil8","isDepthStencil","hasDepth","hasStencil","depth16unorm","depth24plus","depthOnlyFormat","depth32float","stencilOnlyFormat","rgb9e5ufloat","Node","_id","line","start","length","isAstNode","astNodeType","search","callback","searchBlock","block","_BlockStart","instance","node","Array","_BlockEnd","constEvaluate","context","Error","constEvaluateString","toString","BuiltinFunctionNames","Statement","Function","args","body","attr","arg","StaticAssert","expression","While","condition","Continuing","loopId","For","init","increment","_a","_b","_c","Var","storage","Override","Let","Const","IncrementOperator","AssignOperator","TokenClass","parse","val","key","Increment","operator","variable","Assign","Call","isBuiltin","has","Loop","continuing","Switch","cases","If","elseif","_else","else","Return","Enable","Requires","extensions","Diagnostic","severity","rule","Alias","Discard","Break","Continue","Type","maxFormatType","t","tv","_priority","get","i32","x32","bool","void","Map","ForwardType","Struct","getMemberIndex","member","TemplateType","vec2f","vec3f","vec4f","vec2i","vec3i","vec4i","vec2u","vec3u","vec4u","vec2h","vec3h","vec4h","vec2b","vec3b","vec4b","mat2x2f","mat2x3f","mat2x4f","mat3x2f","mat3x3f","mat3x4f","mat4x2f","mat4x3f","mat4x4f","mat2x2h","mat2x3h","mat2x4h","mat3x2h","mat3x3h","mat3x4h","mat4x2h","mat4x3h","mat4x4h","mat2x2i","mat2x3i","mat2x4i","mat3x2i","mat3x3i","mat3x4i","mat4x2i","mat4x3i","mat4x4i","mat2x2u","mat2x3u","mat2x4u","mat3x2u","mat3x3u","mat3x4u","mat4x2u","mat4x3u","mat4x4u","PointerType","ArrayType","SamplerType","Expression","postfix","StringExpr","CreateExpr","evalExpression","CallExpr","cachedReturnValue","setCachedReturnValue","VariableExpr","ConstExpr","initializer","data","getSubData","LiteralExpr","undefined","isScalar","ScalarData","isVector","VectorData","MatrixData","scalarValue","console","error","vectorValue","BitcastExpr","TypecastExpr","ArrayIndex","index","Operator","UnaryOperator","right","BinaryOperator","left","_getPromotedType","t1","t2","SwitchCase","DefaultSelector","Case","selectors","Default","Argument","ElseIf","Member","Attribute","Data","typeInfo","parent","clone","setDataValue","exec","VoidData","PointerData","reference","floor","v","_getVectorData","values","formatName","getTypeInfo","typename","typeName","self","idx","d","byteOffset","toLowerCase","m","push","endsWith","formatSuffix","vectorData","TypedData","ArrayBuffer","cloned","Uint8Array","log","found","element","setData","byteLength","set","_i","fa","ua","TextureData","descriptor","view","width","Object","depthOrArrayLayers","sampleCount","mipLevelCount","dimension","getMipLevelSize","level","max","formatInfo","getGpuSize","getPixel","setPixel","setTexturePixel","TokenType","TokenTypes","none","reserved","eof","token","asm","bf16","do","enum","f64","handle","i8","i16","i64","mat","premerge","regardless","typedef","u8","u16","u64","unless","using","vec","keywords","array","keyword","atomic","mat2x2","mat2x3","mat2x4","mat3x2","mat3x3","mat3x4","mat4x2","mat4x3","mat4x4","ptr","sampler","sampler_comparison","struct","texture_1d","texture_2d","texture_2d_array","texture_3d","texture_cube","texture_cube_array","texture_multisampled_2d","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","texture_depth_multisampled_2d","texture_external","vec2","vec3","vec4","bitcast","break","case","continue","default","diagnostic","discard","enable","fallthrough","false","fn","for","function","if","let","const","loop","while","private","read","read_write","return","requires","switch","true","alias","uniform","var","override","workgroup","write","rgba8unorm_srgb","bgra8unorm_srgb","rg11b10float","static_assert","tokens","decimal_float_literal","hex_float_literal","int_literal","uint_literal","ident","and","and_and","arrow","forward_slash","bang","bracket_left","bracket_right","brace_left","brace_right","colon","comma","equal","equal_equal","not_equal","greater_than","greater_than_equal","shift_right","less_than","less_than_equal","shift_left","modulo","minus","minus_minus","period","plus","plus_plus","or","or_or","paren_left","paren_right","semicolon","star","tilde","underscore","xor","plus_equal","minus_equal","times_equal","division_equal","modulo_equal","and_equal","or_equal","xor_equal","shift_right_equal","shift_left_equal","simpleTokens","literalTokens","_","regexTokens","storage_class","access_mode","sampler_type","sampled_texture_type","multisampled_texture_type","storage_texture_type","depth_texture_type","texture_external_type","any_texture_type","texel_format","const_literal","literal_or_ident","element_count_expression","template_types","attribute_name","assignment_operators","increment_operators","Token","lexeme","end","isTemplateType","indexOf","isArrayType","isArrayOrTemplateType","WgslScanner","source","_tokens","_start","_current","_line","_source","scanTokens","_isAtEnd","scanToken","_advance","_isWhitespace","_peekAhead","commentLevel","simpleToken","_addToken","matchType","isAlpha","_isAlpha","isUnderscore","_isAlphaNumeric","nextChar","matchedType","_findType","nextLexeme","ti","foundLessThan","lookAheadLexeme","lookAhead","maxLookAhead","li","_match","match","c","_isNumeric","amount","text","substring","_f32","_f32_i32","_f32_u32","_i32","_i32_f32","_i32_u32","_u32","_u32_f32","_u32_i32","castScalar","from","to","_FunctionResources","info","_TypeSize","Reflect","uniforms","textures","samplers","aliases","structs","entry","functions","_types","_functions","_isStorageTexture","updateAST","ast","_getAliasInfo","_getAttributeNum","_isUniformVar","g","b","varInfo","Uniform","_isStorageVar","isStorageTexture","StorageTexture","Storage","_isTextureVar","Texture","_isSamplerVar","Sampler","vertexStage","_getAttribute","fragmentStage","computeStage","_findResources","_getInputs","_getOutputs","map","_addCalls","u","_markStructsInUse","getFunctionInfo","getStructInfo","getOverrideInfo","o","_getAlias","call","add","findResource","r","_findResource","_markStructsFromAST","isEntry","varStack","pop","callFn","textureArg","texture","samplerArg","getBindGroups","groups","_makeRoom","_getStructOutputs","output","_getOutputInfo","locationValue","_parseInt","_getStructInputs","input","_getInputInfo","_parseString","n","parseInt","isNaN","a","getTypeInfoByName","_updateTypeInfo","formatIsType","typeSize","_getTypeSize","_updateStructInfo","lastSize","lastOffset","structAlign","mi","ml","sizeInfo","_roundUp","explicitSize","explicitAlign","_typeInfo","divisor","arrayType","E","_textureTypes","_samplerTypes","obj","attrs","defaultValue","k","ceil","VarRef","FunctionRef","ExecContext","variables","currentFunctionName","getVariable","getFunction","createVariable","setVariable","getVariableValue","ExecInterface","getVariableName","BuiltinFunctions","All","isTrue","forEach","Any","res","some","Select","ArrayLength","arrayArg","arrayData","ta","Abs","abs","Acos","acos","Acosh","acosh","Asin","asin","Asinh","asinh","Atan","atan","Atanh","atanh","Atan2","atan2","ys","xs","Ceil","_clamp","min","Clamp","minS","maxS","Cos","cos","Cosh","cosh","CountLeadingZeros","clz32","_countOneBits","CountOneBits","_countTrailingZeros","CountTrailingZeros","Cross","l","lv","rv","Degrees","radToDeg","PI","Determinant","mv","mt","formatType","Distance","sum","sqrt","ls","rs","_dot","e1","e2","dot","Dot","Dot4U8Packed","Dot4I8Packed","Exp","exp","Exp2","ExtractBits","FaceForward","_firstLeadingBit","FirstLeadingBit","_firstTrailingBit","log2","FirstTrailingBit","Floor","Fma","av","bv","cv","Fract","Frexp","InsertBits","insert","mask","invMask","InverseSqrt","Ldexp","Length","Log","Log2","Max","Min","Mix","as","Modf","Normalize","Pow","QuantizeToF16","Radians","Refract","e3","sqrtK","ReverseBits","Round","round","Saturate","Sign","Sin","sin","Sinh","sinh","_smoothstep","edge0","edge1","SmoothStep","e0","xS","Sqrt","Step","edge","Tan","tan","Tanh","tanh","_getTransposeType","tname","Transpose","ttype","Trunc","trunc","Dpdx","DpdxCoarse","DpdxFine","Dpdy","DpdyCoarse","DpdyFine","Fwidth","FwidthCoarse","FwidthFine","TextureDimensions","textureName","textureSize","slice","TextureGather","TextureGatherCompare","TextureLoad","uv","texel","TextureNumLayers","TextureNumLevels","TextureNumSamples","TextureSample","TextureSampleBias","TextureSampleCompare","TextureSampleCompareLevel","TextureSampleGrad","TextureSampleLevel","TextureSampleBaseClampToEdge","TextureStore","AtomicLoad","AtomicStore","currentValue","AtomicAdd","originalValue","AtomicSub","AtomicMax","AtomicMin","AtomicAnd","AtomicOr","AtomicXor","AtomicExchange","AtomicCompareExchangeWeak","Pack4x8snorm","Pack4x8unorm","Pack4xI8","Pack4xU8","Pack4x8Clamp","Pack4xU8Clamp","Pack2x16snorm","Pack2x16unorm","Pack2x16float","Unpack4x8snorm","Unpack4x8unorm","Unpack4xI8","Unpack4xU8","Unpack2x16snorm","Unpack2x16unorm","Unpack2x16float","StorageBarrier","TextureBarrier","WorkgroupBarrier","WorkgroupUniformLoad","SubgroupAdd","SubgroupExclusiveAdd","SubgroupInclusiveAdd","SubgroupAll","SubgroupAnd","SubgroupAny","SubgroupBallot","SubgroupBroadcast","SubgroupBroadcastFirst","SubgroupElect","SubgroupMax","SubgroupMin","SubgroupMul","SubgroupExclusiveMul","SubgroupInclusiveMul","SubgroupOr","SubgroupShuffle","SubgroupShuffleDown","SubgroupShuffleUp","SubgroupShuffleXor","SubgroupXor","QuadBroadcast","QuadSwapDiagonal","QuadSwapX","QuadSwapY","VectorTypeSize","MatrixTypeSize","WgslExec","reflection","builtins","execute","config","_setOverrides","_execStatements","dispatchWorkgroups","kernel","dispatchCount","bindGroups","depth","kernelRefl","resource","textureData","_dispatchWorkgroup","execStatement","stmt","_breakObj","_continueObj","_let","_var","_const","_function","_if","_switch","_for","_while","_loop","subContext","_assign","_increment","_call","_evalBinaryOp","_evalLiteral","_evalVariable","_evalCall","_evalCreate","_evalConst","_evalBitcast","_evalUnaryOp","constants","workgroup_id","workgroupSize","local_invocation_id","global_invocation_id","_dispatchExec","globalName","globalVar","statements","ai","_callBuiltinFunction","_getVariableData","refData","varData","assignValue","op","rNode","defType","defaultCase","selector","selectorValue","_getScalarValue","fromType","fromCast","toType","toCast","cast","castVector","_callConstructorValue","_callConstructorVec","_callConstructorMatrix","memberInfo","_maxFormatTypeInfo","_r","result","rn","_l","la","ra","ln","matrixA","matrixB","j","matrixMultiply","colsB","rowsA","matrix","vector","cols","rows","resultVec","matrixVectorMultiply","vectorMatrixMultiply","argValue","vd","fill","ParseContext","WgslParser","_currentLine","_deferArrayCountEval","_currentLoop","_context","_exec","_forwardTypeCount","tokensOrCode","_initialize","statement","_global_decl_or_directive","arrayDecl","countNode","AST.VariableExpr","constant","AST.Member","AST.PointerType","_forwardType","AST.ArrayType","AST.Var","AST.Let","AST.Const","AST.Function","AST.Argument","AST.ForwardType","ft","_getType","scanner","_updateNode","sourceToken","_previous","_error","message","_peek","types","_check","_consume","tk","hasNameType","_type_alias","directive","_diagnostic","_requires_directive","_enable_directive","_attribute","_global_variable_decl","_override","_override_variable_decl","_global_let_decl","_global_const_decl","_struct","_struct_decl","_fn","_function_decl","argAttrs","typeAttrs","_type_decl","_return","_compound_statement","_statement","_if_statement","_switch_statement","_loop_statement","_for_statement","_while_statement","_continuing_statement","_static_assert_statement","_return_statement","_variable_statement","AST.Discard","breakStmt","AST.Break","_optional_paren_expression","continueStmt","AST.Continue","_increment_decrement_statement","_func_call_statement","_assignment_statement","AST.StaticAssert","whileLoop","AST.While","AST.Continuing","forLoop","AST.For","_for_init","_short_circuit_or_expression","_for_increment","_variable_decl","AST.LiteralExpr","savedPos","_unary_expression","AST.Increment","AST.IncrementOperator","decrement","AST.Assign","AST.AssignOperator","_argument_expression_list","AST.Call","AST.Loop","switchStmt","AST.Switch","_switch_body","hasDefault","_case_selectors","AST.DefaultSelector","_case_body","AST.Case","AST.Default","_shift_expression","nextStatement","_match_elseif","_elseif_statement","AST.If","AST.ElseIf","AST.Return","expr","_short_circuit_and_expr","AST.BinaryOperator","_inclusive_or_expression","_exclusive_or_expression","_and_expression","_equality_expression","_relational_expression","_additive_expression","_multiplicative_expression","AST.UnaryOperator","_singular_expression","_primary_expression","p","_postfix_expression","arrayIndex","AST.ArrayIndex","AST.StringExpr","_getStruct","AST.Type","AST.TemplateType","_validateTypeRange","AST.CreateExpr","AST.CallExpr","AST.ConstExpr","fs","isF16","parseFloat","_paren_expression","AST.BitcastExpr","memberAttrs","memberName","memberType","structNode","AST.Struct","_const_expression","_override_decl","valueExpr","constValue","AST.Override","ruleMessage","AST.Diagnostic","AST.Enable","AST.Requires","aliasType","aliasNode","AST.Alias","_texture_sampler_types","pointer","decl","countInt","AST.SamplerType","AST.Attribute","WgslReflect","code","update","Command","StatementCommand","CallExprCommand","ContinueTargetCommand","BreakTargetCommand","ContinueCommand","BreakCommand","GotoCommand","position","lineNo","BlockCommand","StackFrame","commands","current","parentCallExpr","isAtEnd","getNextCommand","command","getCurrentCommand","ExecStack","states","isEmpty","last","WgslDebug","runStateCallback","_runTimer","breakpoints","_code","reset","startDebug","_execStack","state","_createState","currentState","currentCommand","toggleBreakpoint","delete","clearBreakpoints","clear","isRunning","run","setInterval","clearInterval","stepNext","pause","debugWorkgroup","dispatchId","_dispatchId","kernelFn","_shouldExecuteNextCommand","stepInto","stepOver","stepOut","parentState","fnState","targetId","cmd","blockState","functionCalls","_collectFunctionCalls","conditionCmd","gotoEnd","elseIf","gotoEndCommands","lastCondition","conditionExpr","gotoCommand","gotoEndCommand","commandPos","lastLine","conditionPos","loopStartPos"],"mappings":"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IG,EAGxB,MAAMM,EAAuB,IAAI9H,IAAI,CACnC,MACA,MACA,MACA,SACA,cACA,MACA,OACA,QACA,OACA,QACA,OACA,QACA,QACA,OACA,QACA,MACA,OACA,oBACA,eACA,qBACA,QACA,UACA,cACA,WACA,MACA,eACA,eACA,MACA,OACA,cACA,cACA,kBACA,mBACA,QACA,MACA,QACA,QACA,aACA,cACA,QACA,SACA,MACA,OACA,MACA,MACA,MACA,OACA,YACA,MACA,gBACA,UACA,UACA,UACA,cACA,QACA,WACA,OACA,MACA,OACA,aACA,OACA,OACA,MACA,OACA,YACA,QACA,OACA,aACA,WACA,OACA,aACA,WACA,SACA,eACA,aACA,oBACA,gBACA,uBACA,cACA,mBACA,mBACA,oBACA,gBACA,oBACA,uBACA,4BACA,oBACA,qBACA,+BACA,eACA,aACA,cACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,iBACA,4BACA,eACA,eACA,WACA,WACA,eACA,gBACA,gBACA,gBACA,gBACA,iBACA,iBACA,aACA,aACA,kBACA,kBACA,kBACA,iBACA,iBACA,mBACA,uBACA,cACA,uBACA,uBACA,cACA,cACA,cACA,iBACA,oBACA,yBACA,gBACA,cACA,cACA,cACA,uBACA,uBACA,aACA,kBACA,sBACA,oBACA,qBACA,cACA,gBACA,mBACA,YACA,cAQI,MAAO+H,UAAkBtB,EAC7B,WAAA5J,GACEmB,OACD,EAQG,MAAOgK,UAAiBD,EAU5B,WAAAlL,CACEC,EACAmL,EACArI,EACAsI,EACAjK,EACAC,GAEAF,QAVFhB,KAAA+C,MAAuB,IAAIC,IAWzBhD,KAAKF,KAAOA,EACZE,KAAKiL,KAAOA,EACZjL,KAAK4C,WAAaA,EAClB5C,KAAKkL,KAAOA,EACZlL,KAAKiB,UAAYA,EACjBjB,KAAKkB,QAAUA,CAChB,CAED,eAAI6I,GACF,MAAO,UACR,CAED,MAAAC,CAAOC,GACL,GAAIjK,KAAKD,WACP,IAAK,MAAMoL,KAAQnL,KAAKD,WACtBkK,EAASkB,GAGblB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"}